
/* tslint:disable:quotemark */

export function globalfunctions(): any {
  let data = {
    "ACos": {
      name: 'ACos',
      name_en: 'ACos',
      description: 'Вычисляет арккосинус от аргумента Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Аргумент функции. Определен в диапазоне -1 ... 1.'
          }
        }
      }
    },
    "ASin": {
      name: 'ASin',
      name_en: 'ASin',
      description: 'Вычисляет арксинус от аргумента Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Аргумент функции. Определен в диапазоне -1 ... 1.'
          }
        }
      }
    },
    "ATan": {
      name: 'ATan',
      name_en: 'ATan',
      description: 'Вычисляет арктангенс от аргумента Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Аргумент функции.'
          }
        }
      }
    },
    "Base64Значение": {
      name: 'Base64Значение',
      name_en: 'Base64Value',
      description: 'Получает из строки закодированной по алгоритму base64 двоичные данные.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): ДвоичныеДанные',
          Параметры: {
            Строка: 'Строка, закодированная по алгоритму base64.'
          }
        }
      }
    },
    "Base64Строка": {
      name: 'Base64Строка',
      name_en: 'Base64String',
      description: 'Получает строку, закодированную по алгоритму base64.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: ДвоичныеДанные): Строка',
          Параметры: {
            Значение: 'Двоичные данные, которые необходимо закодировать по алгоритму base64.'
          }
        }
      }
    },
    "Cos": {
      name: 'Cos',
      name_en: 'Cos',
      description: 'Вычисляет косинус от аргумента Угол, заданного в радианах.',
      signature: {
        default: {
          СтрокаПараметров: '(Угол: Число): Число',
          Параметры: {
            Угол: 'Аргумент функции.'
          }
        }
      }
    },
    "Exp": {
      name: 'Exp',
      name_en: 'Exp',
      description: 'Вычисляет результат возведения основания натурального логарифма (числа e) в степень Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Аргумент функции.'
          }
        }
      }
    },
    "Log": {
      name: 'Log',
      name_en: 'Log',
      description: 'Вычисляет натуральный логарифм параметра Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Исходное число, больше 0.'
          }
        }
      }
    },
    "Log10": {
      name: 'Log10',
      name_en: 'Log10',
      description: 'Вычисляет десятичный логарифм параметра Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Исходное число, больше 0.'
          }
        }
      }
    },
    "Pow": {
      name: 'Pow',
      name_en: 'Pow',
      description: 'Возводит число X в степень Y.',
      signature: {
        default: {
          СтрокаПараметров: '(Основание: Число, Показатель: Число): Число',
          Параметры: {
            Основание: 'Основание операции возведения в степень.',
            Показатель: 'Показатель степени.'
          }
        }
      }
    },
    "Sin": {
      name: 'Sin',
      name_en: 'Sin',
      description: 'Вычисляет синус от аргумента Угол, заданного в радианах.',
      signature: {
        default: {
          СтрокаПараметров: '(Угол: Число): Число',
          Параметры: {
            Угол: 'Аргумент функции.'
          }
        }
      }
    },
    "Sqrt": {
      name: 'Sqrt',
      name_en: 'Sqrt',
      description: 'Вычисляет квадратный корень параметра Число.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Аргумент функции. Неотрицательное число.'
          }
        }
      }
    },
    "Tan": {
      name: 'Tan',
      name_en: 'Tan',
      description: 'Вычисляет тангенс от аргумента Угол, заданного в радианах.',
      signature: {
        default: {
          СтрокаПараметров: '(Угол: Число): Число',
          Параметры: {
            Угол: 'Аргумент функции.'
          }
        }
      }
    },
    "XMLЗначение": {
      name: 'XMLЗначение',
      name_en: 'XMLValue',
      description: 'Выполняет преобразование из строки, полученной из текста элемента или значения атрибута XML, в значение в соответствии с указанным типом. Выполняет действие обратное действию метода XMLСтрока.',
      signature: {
        default: {
          СтрокаПараметров: '(Тип: Тип, СтрокаXML: Строка): Null',
          Параметры: {
            Тип: 'Тип, значение которого надо получить при преобразовании из строкового представления XML.',
            СтрокаXML: 'Строка, содержащая строковое представление значения, полученное из XML.'
          }
        }
      }
    },
    "XMLСтрока": {
      name: 'XMLСтрока',
      name_en: 'XMLString',
      description: 'Получает XML представление значения для помещения в текст элемента или значение атрибута XML. XML представление зависит от типа значения:   - Строка - как есть;  - Булево: Истина - как "true", Ложь - как "false";  - Дата - XML представление соответствует представлению типа dateTime схемы XML (см. http://www.w3.org/TR/xmlschema-2/#dateTime);  - Число - XML представление соответствует представлению типа decimal схемы XML (см. http://www.w3.org/TR/xmlschema-2/#decimal);  - Значение системного перечисления (для перечислений, поддерживающих XML сериализацию) - как имя значения перечисления;  - УникальныйИдентификатор - как строковое представление уникального идентификатора;  - Ссылки - как XML представление уникального идентификатора ссылки;  - ХранилищеЗначения и ДвоичныеДанные - как строка в формате base64.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Неопределено): Строка',
          Параметры: {
            Значение: 'Значение, для которого должно быть получено строковое представление, которое может быть использовано как текст элемента или значение атрибута XML.'
          }
        }
      }
    },
    "XMLТип": {
      name: 'XMLТип',
      name_en: 'XMLType',
      description: 'Получает тип данных XML, соответствующий переданному в качестве параметра типу.',
      signature: {
        default: {
          СтрокаПараметров: '(Тип: Тип): ТипДанныхXML',
          Параметры: {
            Тип: 'Тип значения, для которого необходимо определить соответствующий XML тип.'
          }
        }
      }
    },
    "XMLТипЗнч": {
      name: 'XMLТипЗнч',
      name_en: 'XMLTypeOf',
      description: 'Получает тип данных XML, соответствующий типу переданного в качестве параметра значения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный): ТипДанныхXML',
          Параметры: {
            Значение: 'Значение, для типа которого нужно получить соответствующий тип данных XML.'
          }
        }
      }
    },
    "АктивноеОкно": {
      name: 'АктивноеОкно',
      name_en: 'ActiveWindow',
      description: 'Получает текущее активное окно.'
    },
    "БезопасныйРежим": {
      name: 'БезопасныйРежим',
      name_en: 'SafeMode',
      description: 'Получает текущее значение безопасного режима.'
    },
    "БезопасныйРежимРазделенияДанных": {
      name: 'БезопасныйРежимРазделенияДанных',
      name_en: 'DataSeparationSafeMode',
      description: 'Показывает, установлен ли безопасный режим разделения данных по данному разделителю. Учитывет установку режима безопасного сеанса, определяемого установкой атрибута safe=”true” элемента zone файла default.vrd.',
      signature: {
        default: {
          СтрокаПараметров: '(ОбщийРеквизит: Строка): Булево',
          Параметры: {
            ОбщийРеквизит: 'Имя общего реквизита со значением "Использовать" свойства "Разделение данных", для которого должен быть получен безопасный режим разделения данных.'
          }
        }
      }
    },
    "Булево": {
      name: 'Булево',
      name_en: 'Boolean',
      description: 'Преобразует полученный параметр в значение типа Булево. Преобразование числа к типу Булево производится по следующим правилам:   - 0 преобразуется в Ложь;  - остальные значения преобразуются в Истина.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Число): Булево',
          Параметры: {
            Значение: 'Исходное значение.'
          }
        }
      }
    },
    "ВвестиДату": {
      name: 'ВвестиДату',
      name_en: 'InputDate',
      description: 'Вызывает диалог для ввода даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата, Подсказка?: Строка, ЧастьДаты?: ЧастиДаты): Булево',
          Параметры: {
            Дата: 'Имя доступной в модуле переменной. В эту переменную будет помещено введенное значение даты. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
            Подсказка: 'Текст заголовка окна диалога ввода даты. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            ЧастьДаты: 'Вводимая в диалоге часть (или части) даты. Значение по умолчанию: ДатаВремя.'
          }
        }
      }
    },
    "ВвестиЗначение": {
      name: 'ВвестиЗначение',
      name_en: 'InputValue',
      description: 'Вызывает диалог для ввода значения заданного типа. Если тип переменной не определен и Тип представляет собой составной тип данных, то в поле ввода появляется кнопка выбора типа.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный, Подсказка?: Строка, Тип?: Тип): Булево',
          Параметры: {
            Значение: 'Имя доступной в модуле переменной. В эту переменную будет помещено введенное значение. Если параметр <Тип> не задан или имеет значение Неопределено, тип данной переменной используется в качестве типа вводимого в диалоге данного. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
            Подсказка: 'Текст заголовка окна диалога ввода значения. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            Тип: 'Тип вводимого значения. Если параметр не указан, используется тип параметра <Значение>.'
          }
        }
      }
    },
    "ВвестиСтроку": {
      name: 'ВвестиСтроку',
      name_en: 'InputString',
      description: 'Вызывает диалог для ввода строки.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, Подсказка?: Строка, Длина?: Число, Многострочность?: Булево): Булево',
          Параметры: {
            Строка: 'Доступная в модуле переменная. В эту переменную будет помещена введенная в диалоге строка. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
            Подсказка: 'Текст заголовка окна диалога ввода строки. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            Длина: 'Длина вводимой строки. Если параметр не указан, то строка неограниченной длины. Значение по умолчанию: 0.',
            Многострочность: 'Определяет режим ввода многострочного текста: Истина - ввод многострочного текста с разделителями строк; Ложь - ввод простой строки. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "ВвестиЧисло": {
      name: 'ВвестиЧисло',
      name_en: 'InputNumber',
      description: 'Вызывает диалог для ввода числа.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число, Подсказка?: Строка, Длина?: Число, Точность?: Число): Булево',
          Параметры: {
            Число: 'Имя доступной в модуле переменной. В эту переменную будет помещено введенное число. Начальное значение переменной будет использовано в качестве начального значения в диалоге.',
            Подсказка: 'Текст заголовка окна диалога ввода числа. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            Длина: 'Длина вводимого числа включая дробную часть (символы разделителей не учитываются). Значение по умолчанию: 0.',
            Точность: 'Количество знаков в дробной части вводимого числа. Значение по умолчанию: 0.'
          }
        }
      }
    },
    "ВозможностьЧтенияXML": {
      name: 'ВозможностьЧтенияXML',
      name_en: 'CanReadXML',
      description: 'Производит проверку возможности чтения из XML значения указанного типа.  Данный метод получает тип данных XML из объекта ЧтениеXML, а затем пытается определить, имеется ли соответствующий тип 1С:Предприятия, аналогично тому как это делает метод ПолучитьXMLТип.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧтениеXML: ЧтениеXML): Булево',
          Параметры: {
            ЧтениеXML: 'Объект, через который производится чтение XML.'
          }
        }
      }
    },
    "Вопрос": {
      name: 'Вопрос',
      name_en: 'DoQueryBox',
      description: 'Выводит на экран окно вопроса.',
      signature: {
        default: {
          СтрокаПараметров: '(ТекстВопроса: Строка, Кнопки: РежимДиалогаВопрос, Таймаут?: Число, КнопкаПоУмолчанию?: Произвольный, Заголовок?: Строка, КнопкаТаймаута?: Произвольный): Произвольный',
          Параметры: {
            ТекстВопроса: 'Текст задаваемого вопроса.',
            Кнопки: 'Задает состав и текст кнопок диалога, а также, связанные с кнопками значения. При использовании типа СписокЗначений:   - Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки. В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;  - Представление – задает текст кнопки. Если представление не задано и в качестве значения используется значение перечисления КодВозвратаДиалога, то используется стандартное представление;  - Картинка – не используется (должна быть пустой);  - Пометка – не используется (должна быть пустой). При использовании типа СписокЗначений список не должен быть пустым.',
            Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно вопроса будет закрыто. Если параметр не указан, то время ожидания не ограничено. Значение по умолчанию: 0.',
            КнопкаПоУмолчанию: 'Определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению.',
            Заголовок: 'Содержит заголовок окна вопроса.',
            КнопкаТаймаута: 'Определяет кнопку (по типу кнопки или по связанному с ней значению), на которой отображается количество секунд, оставшихся до истечения таймаута.'
          }
        }
      }
    },
    "ВосстановитьЗначение": {
      name: 'ВосстановитьЗначение',
      name_en: 'RestoreValue',
      description: 'Получает значение, сохраненное ранее с помощью метода СохранитьЗначение.',
      signature: {
        default: {
          СтрокаПараметров: '(Имя: Строка): Произвольный',
          Параметры: {
            Имя: 'Имя сохраненного значения.'
          }
        }
      }
    },
    "ВРег": {
      name: 'ВРег',
      name_en: 'Upper',
      description: 'Преобразует все символы строки в верхний регистр.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Строка',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "ВыгрузитьЖурналРегистрации": {
      name: 'ВыгрузитьЖурналРегистрации',
      name_en: 'UnloadEventLog',
      description: 'Выгружает журнал регистрации. Существует возможность установить фильтр, задаваемый структурой специального формата, указывающий, какие записи журнала регистрации выгружать, а также указать колонки, которые необходимо выгружать. Если указано имя входного файла, то происходит выгрузка из указанного файла.',
      signature: {
        default: {
          СтрокаПараметров: '(Приемник: Строка, Фильтр?: Структура, Колонки?: Строка, ИмяВходногоФайла?: Строка, МаксимальноеКоличество?: Число)',
          Параметры: {
            Приемник: 'Строка, содержащая имя выходного XML файла, либо таблица значений, в которую будут выгружены выбранные в соответствии с отбором записи журнала регистрации. В случае выгрузки в таблицу значений, она содержит колонки, в соответствии с параметром <Колонки>:   - Уровень (Level) - тип УровеньЖурналаРегистрации;  - Дата (Date) - тип Дата;  - Пользователь (User) - идентификатор пользователя, тип УникальныйИдентификатор;  - Компьютер (Computer) - имя компьютера, тип Строка;  - ИмяПриложения (ApplicationName) - имя приложения, тип Строка;  - Событие (Event ) - имя события, тип Строка;  - Комментарий (Comment) - комментарий, тип Строка;  - Метаданные (Metadata) - имя объекта метаданных, тип Строка; для событий "Доступ. Доступ" и "Доступ. Отказ в доступе" в этой колонке может содержаться массив имен объектов метаданных, тип Массив;  - Данные (Data) - данные, произвольного типа, в зависимости от события;  - ПредставлениеДанных (DataPresentation) - представление данных, тип Строка;  - ИмяПользователя (UserName) - имя пользователя, тип Строка;  - ПредставлениеПриложения (ApplicationPresentation) - представление имени приложения, тип Строка;  - ПредставлениеСобытия (EventPresentation) - представление события, тип Строка;  - ПредставлениеМетаданных (MetadataPresentation) - представление объекта метаданных; тип Строка; для событий "Доступ. Доступ" и "Доступ. Отказ в доступе" в этой колонке может содержаться массив представлений объектов метаданных, тип Массив;  - СтатусТранзакции (TransactionStatus) - статус транзакции, тип СтатусТранзакцииЗаписиЖурналаРегистрации;  - Транзакция (TransactionID) - представление транзакции, тип Строка;  - Сеанс (Session) - номер сеанса, тип Число;  - Соединение (Connection) - номер соединения, тип Число;  - РабочийСервер (ServerName) - имя рабочего сервера, тип Строка;  - ОсновнойIPПорт (Port) - номер основного IP-порта, тип Число;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта, тип Строка;  - РазделениеДанныхСеанса (SessionDataSeparation) - Структура с элементами, имена которых соответствуют именам общих реквизитов, разделяющих данные, а значения - значениям этих общих реквизитов;  - ПредставлениеРазделенияДанныхСеанса (SessionDataSeparationPresentation) - Массив строк вида: <представление общего реквизита>: <представление значения общего реквизита>.',
            Фильтр: 'Структура фильтра журнала регистрации:   - ДатаНачала (StartDate) - Дата; значение по умолчанию Неопределено;  - ДатаОкончания (EndDate) - Дата; значение по умолчанию Неопределено;  - Уровень (Level) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - ИмяПриложения (ApplicationName) - Строка или массив строк; значение по умолчанию Неопределено;  - Пользователь (User) - ПользовательИнформационнойБазы или массив таких объектов, или Строка. Объект ПользовательИнформационнойБазы и массив таких объектов можно получить из объекта МенеджерПользователейИнформационнойБазы. Также можно задавать пользователя по имени (строкой). Причем, пользователей, которые были удалены из информацонной базы можно задавать только таким способом. Пустая строка означает "пользователя по умолчанию", который используется, когда в информационной базе нет ни одного пользователя (от имени такого пользователя работают также фоновые задания). Если в фильтре задается массив пользователей, то можно перемешивать в нем значения обоих типов - строка и ПользовательИнформационнойБазы. Значение по умолчанию Неопределено;  - Компьютер (Computer) - Строка или массив строк; значение по умолчанию Неопределено;  - Событие (Event) - Строка или массив строк; значение по умолчанию Неопределено. Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию. Метаданные (Metadata - объект описания метаданного или их массив; значение по умолчанию Неопределено; Данные (Data) - значение, тип значения – ссылка на объект (СправочикСсылка и т.д.); значение по умолчанию Неопределено; ПредставлениеДанных (DataPresentation) - Строка; Комментарий (Comment) - Строка; СтатусТранзакции (TransactionStatus) - перечисление или массив перечислений; значение по умолчанию Неопределено; Транзакция (TransactionID) - идентификатор транзакции; Строка; Сеанс (Session) - номер сеанса пользователя. Число или массив чисел; значение по умолчанию Неопределено; РабочийСервер (ServerName) - Строка или массив строк; значение по умолчанию Неопределено; ОсновнойIPПорт (Port) - номер основного IP-порта рабочего процесса; Число или массив чисел; значение по умолчанию Неопределено; ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Число или массив чисел; значение по умолчанию Неопределено. РазделениеДанныхСеанса (SessionDataSeparation) - Структура, имена элементов которой соответствуют именам общих реквизитов. В процессе отбора элементы структуры РазделениеДанныхСеанса объединяются по И: запись журнала попадает в выборку, если в ней есть соответствия для всех общих реквизитов, заданных в фильтре. Значение по умолчанию Неопределено.    - Значение элемента структуры, в свою очередь, может быть:   - структурой, задающей единичное значение. Элементы структуры:   - Значение (Value) - значение общего реквизита. Значение по умолчанию - Неопределено;  - Использование (Use) - Булево. Значение по умолчанию - Истина. Задает использование общего реквизита, разделяющего данные. Если Ложь - элемент Значение игнорируется и может быть опущен. Таким образом, можно отбирать записи журнала, в которых данный общий реквизит не установлен.   - массивом, который задает набор допустимых значений общего реквизита, разделяющего данные. Массив содержит структуры, каждая из которых задает единичное значение общего реквизита (как описано выше). Элементы массива учитываются по ИЛИ: запись журнала попадает в выборку, если значение общего реквизита в ней равно одному из заданных в массиве.',
            Колонки: 'Для того чтобы выгрузить определенные колонки журнала регистрации необходимо перечислить их имена, при этом необходимо имя каждой колонки отделять запятой. Доступны следующие колонки:   - Уровень (Level);  - Дата (Date);  - Пользователь (User);  - Компьютер (Computer);  - ИмяПриложения (ApplicationName);  - Событие (Event);  - Комментарий (Comment);  - Метаданные (Metadata);  - Данные (Data);  - ПредставлениеДанных (DataPresentation);  - ИмяПользователя (UserName);  - ПредставлениеПриложения (ApplicationPresentation);  - ПредставлениеСобытия (EventPresentation);  - ПредставлениеМетаданных (MetadataPresentation);  - СтатусТранзакции (TransactionStatus);  - Транзакция (TransactionID);  - Сеанс (Session);  - Соединение (Connection);  - РабочийСервер (ServerName);  - ОсновнойIPПорт (Port);  - ВспомогательныйIPПорт (SyncPort);  - РазделениеДанныхСеанса (SessionDataSeparation);  - ПредставлениеРазделенияДанныхСеанса (SessionDataSeparationPresentation). Если не задан, то будут выгружены значения всех колонок.',
            ИмяВходногоФайла: 'Строка, содержащая имя входного файла.',
            МаксимальноеКоличество: 'Ограничивает число считываемых методом событий журнала.  Если параметр не указан или равен 0 - без ограничения. Если указано конечное число, метод считывает последние в хронологическом порядке события с учетом установленного фильтра в количестве, не превышающем значения параметра.'
          }
        }
      }
    },
    "ВыполнитьОбработкуОповещения": {
      name: 'ВыполнитьОбработкуОповещения',
      name_en: 'ExecuteNotifyProcessing',
      description: 'Запускает выполнение процедуры, описанной в параметре ВыполняемоеОповещение.  Вызывающая процедура может передать процедуру обработки результата в виде объекта ОписаниеОповещения, которая будет вызвана после получения результата блокирующего метода.',
      signature: {
        default: {
          СтрокаПараметров: '(ВыполняемоеОповещение: ОписаниеОповещения, Результат?: Произвольный)',
          Параметры: {
            ВыполняемоеОповещение: 'Содержит описание процедуры, вызов которой будет произведен со следующими параметрами:   - <Результат> - значение результата, переданное вторым параметром при вызове метода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта оповещения.',
            Результат: 'Значение, которое будет передано в процедуру, описанную параметром <ВыполняемоеОповещение>. Содержит результат, который мог быть получен при помощи алгоритма с использованием блокирующих методов. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "ВыполнитьПроверкуПравДоступа": {
      name: 'ВыполнитьПроверкуПравДоступа',
      name_en: 'VerifyAccessRights',
      description: 'Выполняет проверку прав текущего пользователя. Если право отсутствует, то вызывается исключение и в журнал регистрации пишется событие ОтказВДоступе.',
      signature: {
        default: {
          СтрокаПараметров: '(Право: Строка, ОбъектМетаданных: ОбъектМетаданных: Куб, СтандартныйРеквизитСтандартнаяТабличнаяЧасть?: Строка)',
          Параметры: {
            Право: 'Проверяемое право.',
            ОбъектМетаданных: 'Объект метаданных, права на доступ к которому проверяются.',
            СтандартныйРеквизитСтандартнаяТабличнаяЧасть: 'Необязательное имя стандартного реквизита, имя стандартного реквизита стандартной табличной части или имя стандартной табличной части.  Для стандартного реквизита стандартной табличной части, имя табличной части указывается перед точкой до имени реквизита. Например: "ВидыСубконто.ВидСубконто".'
          }
        }
      }
    },
    "Вычислить": {
      name: 'Вычислить',
      name_en: 'Eval',
      description: 'Вычисляет переданное выражение. С помощью метода можно вычислять математические и логические выражения, а также операции конкатенации. Подробнее про выражения см. раздел "Выражения языка".',
      signature: {
        default: {
          СтрокаПараметров: '(Выражение: Строка)',
          Параметры: {
            Выражение: 'Выражение, которое требуется вычислить.'
          }
        }
      }
    },
    "Год": {
      name: 'Год',
      name_en: 'Year',
      description: 'Определяет год в указанной дате.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "ДанныеФормыВЗначение": {
      name: 'ДанныеФормыВЗначение',
      name_en: 'FormDataToValue',
      description: 'Преобразует данные формы в объект прикладного типа.',
      signature: {
        default: {
          СтрокаПараметров: '(Объект: ДанныеФормыСтруктураСКоллекцией, Тип: Тип): Произвольный',
          Параметры: {
            Объект: 'Данные формы.',
            Тип: 'Тип значения, получаемого из данных формы.'
          }
        }
      }
    },
    "Дата": {
      name: 'Дата',
      name_en: 'Date',
      description: 'Преобразует полученный параметр (параметры) в значение типа Дата.',
      signature: {
        ПоСтроке: {
          СтрокаПараметров: '(Значение: Строка): Дата',
          Параметры: {
            Значение: 'Исходное значение даты. Строка должна содержать дату в локальном формате даты или в каноническом виде YYYYMMDDHHMMSS.'
          }
        },
        ПоСоставляющим: {
          СтрокаПараметров: '(Год: Число, Месяц: Число, День: Число, Час?: Число, Минута?: Число, Секунда?: Число): Дата',
          Параметры: {
            Год: 'Год даты.',
            Месяц: 'Месяц даты.',
            День: 'День даты.',
            Час: 'Час даты.',
            Минута: 'Минута даты.',
            Секунда: 'Секунда даты.'
          }
        }
      }
    },
    "День": {
      name: 'День',
      name_en: 'Day',
      description: 'Определяет календарный день в указанной дате.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "ДеньГода": {
      name: 'ДеньГода',
      name_en: 'DayOfYear',
      description: 'Определяет номер дня в году для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "ДеньНедели": {
      name: 'ДеньНедели',
      name_en: 'WeekDay',
      description: 'Определяет номер дня недели для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "ДобавитьМесяц": {
      name: 'ДобавитьМесяц',
      name_en: 'AddMonth',
      description: 'Добавляет (или вычитает) к указанной дате заданное число месяцев.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата, ЧислоМесяцев: Число): Дата',
          Параметры: {
            Дата: 'Исходная дата.',
            ЧислоМесяцев: 'Количество месяцев, которое необходимо добавить к исходной дате. Если принимает отрицательное значение, то число месяцев вычитается.'
          }
        }
      }
    },
    "ЗаблокироватьДанныеДляРедактирования": {
      name: 'ЗаблокироватьДанныеДляРедактирования',
      name_en: 'LockDataForEdit',
      description: 'Заблокировать данные для редактирования в управляемой форме. Вызывает исключение, если объект уже заблокирован, в том числе и методом Заблокировать.',
      signature: {
        default: {
          СтрокаПараметров: '(Ключ: РегистрСведенийКлючЗаписи.<Имя регистра сведений>, ВерсияДанных?: Строка, ИдентификаторФормы?: УникальныйИдентификатор)',
          Параметры: {
            Ключ: 'Ссылка на объект, который должен быть заблокирован, или ключ записи независимого регистра сведений, которая должна быть заблокирована.',
            ВерсияДанных: 'Версия блокируемого объекта в формате Base64. Используется, если параметр <Ключ> имеет тип Любая ссылка на объект информационной базы.  Если указан, то при блокировке объекта проверяется версия объекта базы данных. При несовпадении версии или отсутствии объекта в базе данных генерируется исключение.',
            ИдентификаторФормы: 'Уникальный идентификатор формы. Если параметр указан, то блокировка устанавливается на все время жизни формы и может быть снята:   - методом РазблокироватьДанныеДляРедактирования с тем же идентификатором формы;  - при закрытии формы;  - при завершении сеанса. Если параметр не указан, то блокировка устанавливается на ограниченное время и может быть снята:   - с помощью метода РазблокироватьДанныеДляРедактирования без указания идентификатора формы;  - при окончании транзакции, если блокировка установлена в транзакции;  - при окончании работы встроенного языка (для режимов запуска "Тонкий клиент" и "Веб-клиент"; при возврате управления с сервера);  - при завершении сеанса.'
          }
        }
      }
    },
    "ЗаблокироватьРаботуПользователя": {
      name: 'ЗаблокироватьРаботуПользователя',
      name_en: 'LockApplication',
      description: 'Блокирует работу пользователя, минимизирует окно 1С:Предприятия и выводит диалог авторизации. Продолжение работы возможно только после ввода пароля.'
    },
    "ЗавершитьРаботуСистемы": {
      name: 'ЗавершитьРаботуСистемы',
      name_en: 'Exit',
      description: 'Позволяет принудительно вызвать завершение работы 1С:Предприятия. В зависимости от переданного параметра будут вызываться обработчики закрытия и завершения работы системы или завершает работу безусловно.',
      signature: {
        default: {
          СтрокаПараметров: '(ЗапрашиватьВозможность?: Булево, ПерезапуститьПриЗавершении?: Булево, ДополнительныеПараметрыКоманднойСтроки?: Строка)',
          Параметры: {
            ЗапрашиватьВозможность: 'Если Ложь, то завершение работы программы будет выполнено безусловно (независимо от наличия редактируемых данных). Если значение параметра Истина, то будут вызываться обработчики закрытия для каждой открытой формы и для всего приложения. Для редакторов текстов, табличных документов и HTML-документов будет произведен анализ модифицированности. Если нет факторов, препятствующих закрытию (например, данные модифицированы и не сохранены), то выполняется завершение работы. В противном случае (такие данные есть) будет выдан вопрос о необходимости сохранения документов. Значение по умолчанию: Истина.',
            ПерезапуститьПриЗавершении: 'Указывает необходимость выполнения запуска нового сеанса с текущими установками после завершения работы. Значение по умолчанию: Ложь.',
            ДополнительныеПараметрыКоманднойСтроки: 'Содержит дополнительные параметры, которые будут переданы новому сеансу. Если такие параметры уже есть среди текущих установок, переданные заменят текущие. Параметр указывается, если значение параметра <ПерезапуститьПриЗавершении>=Истина. Если режим приложения (УправляемоеПриложение/ ОбычноеПриложение) не задан явно дополнительным параметром командной строки, при запуске текущего приложения учитывается использование параметров принудительного включения режима управляемого или обычного приложения /RunModeManagedApplication и /RunModeOrdinaryApplication.'
          }
        }
      }
    },
    "ЗагрузитьВнешнююКомпоненту": {
      name: 'ЗагрузитьВнешнююКомпоненту',
      name_en: 'LoadAddIn',
      description: 'Загружает внешний компонент и подключает ее объекты к 1С:Предприятию. Объекты этого компонента должны быть построены по технологии внешних компонентов COM.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайла: Строка)',
          Параметры: {
            ИмяФайла: 'Имя файла внешнего компонента. Файл внешнего компонента не обязательно должен находиться в каталоге исполняемых файлов программы.'
          }
        }
      }
    },
    "ЗакрытьСправку": {
      name: 'ЗакрытьСправку',
      name_en: 'CloseHelp',
      description: 'Закрывает окно со справочной информацией. Когда выбран режим показа справки в нескольких окнах, метод закроет все окна справки.'
    },
    "ЗаписатьJSON": {
      name: 'ЗаписатьJSON',
      name_en: 'WriteJSON',
      description: 'Выполняет сериализацию Значение в формат JSON. Результат помещает в объект ЗаписьJSON. Если методу требуется передать значение недопустимого типа, то можно использовать функцию преобразования значения (параметры ИмяФункцииПреобразования и МодульФункцииПреобразования).',
      signature: {
        default: {
          СтрокаПараметров: '(ЗаписьJSON: ЗаписьJSON, Значение: Произвольный, НастройкиСериализации?: НастройкиСериализацииJSON, ИмяФункцииПреобразования?: Строка, МодульФункцииПреобразования?: УправляемаяФорма, ДополнительныеПараметрыФункцииПреобразования?: Произвольный)',
          Параметры: {
            ЗаписьJSON: 'Объект, через который осуществляется запись JSON. Поток JSON должен быть подготовлен для записи значения.',
            Значение: 'Объект записи JSON. Меняет состояние потока записи.  Представляет собой значение произвольного типа. В формате JSON допускается записывать только значения следующих типов:   - Строка,  - Число,  - Булево,  - Дата (преобразованная в строку),  - Массив,  - ФиксированныйМассив,  - Структура,  - ФиксированнаяСтруктура,  - Соответствие,  - ФиксированноеСоответствие. Ключ соответствия (или фиксированного соответствия) должен иметь тип Строка. В противном случае, будет вызвано исключение. Если будет передано значение, отличное от перечисленных, оно должно быть преобразвоано с помощью функции преобразования. При попытке записать значение недопустимого типа будет вызвано исключение.',
            НастройкиСериализации: 'Настройки сериализации в JSON.',
            ИмяФункцииПреобразования: 'Данная функция вызывается для всех свойств, тип которых не поддерживает преобразование в формат JSON напрямую. Она должна преобразовать Значение в значение допустимого для записи в JSON типа. Функция должна предваряться директивой &НаСервере или &НаКлиенте. Использование функции вне контекста формы или модуля, или команды не допускается. Функция должна быть экспортной и иметь следующие параметры:   - <Свойство> - в параметр передается имя свойства, если выполняется запись структуры или соответствия,  - <Значение> - в параметр передается исходное значение,  - <ДополнительныеПараметры> - дополнительные параметры, которые указаны в вызове метода ЗаписатьJSON,  - <Отказ> - отказ от записи свойства. Если функция возвращает объект, который не поддерживает преобразование в JSON, то будет вызвано исключение. Если данный параметр задан и не задан параметр МодульФункцииПреобразования, и наоборот, будет вызвано исключение. Значение по умолчанию: Неопределено.',
            МодульФункцииПреобразования: 'Указывает контекст, в котором реализована функция преобразования значения в значение формата JSON. Значение по умолчанию: Неопределено.',
            ДополнительныеПараметрыФункцииПреобразования: 'Дополнительные параметры, которые будут переданы в функцию преобразования. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "ЗаписатьXML": {
      name: 'ЗаписатьXML',
      name_en: 'WriteXML',
      description: 'Выполняет сериализацию значения в формат XML.',
      signature: {
        ЗаписатьБезИмени: {
          СтрокаПараметров: '(ЗаписьXML: ЗаписьXML, Значение: Произвольный, НазначениеТипа?: НазначениеТипаXML)',
          Параметры: {
            ЗаписьXML: 'Объект, через который осуществляется запись XML.',
            Значение: 'Записываемое в поток XML значение. Тип параметра определяется совокупностью типов, для которых определена XML-сериализация.',
            НазначениеТипа: 'Определяет необходимость назначения типа элементу XML. Значение по умолчанию: Неявное.'
          }
        },
        ЗаписатьСПолнымИменем: {
          СтрокаПараметров: '(ЗаписьXML: ЗаписьXML, Значение: Произвольный, ПолноеИмя: Строка, НазначениеТипа?: НазначениеТипаXML)',
          Параметры: {
            ЗаписьXML: 'Объект, через который осуществляется запись XML.',
            Значение: 'Записываемое в поток XML значение. Тип параметра определяется совокупностью типов, для которых определена XML-сериализация.',
            ПолноеИмя: 'Полное имя элемента XML, в который будет записано значение.',
            НазначениеТипа: 'Определяет необходимость назначения типа элементу XML. Значение по умолчанию: Неявное.'
          }
        },
        ЗаписатьСЛокальнымИменемИПространствомИмен: {
          СтрокаПараметров: '(ЗаписьXML: ЗаписьXML, Значение: Произвольный, ЛокальноеИмя: Строка, URIПространстваИмен: Строка, НазначениеТипа?: НазначениеТипаXML)',
          Параметры: {
            ЗаписьXML: 'Объект, через который осуществляется запись XML.',
            Значение: 'Записываемое в поток XML значение. Тип параметра определяется совокупностью типов, для которых определена XML-сериализация.',
            ЛокальноеИмя: 'Локальное имя элемента XML, в который будет записано значение.',
            URIПространстваИмен: 'URI пространства имен, к которому принадлежит указанное ЛокальноеИмя.',
            НазначениеТипа: 'Определяет необходимость назначения типа элементу XML. Значение по умолчанию: Неявное.'
          }
        }
      }
    },
    "ЗаписатьДатуJSON": {
      name: 'ЗаписатьДатуJSON',
      name_en: 'WriteJSONDate',
      description: 'Преобразовывает дату в строку для последующей записи в формат JSON. Если запись выполняется в формате ISO и в качестве варианта записи даты используется ЛокальнаяДатаСоСмещением, то в силу особенностей формата будут опущены секунды смещения местного времени относительно UTC. Пример: если смещение местного времени относительно UTC составляет 02:30:17, в результате смещение будет записано в виде: +02:30.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата, Формат: ФорматДатыJSON, ВариантЗаписиДаты?: ВариантЗаписиДатыJSON): Строка',
          Параметры: {
            Дата: 'Дата, которую надо преобразовать в формат JSON.',
            Формат: 'Формат записываемой даты.',
            ВариантЗаписиДаты: 'Указывает используемый вариант записи даты JSON. Значение по умолчанию: ЛокальнаяДата.'
          }
        }
      }
    },
    "ЗаписьЖурналаРегистрации": {
      name: 'ЗаписьЖурналаРегистрации',
      name_en: 'WriteLogEvent',
      description: 'Записывает событие в журнал регистрации. Предназначен для записи дополнительных событий, которые не записываются системой. Средствами встроенного языка не могут записываться системные события, записываемые при записи объектов, удалении и т.д.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяСобытия: Строка, Уровень?: УровеньЖурналаРегистрации, ОбъектМетаданных?: ОбъектМетаданных: Куб, Данные?: Произвольный, Комментарий?: Строка, РежимТранзакции?: РежимТранзакцииЗаписиЖурналаРегистрации)',
          Параметры: {
            ИмяСобытия: 'Событие указывается строкой. Может содержать точки для обозначения иерархии событий.  Запрещена запись событий использующих сочетания символов "_$" и "$_", зарезервированные для системных событий. Например: _$МоеСобытие$_ или _$МояГруппаСобытий$_.МоеСобытие.',
            Уровень: 'Уровень важности события. Значение по умолчанию: Примечание.',
            ОбъектМетаданных: 'Объект метаданных, к которому относится событие.',
            Данные: 'Данные, с которыми связано событие.  Рекомендуется указывать ссылки на объекты данных (элементы справочников, документы, к которым относится событие).',
            Комментарий: 'Произвольная строка комментария к событию. Значение по умолчанию: Пустая строка.',
            РежимТранзакции: 'Указывает отношение записи к текущей транзакции. Значение по умолчанию: Независимая.'
          }
        }
      }
    },
    "ЗаполнитьЗначенияСвойств": {
      name: 'ЗаполнитьЗначенияСвойств',
      name_en: 'FillPropertyValues',
      description: 'Копирует значения свойств Источника в свойства Приемника. Сопоставление производится по именам свойств. Если указаны копируемые свойства, то в заполнении участвуют только они, параметр ИсключаяСвойства игнорируется. В противном случае, если указан параметр ИсключаяСвойства, свойства перечисленные в нем, исключаются из обработки.',
      signature: {
        default: {
          СтрокаПараметров: '(Приемник: Произвольный, Источник: Произвольный, СписокСвойств?: Строка, ИсключаяСвойства?: Строка)',
          Параметры: {
            Приемник: 'Значение, чьи свойства будут заполнены значениями соответствующих свойств <Источника>. Внимание! Значение данного параметра не может быть следующих типов: Неопределено, Null, Число, Строка, Дата, Булево. Дата',
            Источник: 'Значения свойств данного объекта будут установлены в соответствующие свойства <Приемника>. Внимание! Значение данного параметра не может быть следующих типов: Неопределено, Null, Число, Строка, Дата, Булево.',
            СписокСвойств: 'Список имен свойств <Источника> и <Приемника>, разделенный запятыми, которые необходимо заполнить. Если свойства не указаны, то копируются только те, которые представлены и в <Источнике>, и в <Приемнике>. Если свойства указаны, то они обязательно должны присутствовать в обоих объектах. Если в <Источнике> или <Приемнике> заданное свойство отсутствует, то будет вызвано исключение. Параметр игнорируется, если <Источник> задан.',
            ИсключаяСвойства: 'Список имен свойств <Приемника>, разделенный запятыми, которые необходимо исключить из заполнения. Если свойство с именем, указанным в исключающих свойствах есть в <Приемнике>, то значение этого свойства скопировано не будет. А если свойства, указанного в исключающих свойствах не окажется в <Приемнике>, то будет вызвано исключение.'
          }
        }
      }
    },
    "ЗапроситьРазрешениеПользователя": {
      name: 'ЗапроситьРазрешениеПользователя',
      name_en: 'RequestUserPermission',
      description: 'Получает у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.',
      signature: {
        default: {
          СтрокаПараметров: '(Вызовы: Массив): Булево',
          Параметры: {
            Вызовы: 'Содержит массив с описаниями вызовов, для которых получается разрешение. Каждое описание вызова это массив. Первым элементом этого массива является строка с именем метода, для которого получается разрешение, это методы:   - ПоместитьФайлы;  - ПолучитьФайлы;  - ЗапуститьПриложение;  - УдалитьФайлы;  - НайтиФайлы;  - КопироватьФайл;  - ПереместитьФайл. Следующие элементы массива - это параметры вызова в правильном порядке.'
          }
        }
      }
    },
    "ЗапуститьПриложение": {
      name: 'ЗапуститьПриложение',
      name_en: 'RunApp',
      description: 'Выполняет запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.',
      signature: {
        default: {
          СтрокаПараметров: '(СтрокаКоманды: Строка, ТекущийКаталог?: Строка, ДождатьсяЗавершения?: Булево, КодВозврата?: Число)',
          Параметры: {
            СтрокаКоманды: 'Командная строка для запуска приложения либо имя файла, ассоциированного с некоторым приложением.',
            ТекущийКаталог: 'Задает текущий каталог запускаемого приложения. В режиме веб-клиента игнорируется.',
            ДождатьсяЗавершения: 'Истина - дожидаться завершения запущенного приложения перед продолжением работы. Значение по умолчанию: Ложь.',
            КодВозврата: 'Параметр (если он указан) содержит код завершения работы системы - значение, передаваемое приложением операционной системе, если работа была завершена корректно, если такой код был получен. В противном случае возвращает Неопределено. Для получения кода возврата значение параметра <ДождатьсяЗавершения> должно быть установлено в Истина, запускаемое приложение должно существовать и завершить свою работу корректно.'
          }
        }
      }
    },
    "ЗапуститьСистему": {
      name: 'ЗапуститьСистему',
      name_en: 'RunSystem',
      description: 'Запускает новый сеанс 1С:Предприятия. Новый сеанс будет запущен с текущими установками.',
      signature: {
        default: {
          СтрокаПараметров: '(ДополнительныеПараметрыКоманднойСтроки?: Строка, ДождатьсяЗавершения?: Булево, КодВозврата?: Число)',
          Параметры: {
            ДополнительныеПараметрыКоманднойСтроки: 'Содержит дополнительные параметры, которые будут переданы новому сеансу. Если такие параметры уже есть среди текущих установок, переданные заменят текущие. Если режим приложения (УправляемоеПриложение/ ОбычноеПриложение) не задан явно дополнительным параметром командной строки, при запуске текущего приложения учитывается использование параметров принудительного включения режима управляемого или обычного приложения /RunModeManagedApplication и /RunModeOrdinaryApplication.',
            ДождатьсяЗавершения: 'Указывает необходимость дождаться завершения запуска системы для продолжения работы. Значение по умолчанию: Ложь.',
            КодВозврата: 'Параметр (если он указан) содержит код завершения работы сеанса "1С:Предприятия"- значение, передаваемое платформой операционной системе, если работа была завершена корректно, и если такой код был получен. В противном случае возвращает Неопределено. Для получения кода возврата значение параметра <ДождатьсяЗавершения> должно быть установлено в Истина, а сеанс должен быть корректно завершен. Возможны следующие значения:   - 0 - успешное завершение;  - 1 - ошибка;  - 101 - ошибка в данных (такой код может быть возвращен при обновлении конфигурации, при проверке и исправлении конфигурации, а также при создании дистрибутива конфигурации).'
          }
        }
      }
    },
    "ЗафиксироватьТранзакцию": {
      name: 'ЗафиксироватьТранзакцию',
      name_en: 'CommitTransaction',
      description: 'Завершает успешную транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут записаны.'
    },
    "ЗначениеВДанныеФормы": {
      name: 'ЗначениеВДанныеФормы',
      name_en: 'ValueToFormData',
      description: 'Преобразует объект прикладного типа в универсальный объект данных.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный, Объект: ДанныеФормыСтруктураСКоллекцией)',
          Параметры: {
            Значение: 'Значение прикладного типа, для которого определено преобразование в данные формы.',
            Объект: 'Данные формы, имеющие совместимую структуру.'
          }
        }
      }
    },
    "ЗначениеВСтрокуВнутр": {
      name: 'ЗначениеВСтрокуВнутр',
      name_en: 'ValueToStringInternal',
      description: 'Получает системное строковое представление переданного значения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный): Строка',
          Параметры: {
            Значение: 'Преобразуемое значение.'
          }
        }
      }
    },
    "ЗначениеВФайл": {
      name: 'ЗначениеВФайл',
      name_en: 'ValueToFile',
      description: 'Сохраняет любое сериализуемое значение в файл.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайла: Строка, Значение: Произвольный): Булево',
          Параметры: {
            ИмяФайла: 'Имя файла. Не может быть пустым. Если включает путь к существующему каталогу, то значение будет сохранено в файле, созданном или найденном в этом каталоге, в противном случае будет использован каталог исполняемых файлов программы.',
            Значение: 'Сохраняемое значение.'
          }
        }
      }
    },
    "ЗначениеЗаполнено": {
      name: 'ЗначениеЗаполнено',
      name_en: 'ValueIsFilled',
      description: 'Функция проверяет, отличается ли переданное значение от значения по умолчанию того же типа. Не работает с мутабельными значениями. При передаче мутабельного значения функция вызывает исключение.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный): Булево',
          Параметры: {
            Значение: 'Значение для проверки.'
          }
        }
      }
    },
    "ЗначениеИзСтрокиВнутр": {
      name: 'ЗначениеИзСтрокиВнутр',
      name_en: 'ValueFromStringInternal',
      description: 'Преобразует значение из строкового системного представления во внутреннее.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Произвольный',
          Параметры: {
            Строка: 'Системное представление значения в строковом виде.'
          }
        }
      }
    },
    "ЗначениеИзФайла": {
      name: 'ЗначениеИзФайла',
      name_en: 'ValueFromFile',
      description: 'Получает из файла значение, ранее сохраненное в нем при помощи функции ЗначениеВФайл. Тип возвращаемого значения определяется типом значения, сохраненного в файле.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайла: Строка): Произвольный',
          Параметры: {
            ИмяФайла: 'Имя файла. Не может быть пустым. Если включает путь к существующему каталогу, то значение будет извлекаться из файла, найденного в этом каталоге, в противном случае будет использован каталог исполняемых файлов программы.'
          }
        }
      }
    },
    "ИзXMLТипа": {
      name: 'ИзXMLТипа',
      name_en: 'FromXMLType',
      description: 'Получает тип, соответствующий типу данных XML.',
      signature: {
        ПоТипуXml: {
          СтрокаПараметров: '(ТипXML: ТипДанныхXML): Тип',
          Параметры: {
            ТипXML: 'Тип XML, для которого нужно получить соответствующий тип.'
          }
        },
        ПоИмениТипаИUriПространстваИмен: {
          СтрокаПараметров: '(ИмяТипа: Строка, URIПространстваИмен: Строка): Тип',
          Параметры: {
            ИмяТипа: 'Имя типа XML.',
            URIПространстваИмен: 'URI пространства имен типа XML.'
          }
        }
      }
    },
    "ИмпортМоделиXDTO": {
      name: 'ИмпортМоделиXDTO',
      name_en: 'ImportXDTOModel',
      description: 'Осуществляет импорт переданного набора схем XML в модель типов XDTO. Возвращаемое значение – ОбъектXDTO, имеющий тип {http://v8.1c.ru/8.1/xdto}Model. При импорте никакой проверки правильности схемы не производится. При импорте производится преобразование структуры типов схемы в структуру типов модели. Полученная модель может быть не идентична структуре типов схемы.',
      signature: {
        default: {
          СтрокаПараметров: '(НаборСхемXML: НаборСхемXML): ОбъектXDTO',
          Параметры: {
            НаборСхемXML: 'Импортируемый набор схем XML.'
          }
        }
      }
    },
    "ИмяКомпьютера": {
      name: 'ИмяКомпьютера',
      name_en: 'ComputerName',
      description: 'Получает сетевое имя компьютера.'
    },
    "ИмяПользователя": {
      name: 'ИмяПользователя',
      name_en: 'UserName',
      description: 'Получает имя пользователя, указанного при запуске программы.'
    },
    "ИнициализироватьПредопределенныеДанные": {
      name: 'ИнициализироватьПредопределенныеДанные',
      name_en: 'InitializePredefinedData',
      description: 'Инициализирует предопределенные данные в текущей области информационной базы.  Предопределенные элементы создаются у объектов метаданных, при выполнении всех следующих условий:   - В сеансе установлены и используются все разделители, в состав которых включен объект метаданных.  - Автоматическое обновление предопределенных данных для этого объекта метаданных включено.  - Предопределенные данные для этого объекта в этой области данных еще не создавались.'
    },
    "ИнформацияОбОшибке": {
      name: 'ИнформацияОбОшибке',
      name_en: 'ErrorInfo',
      description: 'Получает структурированную информацию об исключении.'
    },
    "КаталогВременныхФайлов": {
      name: 'КаталогВременныхФайлов',
      name_en: 'TempFilesDir',
      description: 'Получает имя каталога, который используется программой для размещения временных файлов.'
    },
    "КаталогДокументов": {
      name: 'КаталогДокументов',
      name_en: 'DocumentsDir',
      description: 'Предоставдяет доступ к стандартному каталогу документов.'
    },
    "КаталогПрограммы": {
      name: 'КаталогПрограммы',
      name_en: 'BinDir',
      description: 'Получает имя каталога, в котором расположены исполняемые файлы программы.'
    },
    "КодироватьСтроку": {
      name: 'КодироватьСтроку',
      name_en: 'EncodeString',
      description: 'Кодирует строку в соответствии с выбранным способом кодирования.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, СпособКодированияСтроки: СпособКодированияСтроки, КодировкаСтроки?: Строка): Строка',
          Параметры: {
            Строка: 'Кодируемая строка.',
            СпособКодированияСтроки: 'Способ кодирования строки.',
            КодировкаСтроки: 'Кодировка, в которую преобразуется строка перед кодированием. Значение по умолчанию: UTF8.'
          }
        }
      }
    },
    "КодЛокализацииИнформационнойБазы": {
      name: 'КодЛокализацииИнформационнойБазы',
      name_en: 'InfoBaseLocaleCode',
      description: 'Получает код локализации (язык, страна), установленный для данной информационной базы.'
    },
    "КодСимвола": {
      name: 'КодСимвола',
      name_en: 'CharCode',
      description: 'Получает код символа, расположенного в переданной строке в позиции с указанным номером.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, НомерСимвола?: Число): Число',
          Параметры: {
            Строка: 'Исходная строка.',
            НомерСимвола: 'Номер символа в строке, код которого необходимо получить. Нумерация символов в строке начинается с 1. Значение по умолчанию: 1.'
          }
        }
      }
    },
    "КомандаСистемы": {
      name: 'КомандаСистемы',
      name_en: 'System',
      description: 'Вызывает на исполнение команду операционной системы, как если бы она была введена в командной строке. Замечание! Если в передаваемой командной строке Windows используются переменные среды (environment variables) и значения этих переменных содержат пробелы, то фрагменты командной строки, в которых используются перменные среды, следует обрамлять удвоенными двойными кавычками. Например: КомандаСистемы("""""%ProgramFiles%\\Internet Explorer\\iexplore.exe"""" 1c.ru");',
      signature: {
        default: {
          СтрокаПараметров: '(СтрокаКоманды: Строка, ТекущийКаталог?: Строка)',
          Параметры: {
            СтрокаКоманды: 'Команда системы. Если в передаваемой командной строке Windows используются переменные среды (environment variables) и значения этих переменных содержат пробелы, то фрагменты командной строки, в которых используются перменные среды, следует обрамлять удвоенными двойными кавычками. Например: КомандаСистемы("""""%ProgramFiles%\\Internet Explorer\\iexplore.exe"""" 1c.ru");',
            ТекущийКаталог: 'Устанавливает текущий каталог на время выполнения команды.'
          }
        }
      }
    },
    "КонецГода": {
      name: 'КонецГода',
      name_en: 'EndOfYear',
      description: 'Определяет дату и время конца года для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонецДня": {
      name: 'КонецДня',
      name_en: 'EndOfDay',
      description: 'Определяет дату и время конца дня для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонецКвартала": {
      name: 'КонецКвартала',
      name_en: 'EndOfQuarter',
      description: 'Определяет дату и время конца квартала для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонецМесяца": {
      name: 'КонецМесяца',
      name_en: 'EndOfMonth',
      description: 'Определяет дату и время конца месяца для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонецМинуты": {
      name: 'КонецМинуты',
      name_en: 'EndOfMinute',
      description: 'Определяет дату и время конца минуты для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонецНедели": {
      name: 'КонецНедели',
      name_en: 'EndOfWeek',
      description: 'Определяет дату и время конца недели для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонецЧаса": {
      name: 'КонецЧаса',
      name_en: 'EndOfHour',
      description: 'Определяет дату и время конца часа для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "КонфигурацияБазыДанныхИзмененаДинамически": {
      name: 'КонфигурацияБазыДанныхИзмененаДинамически',
      name_en: 'DataBaseConfigurationChangedDynamically',
      description: 'Определяет, была ли изменена конфигурация базы данных динамически после старта. Под динамическим изменением понимается такое изменение конфигурации базы данных, при которой не потребовалось проведение реструктуризации, и в момент обновления с информационной базой работали пользователи.'
    },
    "КонфигурацияИзменена": {
      name: 'КонфигурацияИзменена',
      name_en: 'ConfigurationChanged',
      description: 'Определяет факт отличия основной конфигурации от конфигурации базы данных.'
    },
    "КопироватьДанныеФормы": {
      name: 'КопироватьДанныеФормы',
      name_en: 'CopyFormData',
      description: 'Копирует данные формы, обладающие совместимой структурой.',
      signature: {
        default: {
          СтрокаПараметров: '(Источник: ДанныеФормыСтруктураСКоллекцией, Приемник: ДанныеФормыСтруктураСКоллекцией): Булево',
          Параметры: {
            Источник: 'Объект - источник.',
            Приемник: 'Объект приемник.'
          }
        }
      }
    },
    "КопироватьФайл": {
      name: 'КопироватьФайл',
      name_en: 'FileCopy',
      description: 'Копирует файл-источник в файл-приемник. Допускается перезапись файла-приемника.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
          Параметры: {
            ИмяФайлаИсточника: 'Полное имя файла-источника.',
            ИмяФайлаПриемника: 'Полное имя файла-приемника.'
          }
        }
      }
    },
    "КраткоеПредставлениеОшибки": {
      name: 'КраткоеПредставлениеОшибки',
      name_en: 'BriefErrorDescription',
      description: 'Возвращает строку, аналогичную той, что показывается в стандартном сообщении об ошибке платформы 1С:Предприятие.',
      signature: {
        default: {
          СтрокаПараметров: '(ИнформацияОбОшибке: ИнформацияОбОшибке): Строка',
          Параметры: {
            ИнформацияОбОшибке: 'Содержит информацию об ошибке.'
          }
        }
      }
    },
    "Лев": {
      name: 'Лев',
      name_en: 'Left',
      description: 'Выбирает первые слева символы строки.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, ЧислоСимволов: Число): Строка',
          Параметры: {
            Строка: 'Исходная строка.',
            ЧислоСимволов: 'Количество выбираемых символов.'
          }
        }
      }
    },
    "Макс": {
      name: 'Макс',
      name_en: 'Max',
      description: 'Определяет максимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение1: Число): Число',
          Параметры: {
            Значение1: 'Набор параметров, который определяет перечень значений для сравнения.'
          }
        }
      }
    },
    "МестноеВремя": {
      name: 'МестноеВремя',
      name_en: 'ToLocalTime',
      description: 'Преобразует универсальное время в местное время заданного часового пояса.',
      signature: {
        default: {
          СтрокаПараметров: '(УниверсальноеВремя: Дата, ЧасовойПояс?: Строка): Дата',
          Параметры: {
            УниверсальноеВремя: 'Универсальное время.',
            ЧасовойПояс: 'Может быть задан только в коде, исполняемом на сервере, режиме запуска "Толстый клиент" и во внешнем соединении. Идентификатор часового пояса, в который должно быть преобразовано универсальное время. Если Неопределено (не задан), то используется часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "Месяц": {
      name: 'Месяц',
      name_en: 'Month',
      description: 'Определяет месяц в указанной дате.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "Мин": {
      name: 'Мин',
      name_en: 'Min',
      description: 'Определяет минимальное значение из полученных параметров.  Тот или иной семантический вариант функции определяется по типу данных первого параметра. В случае несовпадения типа второго и последующих параметров с требуемым, их значения преобразуются к требуемому типу в соответствии с правилами преобразования типов. Если тип первого параметра не соответствует ни одному из допустимых типов, то в зависимости от ситуации может производиться преобразование типов или возбуждаться состояние ошибки исполнения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение1: Число): Число',
          Параметры: {
            Значение1: 'Набор параметров, который определяет перечень значений для сравнения.'
          }
        }
      }
    },
    "Минута": {
      name: 'Минута',
      name_en: 'Minute',
      description: 'Определяет минуту в часе указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "МонопольныйРежим": {
      name: 'МонопольныйРежим',
      name_en: 'ExclusiveMode',
      description: 'Определяет, используется ли в данный момент монопольный режим работы с информационной базой.'
    },
    "Найти": {
      name: 'Найти',
      name_en: 'Find',
      description: 'Функция является устаревшей! Рекомендуется использовать функцию СтрНайти. Находит первое вхождение искомой строки как подстроки в исходной строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка): Число',
          Параметры: {
            Строка: 'Исходная строка.',
            ПодстрокаПоиска: 'Искомая подстрока.'
          }
        }
      }
    },
    "НайтиНедопустимыеСимволыXML": {
      name: 'НайтиНедопустимыеСимволыXML',
      name_en: 'FindDisallowedXMLCharacters',
      description: 'Проверяет символы указанной строки на соответствие рекомендации XML 1.0 и 1.1. Проверка строки начинается с символа в позиции, указанной в параметре ПозицияНачала.',
      signature: {
        default: {
          СтрокаПараметров: '(СтрокаСимволов: Строка, ПозицияНачала?: Число, Версия?: Строка): Число',
          Параметры: {
            СтрокаСимволов: 'Строка, в которой необходимо проверить символы.',
            ПозицияНачала: 'Позиция символа в строке, начиная с которого будет производиться проверка. Значение по умолчанию: 1.',
            Версия: 'Версия спецификации XML, используемая при проверке допустимости. Возможные значения параметра: "1.0" или "1.1". Значение по умолчанию: 1.0.'
          }
        }
      }
    },
    "НайтиОкноПоНавигационнойСсылке": {
      name: 'НайтиОкноПоНавигационнойСсылке',
      name_en: 'FindWindowByURL',
      description: 'Получает окно клиентского приложения.',
      signature: {
        default: {
          СтрокаПараметров: '(НавигационнаяСcылка: Строка): ОкноКлиентскогоПриложения',
          Параметры: {
            НавигационнаяСcылка: 'Навигационная ссылка.'
          }
        }
      }
    },
    "НайтиПомеченныеНаУдаление": {
      name: 'НайтиПомеченныеНаУдаление',
      name_en: 'FindMarkedForDeletion',
      description: 'Осуществляет поиск всех помеченных на удаление объектов, которые доступны пользователю в рамках текущего сеанса и которые попадают в область поиска, заданную параметрами ОбластьПоиска, ВключитьОбъекты и ИсключитьОбъекты. Если параметр ОбластьПоиска неопределен или используется режим совместимости Версия8_3_4 и ниже, поиск осуществляется среди всех объектов, которые доступны в рамках текущего сеанса с учетом разделения (учитывается и условное разделение). При этом параметры ВключитьОбъекты и ИсключитьОбъекты не учитываются. Поиск выполняется среди доступных пользователю данных: у пользователя должно быть право на чтение объета, данные выбираются только после проверки прав ограничения доступа.',
      signature: {
        default: {
          СтрокаПараметров: '(ОбластьПоиска?: Массив, ВключитьОбъекты?: Массив, ИсключитьОбъекты?: Массив): Массив',
          Параметры: {
            ОбластьПоиска: 'Определяет область поиска объектов, помеченных на удаление. Область устанавливается комбинацией разделителей, в состав которых включены объекты метаданных, среди данных которых следует выполнять поиск. Элемент массива имеет тип Массив. Элемент вложенного массива имеет тип:   - Объект метаданных – Общий реквизит, разделяющий данные.  - Строка – имя общего реквизита, разделяющего данные. По умолчанию имеет значение Неопределено. Допустимые значения:   - Неопределено,  - Массив с комбинациями разделителей, определяющий область поиска,  - Пустой массив - область поиска определяется параметрами метода ВключитьОбъекты и ИсключитьОбъекты. Примечание. Если комбинация разделителей содержит повторы, то вызывается исключение, т.к. в конфигурации не может быть объектов метаданных, дважды включенных в состав одного разделителя. Значение по умолчанию: Неопределено.',
            ВключитьОбъекты: 'Позволяет явно указать объекты метаданных, которые должны присутствовать в области поиска ссылок помеченных на удаление объектов. Элементом массива могут быть:   - Объект метаданных.  - Строка – полное имя объекта метаданных. Допустимые значения:   - Неопределено,  - Пустой массив,  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.',
            ИсключитьОбъекты: 'В качестве элементов массива могут выступать:   - Объект метаданных,  - Строка – полное имя объекта метаданных. Свойство позволяет явно указать объекты метаданных, которые следует исключить из области поиска объектов, помеченных на удаление. Допустимые значения:   - Неопределено  - Пустой массив (нет объектов, которые необходимо дополнительно включить в область поиска).  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "НайтиПоСсылкам": {
      name: 'НайтиПоСсылкам',
      name_en: 'FindByRef',
      description: 'Осуществляет поиск ссылок на объекты, переданные в параметре СписокСсылок. Поиск выполняется только в данных, которые доступны в рамках текущего сеанса с учетом разделения (условное разделение также учитывается). Поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если у пользователя нет доступа к объекту, будет вызвано исключение..',
      signature: {
        default: {
          СтрокаПараметров: '(СписокСсылок: Массив, ОбластьПоиска?: Массив, ВключитьОбъекты?: Массив, ИсключитьОбъекты?: Массив): ТаблицаЗначений',
          Параметры: {
            СписокСсылок: 'Массив со списком ссылок на объекты, ссылки на которые нужно найти.',
            ОбластьПоиска: 'Определяет область поиска объектов. Область устанавливается комбинацией разделителей, в состав которых включены объекты метаданных, среди данных которых следует выполнять поиск. Элемент массива имеет тип Массив. Элемент вложенного массива имеет тип:   - Объект метаданных – Общий реквизит, разделяющий данные.  - Строка – имя общего реквизита, разделяющего данные.  По умолчанию имеет значение Неопределено.  Допустимые значения:   - Неопределено,  - Массив с комбинациями разделителей, определяющий область поиска,  - Пустой массив - область поиска определяется параметрами метода ВключитьОбъекты и ИсключитьОбъекты.  Примечание. Если комбинация разделителей содержит повторы, то вызывается исключение, т.к. в конфигурации не может быть объектов метаданных, дважды включенных в состав одного разделителя. Значение по умолчанию: Неопределено.',
            ВключитьОбъекты: 'Позволяет явно указать объекты метаданных, которые должны присутствовать в области поиска ссылок на объекты. Элементом массива могут быть:   - Объект метаданных.  - Строка – полное имя объекта метаданных. Допустимые значения:   - Неопределено,  - Пустой массив,  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.',
            ИсключитьОбъекты: 'В качестве элементов массива могут выступать:   - Объект метаданных,  - Строка – полное имя объекта метаданных. Свойство позволяет явно указать объекты метаданных, которые следует исключить из области поиска ссылок на объекты. Допустимые значения:   - Неопределено  - Пустой массив (нет объектов, которые необходимо дополнительно включить в область поиска).  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "НайтиФайлы": {
      name: 'НайтиФайлы',
      name_en: 'FindFiles',
      description: 'Осуществляет поиск файлов и каталогов по заданной маске, расположенных в заданном каталоге.',
      signature: {
        default: {
          СтрокаПараметров: '(Путь: Строка, Маска?: Строка, ИскатьВПодкаталогах?: Булево): Массив',
          Параметры: {
            Путь: 'Путь к каталогу, в котором производится поиск. Каталог может быть как на локальной сети, так и на ftp-сервере. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'. Допускается указание полного имени файла (путь + имя).',
            Маска: 'Маска выбора файлов.  Если параметр задан, то первый параметр воспринимается системой как путь к каталогу, в котором требуется найти файлы, удовлетворяющие маске выбора. Для операционной системы MS Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ.  Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.',
            ИскатьВПодкаталогах: 'Истина - будет произведен обход вложенных в параметр <Путь> каталогов и поиск в них.  Параметр игнорируется, если не задан параметр <Маска>, т.к. предполагается, что ищется один файл. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "НачалоГода": {
      name: 'НачалоГода',
      name_en: 'BegOfYear',
      description: 'Определяет дату и время начала года для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачалоДня": {
      name: 'НачалоДня',
      name_en: 'BegOfDay',
      description: 'Определяет дату и время начала дня для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачалоКвартала": {
      name: 'НачалоКвартала',
      name_en: 'BegOfQuarter',
      description: 'Определяет дату и время начала квартала для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачалоМесяца": {
      name: 'НачалоМесяца',
      name_en: 'BegOfMonth',
      description: 'Определяет дату и время начала месяца для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачалоМинуты": {
      name: 'НачалоМинуты',
      name_en: 'BegOfMinute',
      description: 'Определяет дату и время начала минуты для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачалоНедели": {
      name: 'НачалоНедели',
      name_en: 'BegOfWeek',
      description: 'Определяет дату и время начала недели для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачалоЧаса": {
      name: 'НачалоЧаса',
      name_en: 'BegOfHour',
      description: 'Определяет дату и время начала часа для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Дата',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НачатьЗапросРазрешенияПользователя": {
      name: 'НачатьЗапросРазрешенияПользователя',
      name_en: 'BeginRequestingUserPermission',
      description: 'Начинает получение у пользователя разрешение на несколько операций с файлами, которые потом будут выполнены без дополнительных вопросов. Полученное разрешение хранится до выполнения соответствующего вызова, либо до окончания работы текущего вызова встроенного языка.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Вызовы: Массив)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <РазрешенияПолучены> - помещается тип Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Вызовы: 'Содержит массив с описаниями вызовов, для которых получается разрешение. Каждое описание вызова представляет собой массив. Первым элементом этого массива является строка с именем метода, для которого получается разрешение. Используемые методы:    - НачатьПомещениеФайлов;  - НачатьПолучениеФайлов;  - НачатьЗапускПриложения;  - НачатьУдалениеФайлов;  - НачатьПоискФайлов;  - НачатьКопированиеФайла;  - НачатьПеремещениеФайла. Следующие элементы массива - это параметры вызова в правильном порядке.'
          }
        }
      }
    },
    "НачатьЗапускПриложения": {
      name: 'НачатьЗапускПриложения',
      name_en: 'BeginRunningApplication',
      description: 'Начинает запуск внешнего приложения либо открытие файла с использованием ассоциированного с ним приложения.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, СтрокаКоманды: Строка, ТекущийКаталог?: Строка, ДождатьсяЗавершения?: Булево)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <КодВозврата> - код возврата, тип Число или Неопределено, если соответствующий входной параметр <ДождатьсяЗавершения> не указан;  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            СтрокаКоманды: 'Командная строка для запуска приложения либо имя файла, ассоциированного с некоторым приложением.',
            ТекущийКаталог: 'Задает текущий каталог запускаемого приложения. В режиме веб-клиента игнорируется.',
            ДождатьсяЗавершения: 'Истина - дожидаться завершения запущенного приложения перед продолжением работы. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "НачатьКопированиеФайла": {
      name: 'НачатьКопированиеФайла',
      name_en: 'BeginCopyingFile',
      description: 'Начинает копирование файла-источника в файл-приемник. Допускается перезапись файла-приемника.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <СкопированныйФайл> – строка, содержащая путь к скопированному файлу,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ИмяФайлаИсточника: 'Полное имя файла-источника.',
            ИмяФайлаПриемника: 'Полное имя файла-приемника.'
          }
        }
      }
    },
    "НачатьПеремещениеФайла": {
      name: 'НачатьПеремещениеФайла',
      name_en: 'BeginMovingFile',
      description: 'Начинает перемещение (переименование) указанного файла.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ПеремещаемыйФайл> – строка, содержащая путь к файлу,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ИмяФайлаИсточника: 'Полное имя файла-источника (полное исходное имя файла).',
            ИмяФайлаПриемника: 'Полное имя файла-приемника (полное новое имя файла).'
          }
        }
      }
    },
    "НачатьПодключениеВнешнейКомпоненты": {
      name: 'НачатьПодключениеВнешнейКомпоненты',
      name_en: 'BeginAttachingAddIn',
      description: 'Начинает подключение к "1С:Предприятию" объекта внешнего компонента.  Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.',
      signature: {
        ПоИдентификатору: {
          СтрокаПараметров: '(ОписаниеОповещения?: ОписаниеОповещения, ИдентификаторОбъекта?: Строка)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, тип Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ИдентификаторОбъекта: 'Идентификатор объекта в виде подключа программного идентификатора ProgID реестра Windows. Например: "AddIn.Scanner".'
          }
        },
        ПоМестоположению: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Местоположение: Строка, Имя: Строка, Тип?: ТипВнешнейКомпоненты)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, Тип: Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Местоположение: 'Местоположение внешнего компонента. В качестве местоположения может использоваться:   - путь к файлу внешнего компонента в файловой системе (недоступно на веб-клиенте), не ZIP-архив;  - полное имя макета, хранящего двоичные данные или ZIP-архив;  - URL к внешнему компоненту, в виде двоичных данных или ZIP-архива, в формате, аналогичном ПолучитьНавигационнуюСсылку.',
            Имя: 'Символическое имя подключаемой внешнего компонента. Имя должно удовлетворять правилам именования встроенного языка.',
            Тип: 'Тип подключаемого внешнего компонента. Не используется, если компонент упакован в ZIP-архив.'
          }
        }
      }
    },
    "НачатьПодключениеРасширенияРаботыСКриптографией": {
      name: 'НачатьПодключениеРасширенияРаботыСКриптографией',
      name_en: 'BeginAttachingCryptoExtension',
      description: 'При первом обращении начинает подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, Булево.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
          }
        }
      }
    },
    "НачатьПодключениеРасширенияРаботыСФайлами": {
      name: 'НачатьПодключениеРасширенияРаботыСФайлами',
      name_en: 'BeginAttachingFileSystemExtension',
      description: 'Начинает подключение расширения для работы с файлами.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Подключено> – результат подключения, Тип: Булево. Истина - расширение успешно подключено  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
          }
        }
      }
    },
    "НачатьПоискФайлов": {
      name: 'НачатьПоискФайлов',
      name_en: 'BeginFindingFiles',
      description: 'Начинает поиск по заданной маске файлов и каталогов, расположенных в заданном каталоге.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Путь: Строка, Маска?: Строка, ИскатьВПодкаталогах?: Булево)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <НайденныеФайлы> - помещается массив значений типа Файл.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Путь: 'Путь к каталогу, в котором производится поиск. Каталог может быть как на локальной сети, так и на ftp-сервере. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'. Допускается указание полного имени файла (путь + имя).',
            Маска: 'Маска выбора файлов.  Если параметр задан, то первый параметр воспринимается системой как путь к каталогу, в котором требуется найти файлы, удовлетворяющие маске выбора. Для операционной системы Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ.  Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.',
            ИскатьВПодкаталогах: 'Истина - будет произведен обход вложенных в параметр <Путь> каталогов и поиск в них.  Параметр игнорируется, если не задан параметр <Маска>, т.к. предполагается, что ищется один файл. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "НачатьПолучениеКаталогаВременныхФайлов": {
      name: 'НачатьПолучениеКаталогаВременныхФайлов',
      name_en: 'BeginGettingTempFilesDir',
      description: 'Начинает получение имени каталога, который используется программой для размещения временных файлов.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ИмяКаталогаВременныхФайлов> – имя временного файла, тип Строка.  - <ДополнительныеПараметры> – значение, которое было указано при создании объекта ОписаниеОповещения.'
          }
        }
      }
    },
    "НачатьПолучениеКаталогаДокументов": {
      name: 'НачатьПолучениеКаталогаДокументов',
      name_en: 'BeginGettingDocumentsDir',
      description: 'Начинает получение стандартного каталога документов.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ИмяКаталогаДокументов> – имя временного файла, тип Строка.  - <ДополнительныеПараметры> – значение, которое было указано при создании объекта ОписаниеОповещения.'
          }
        }
      }
    },
    "НачатьПолучениеРабочегоКаталогаДанныхПользователя": {
      name: 'НачатьПолучениеРабочегоКаталогаДанныхПользователя',
      name_en: 'BeginGettingUserDataWorkDir',
      description: 'Начинает получение имени каталога текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <КаталогДанныхПользователя> – имя временного файла, тип Строка.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.'
          }
        }
      }
    },
    "НачатьПолучениеФайлов": {
      name: 'НачатьПолучениеФайлов',
      name_en: 'BeginGettingFiles',
      description: 'Начинает получение набора файлов и сохраняет их в локальную файловую систему пользователя.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ПолучаемыеФайлы: Массив, РасположениеФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <ПолученныеФайлы> – массив объектов типа ОписаниеПереданногоФайла или Неопределено, если файлы не получены.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ПолучаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище или в информационной базе;  - Имя - это локальный путь, по которому должен быть расположен получаемый файл. Это может быть либо полный путь, либо часть пути, которая будет объединена со значением параметра <РасположениеФайлов>. Это также может быть имя файла или имя каталога (каталогов) + имя файла.',
            РасположениеФайлов: 'Определяет общее расположение помещаемых файлов в локальной файловой системе. Может быть задан строкой либо заранее подготовленным диалогом выбора файлов в режиме выбора каталога или сохранения файлов.',
            Интерактивно: 'Истина - задан интерактивный режим, в котором пользователю показывается диалог, в котором он может выбрать локальное расположение файлов. Ложь - на сервер передается список файлов, описанный в параметре <Файлы>. В интерактивном режиме строка, переданная в параметре <Диалог/Путь> рассматривается как начальное значения для выбора пути. Значение по умолчанию: Истина.'
          }
        }
      }
    },
    "НачатьПомещениеФайла": {
      name: 'НачатьПомещениеФайла',
      name_en: 'BeginPutFile',
      description: 'Помещает файл из локальной файловой системы во временное хранилище.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, Адрес?: Строка, НачальноеИмяФайла?: Строка, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор): Булево',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения помещения файла со следующими параметрами:   - <Результат> - Ложь - в параметре <Интерактивно> установлен интерактивный режим (Истина) и пользователь отказался от выполнения операции в диалоге выбора файла,  - <Адрес> - расположение нового файла,  - <ВыбранноеИмяФайла> - Через этот параметр возвращается путь к файлу, указанный в диалоге выбора файла. Для неинтерактивного режима выбранное имя файла соответствует начальному имени файла. В режиме запуска "Веб-клиент" значение параметра зависит от типа браузера. Для Mozilla Firefox 3 в параметре возвращается только имя файла без пути. Для Microsoft Internet Explorer возвращаемое значение зависит от настройки текущей зоны. Подробности: http://msdn.microsoft.com/en-us/library/ms535128(VS.85).aspx,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.',
            Адрес: 'Содержит адрес файла во временном хранилище, по которому должны быть помещены данные. Если не задан или является пустой строкой, то будет создан новый файл.',
            НачальноеИмяФайла: 'Путь файла на диске, данные из которого будут помещены во временное хранилище. Может быть не указан, если параметр <Интерактивно> = Истина. В этом случае отображается диалог выбора файла.',
            Интерактивно: 'Указывает, используется ли интерактивный режим, в котором отображается диалог выбора файла. Этот файл будет помещен по указанному в параметре <Адрес> расположению во временном хранилище или по новому адресу, если параметр <Адрес> опущен.  Истина - интерактивный режим используется. Значение по умолчанию: Истина.',
            УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы. Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, то помещенное значение будет удалено после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
          }
        }
      }
    },
    "НачатьПомещениеФайлов": {
      name: 'НачатьПомещениеФайлов',
      name_en: 'BeginPuttingFiles',
      description: 'Начинает помещение набора файлов из локальной файловой системы во временное хранилище.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ПомещаемыеФайлы?: Произвольный, НаборПомещаемыхФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:   - <ПомещенныеФайлы> – массив объектов типа ОписаниеПереданногоФайла или Неопределено, если файлы не получены.  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ПомещаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище;  - Имя - это локальный путь, по которому должен быть получен файл. Массив может быть заполнен полностью, в этом случае известен набор помещаемых файлов и адреса, по которым они должны быть сохранены. Массив может быть заполнен частично, у элементов массива заполнены только имена. В этом случае, набор помещаемых файлов определен, а места хранения неизвестны. Файлы будут размещены в новых временных хранилищах. Массив может быть не заполнен. В этом случае набор помещаемых файлов определяется по значениям остальных параметров метода (поиском по маске либо интерактивным выбором).',
            НаборПомещаемыхФайлов: 'Определяет набор помещаемых файлов. Может быть задан строкой поиска для метода НайтиФайлы либо заранее подготовленным диалогом выбора файлов в режиме открытия файлов. Если параметр определен, то параметр <ПомещаемыеФайлы> должен быть не определен либо быть пустым массивом.',
            Интерактивно: 'Указывает использование интерактивного режима, при котором пользователю показывается диалог, в котором он может выбрать набор помещаемых файлов.',
            УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы.  Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, помещенное значение будет удалено, после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
          }
        }
      }
    },
    "НачатьСозданиеКаталога": {
      name: 'НачатьСозданиеКаталога',
      name_en: 'BeginCreatingDirectory',
      description: 'Начинает создание нового каталога файлов.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, ИмяКаталога: Строка)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <Каталог> – строка, содержащая путь к созданному каталогу,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ИмяКаталога: 'Полное имя создаваемого каталога. Допускается использование схемы ftp для адресации файлов. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'.'
          }
        }
      }
    },
    "НачатьТранзакцию": {
      name: 'НачатьТранзакцию',
      name_en: 'BeginTransaction',
      description: 'Открывает транзакцию. Транзакция предназначена для записи в информационную базу согласованных изменений. Все изменения, внесенные в информационную базу после начала транзакции, будут затем либо целиком записаны, либо целиком отменены.',
      signature: {
        default: {
          СтрокаПараметров: '(РежимБлокировок?: РежимУправленияБлокировкойДанных)',
          Параметры: {
            РежимБлокировок: 'Установка параметра имеет смысл, если для свойства конфигурации "Режим управления блокировкой данных" выбрано значение "Автоматический и Управляемый". Если значение параметра Автоматический, то данная транзакция будет выполняться в режиме автоматических блокировок. Если значение параметра Управляемый, то в данной транзакции будут выполняться управляемые блокировки. Если к моменту вызова данного метода была начата транзакция, выполняющаяся в автоматическом режиме управления блокировками, то установка значения параметра Управляемый не приведет к изменению режима управления блокировками. Если к моменту вызова данного метода была начата транзакция, выполняющаяся в управляемом режиме блокировок, то установка значения параметра Автоматический приведет к возникновению исключительной ситуации, которая может быть обработана конструкцией Попытка... Исключение... КонецПопытки. Если для свойства конфигурации "Режим управления блокировкой данных" выбрано значение "Управляемый", то значение параметра по умолчанию Управляемый. Значение по умолчанию: Автоматический.'
          }
        }
      }
    },
    "НачатьУдалениеФайлов": {
      name: 'НачатьУдалениеФайлов',
      name_en: 'BeginDeletingFiles',
      description: 'Начинает удаление указанных файлов.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещения: ОписаниеОповещения, Путь: Строка, Маска?: Произвольный)',
          Параметры: {
            ОписаниеОповещения: 'Содержит описание процедуры, которая будет вызвана после завершения со следующими параметрами:    - <РезультатВызова> - массив имен удаляемых файлов,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения .',
            Путь: 'Путь к удаляемым файлам.',
            Маска: 'Маска для выбора удаляемых файлов.  Если <Маска> не указана, то удаляются все файлы и каталог <Путь>. Для операционной системы Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ. Можно последовательно перечислить несколько фильтров, разделенных символом "|" (вертикальная черта). Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.'
          }
        }
      }
    },
    "НачатьУстановкуВнешнейКомпоненты": {
      name: 'НачатьУстановкуВнешнейКомпоненты',
      name_en: 'BeginInstallAddIn',
      description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, Местоположение: Строка)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения установки внешнего компонента со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр пропущен, то по завершении никакая процедура вызвана не будет.',
            Местоположение: 'Строка, определяющая местоположение внешнего компонента. В качестве строки может использоваться:   - полное имя макета, в котором хранится внешний компонент в архиве;  - URL к внешнему компоненту, упакованной в ZIP-архив, в формате, аналогичном ПолучитьНавигационнуюСсылку().'
          }
        }
      }
    },
    "НачатьУстановкуРасширенияРаботыСКриптографией": {
      name: 'НачатьУстановкуРасширенияРаботыСКриптографией',
      name_en: 'BeginInstallCryptoExtension',
      description: 'Устанавливает расширение для работы с криптографией в браузер.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения установки расширения работы с криптографией со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.'
          }
        }
      }
    },
    "НачатьУстановкуРасширенияРаботыСФайлами": {
      name: 'НачатьУстановкуРасширенияРаботыСФайлами',
      name_en: 'BeginInstallFileSystemExtension',
      description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения информирует о том, что расширение установлено.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после завершения установки расширения работы с файлами со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан или имеет тип Неопределено, то по завершении никакая процедура вызвана не будет.'
          }
        }
      }
    },
    "НеделяГода": {
      name: 'НеделяГода',
      name_en: 'WeekOfYear',
      description: 'Определяет номер недели в году для указанной даты.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "НеобходимостьЗавершенияСоединения": {
      name: 'НеобходимостьЗавершенияСоединения',
      name_en: 'ConnectionStopRequest',
      description: 'Позволяет определить, что клиент подсоединен к выключенному рабочему процессу. В этом случае клиентское приложение нужно перезапустить, чтобы оно подсоединилось к включенному рабочему процессу.  Выключенный рабочий процесс через некоторое время может быть завершен принудительно, и все, кто к нему подсоединен, завершатся аварийно.'
    },
    "НомерСеансаИнформационнойБазы": {
      name: 'НомерСеансаИнформационнойБазы',
      name_en: 'InfoBaseSessionNumber',
      description: 'Получает номер текущего сеанса информационной базы.'
    },
    "НомерСоединенияИнформационнойБазы": {
      name: 'НомерСоединенияИнформационнойБазы',
      name_en: 'InfoBaseConnectionNumber',
      description: 'Получает номер текущего соединения с информационной базой.'
    },
    "НРег": {
      name: 'НРег',
      name_en: 'Lower',
      description: 'Преобразует все символы строки в нижний регистр.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Строка',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "НСтр": {
      name: 'НСтр',
      name_en: 'NStr',
      description: 'Получает строку на языке текущего пользователя или указанном языке из набора строк на разных языках конфигурации.',
      signature: {
        default: {
          СтрокаПараметров: '(ИсходнаяСтрока: Строка, КодЯзыка?: Строка): Строка',
          Параметры: {
            ИсходнаяСтрока: 'Строки на разных языках, разделенные символом ";" (точка с запятой). Строка на одном языке состоит из кода языка, указанного в метаданных, символа "=" (равно) и собственно строки текста на данном языке в одинарных кавычках, двойных кавычках или без кавычек (когда указывается только один язык).',
            КодЯзыка: 'Указывается код языка, на котором нужно получить строку. Если значение не указано, то строка будет выдаваться на языке, определенного для текущего пользователя. Значение по умолчанию: Пустая строка.'
          }
        }
      }
    },
    "ОбновитьИнтерфейс": {
      name: 'ОбновитьИнтерфейс',
      name_en: 'RefreshInterface',
      description: 'Обновляет командный интерфейс, рабочий стол и открытые формы с учетом текущих значений функциональных опций и их параметров. Вызов метода необходим, чтобы измененные параметры функциональных опций вступили в действие. Внимание! Не рекомендуется вызывать метод ОбновитьИнтерфейс() после каждого изменения значения функциональных опций или их параметров. Рекомендуется вначале выполнить изменения всех функциональных опций или их параметров, а затем однократно обновить интерфейс. Это связано c тем, что вызов метода ОбновитьИнтерфейс() приводит к очистке всех кешей клиентского приложения, а также приводит к многочисленным вызовам сервера для обновления командного интерфейса, состава форм рабочего стола, открытых форм и т.д. Эти вызовы требуют большое количество ресурсов системы для обеспечения их выполнения.'
    },
    "ОбновитьНумерациюОбъектов": {
      name: 'ОбновитьНумерациюОбъектов',
      name_en: 'RefreshObjectsNumbering',
      description: 'Выполняет обновление номеров в соответствии с номерами, записанными в базе данных. После вызова данного метода все выданные, но незаписанные номера, становятся невалидными т.к. не гарантируется их уникальность. Данный метод разрешено вызывать только администратору системы.',
      signature: {
        default: {
          СтрокаПараметров: '(Метаданные?: Массив)',
          Параметры: {
            Метаданные: 'Объект метаданного или массив объектов метаданных, для объектов которого будет выполнено обновление. Если значение параметра не указано, то обновление будет выполнено для всех типов объектов.'
          }
        }
      }
    },
    "ОбновитьПовторноИспользуемыеЗначения": {
      name: 'ОбновитьПовторноИспользуемыеЗначения',
      name_en: 'RefreshReusableValues',
      description: 'Очищает все сохраненные значения функций с повторным использованием возвращаемых значений. После выполнения метода функции с повторным использованием возвращаемых значений выполняется так же, как при первом вызове.'
    },
    "ОбработкаПрерыванияПользователя": {
      name: 'ОбработкаПрерыванияПользователя',
      name_en: 'UserInterruptProcessing',
      description: 'Предназначен для прерывания работы встроенного языка при нажатии пользователем клавиши Ctrl+Break. Метод проверяет, была ли нажата пользователем клавиша Ctrl + Break. Если клавиша была нажата, то выполнение встроенного языка прекращается и выдается соответствующее сообщение. Данный метод рекомендуется использовать в длительных циклических операциях. Метод будет иметь действия только в тех случаях, когда допускается прерывание выполнения модулей.  Прерывания выполнения допускается если оно инициировано определенным интерактивным действием пользователя. К таким действиям относятся:   - нажатие кнопки в форме;  - выбор пункта меню или кнопки командной панели в форме;  - выбор пункта меню или кнопки панели инструментов интерфейса;  - действия инициируемые обработчиками событий "Выбор" элементов управления.'
    },
    "ОбъединитьФайлы": {
      name: 'ОбъединитьФайлы',
      name_en: 'MergeFiles',
      description: 'Объединяет несколько файлов в один.',
      signature: {
        ПоМассивуИменЧастейФайла: {
          СтрокаПараметров: '(ИменаЧастей: Массив, ИмяРезультирующегоФайла: Строка)',
          Параметры: {
            ИменаЧастей: 'Массив имен частей файла, которые требуется объединить. Объединение будет происходить в порядке, в котором заданы имена файлов в массиве.',
            ИмяРезультирующегоФайла: 'Имя файла, который требуется создать при объединении частей.'
          }
        },
        ПоМаске: {
          СтрокаПараметров: '(ШаблонПоиска: Строка, ИмяРезультирующегоФайла: Строка)',
          Параметры: {
            ШаблонПоиска: 'Шаблон поиска частей.',
            ИмяРезультирующегоФайла: 'Имя файла, который требуется создать путем объединения найденных частей.'
          }
        }
      }
    },
    "Окр": {
      name: 'Окр',
      name_en: 'Round',
      description: 'Округляет исходное число до нужной разрядности в соответствии с заданным режимом округления.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число, Разрядность?: Число, РежимОкругления?: РежимОкругления): Число',
          Параметры: {
            Число: 'Исходное число.',
            Разрядность: 'Определяет число знаков дробной части, до которых производится округление. Если параметр отрицательный, то число округляется до соответствующего разряда в целой части, начиная с младших разрядов. Параметр обязательный, если указан параметр <РежимОкругления>. Значение по умолчанию: 0.',
            РежимОкругления: 'Определяет режим округления. Помимо системного перечисления допускается использование числового параметра: 0 - если при округлении 1.5 = 1; 1 - если при округлении 1.5 = 2. Значение по умолчанию: Окр15как20.'
          }
        }
      }
    },
    "ОписаниеОшибки": {
      name: 'ОписаниеОшибки',
      name_en: 'ErrorDescription',
      description: 'Получает описание ошибки (исключительной ситуации), включая информацию о строке модуля и вложенных исключениях.'
    },
    "Оповестить": {
      name: 'Оповестить',
      name_en: 'Notify',
      description: 'Посылает оповещение всем созданным формам и всем подключенным через метод ПодключитьОбработчикОповещения процедурам модуля управляемого приложения (модуля обычного приложения) или общего модуля. Если для формы задана процедура-обработчик события ОбработкаОповещения, то она будет запущена, в процедуру будут переданы указанные параметры. Данный механизм может, например, применяться для организации обмена сообщениями между открытыми формами.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяСобытия?: Строка, Параметр?: Произвольный, Источник?: Произвольный)',
          Параметры: {
            ИмяСобытия: 'Имя события. Может быть использовано для идентификации сообщений принимающими их формами.',
            Параметр: 'Параметр сообщения. Могут быть переданы любые необходимые данные.',
            Источник: 'Источник события. Например, в качестве источника может быть указана другая форма.'
          }
        }
      }
    },
    "ОповеститьОбИзменении": {
      name: 'ОповеститьОбИзменении',
      name_en: 'NotifyChanged',
      signature: {
        ИзмененОдинОбъект: {
          СтрокаПараметров: '(Ссылка: СправочникСсылка.<Имя справочника>)',
          Параметры: {
            Ссылка: 'Ссылка измененного объекта или ключ измененной записи регистра, об изменении которой(го) необходимо уведомить динамические списки, чтобы они обновились. Поведение при очистке кэша (такое же, как при интерактивном изменении):    - кэш представлений ссылок - очищаются записи, соответствующие измененной ссылке;  - кэш данных через точку - удаляются те записи, которые имеют в пути ссылки того же типа, что и измененная;  - кэш данных быстрого выбора - данные хранятся по типам, очищаются данные, которые относятся к типу измененной ссылки;  - кэш ограничений по типу - данные хранятся по типам, очищаются данные, которые относятся к типу измененной ссылки.'
          }
        },
        ИзмененоМногоОбъектов: {
          СтрокаПараметров: '(ИзмененныйТип: Тип)',
          Параметры: {
            ИзмененныйТип: 'Тип изменившихся объектов, например "ДокументСсылка.РасходнаяНакладная". Поведение при очистке кэша - очищается вся информация, которая связана с измененным типом.'
          }
        }
      }
    },
    "ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования": {
      name: 'ОтключитьОбработчикЗапросаНастроекКлиентаЛицензирования',
      name_en: 'DetachLicensingClientParametersRequestHandler',
      description: 'Отключает обработчик запроса настройки клиента лицензирования, подключенный ранее при помощи ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования .'
    },
    "ОтключитьОбработчикОжидания": {
      name: 'ОтключитьОбработчикОжидания',
      name_en: 'DetachIdleHandler',
      description: 'Отключает подключенный ранее при помощи процедуры ПодключитьОбработчикОжидания вызов процедуры через определенный интервал времени.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПроцедуры: Строка)',
          Параметры: {
            ИмяПроцедуры: 'Имя процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля, используемой в качестве обработчика ожидания.'
          }
        }
      }
    },
    "ОтключитьОбработчикОповещения": {
      name: 'ОтключитьОбработчикОповещения',
      name_en: 'DetachNotificationHandler',
      description: 'Отключает подключенный ранее при помощи метода ПодключитьОбработчикОповещения вызов процедуры при вызове метода Оповестить.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПроцедуры: Строка)',
          Параметры: {
            ИмяПроцедуры: 'Имя процедуры модуля управляемого приложения (модуля обычного приложения) или общего модуля, используемой в качестве обработчика.'
          }
        }
      }
    },
    "ОткрытьЗначение": {
      name: 'ОткрытьЗначение',
      name_en: 'OpenValue',
      description: 'Показывает в диалоге переданное значение. Вид диалога зависит от типа переданного значения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный)',
          Параметры: {
            Значение: 'Значение любого типа, который может быть показан системой в диалоге.'
          }
        }
      }
    },
    "ОткрытьИндексСправки": {
      name: 'ОткрытьИндексСправки',
      name_en: 'OpenHelpIndex',
      description: 'Открывает окно со списком ключевых слов и выражений (индексом) справки по приложению.',
      signature: {
        default: {
          СтрокаПараметров: '(ТекстДляПоиска?: Строка): Булево',
          Параметры: {
            ТекстДляПоиска: 'Начальный текст для позиционирования в списке ключевых слов и выражений справки по приложению.'
          }
        }
      }
    },
    "ОткрытьСодержаниеСправки": {
      name: 'ОткрытьСодержаниеСправки',
      name_en: 'OpenHelpContent',
      description: 'Открывает окно с содержанием справки по приложению.'
    },
    "ОткрытьСправку": {
      name: 'ОткрытьСправку',
      name_en: 'OpenHelp',
      description: 'Открывает окно со справочной информацией по объекту метаданных.',
      signature: {
        default: {
          СтрокаПараметров: '(Раздел?: ОбъектМетаданных: Куб): Булево',
          Параметры: {
            Раздел: 'Объект метаданных, по которому требуется вывести справочную информацию. Значение параметра может быть задано как объектом метаданных, по которому требуется вывести справочную информацию, так и строкой.  Строка представляет полное имя объекта в дереве конфигурации, для которого требуется вывести справочную информацию. Для конфигурации достаточно указать "Конфигурация". В параметре, кроме имени объекта метаданных, можно указывать ссылку (URL) на главу справки.  Для получения URL главы справки нужно:   - перейти на форму редактирования справки;  - открыть диалог добавления ссылки ("Элементы – Ссылка");  - нажать кнопку выбора (F4);  - в диалоге ”Выбор ссылки” перейти на закладку ”1С:Предприятие”;  - выбрать нужную главу. В свойствах ссылки будет искомый URL. Параметр в виде объекта метаданных доступен только в режиме запуска "Толстый клиент". Подробнее см. НайтиПоПолномуИмени.'
          }
        }
      }
    },
    "ОткрытьФорму": {
      name: 'ОткрытьФорму',
      name_en: 'OpenForm',
      description: 'Открывает и возвращает форму или управляемую форму. В тонком и веб-клиенте только управляемую форму. Перед открытием осуществляется поиск уже открытой такой же формы. Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Можно открывать уже полученную форму. В этом случае в параметрах передается уже полученная форма и окно, в котором открыть форму. Можно открыть по имени формы. В этом случае в параметры передаются имя формы, параметры формы, владелец, ключ уникальности и окно, в котором должна быть открыта форма.',
      signature: {
        ПоНазванию: {
          СтрокаПараметров: '(ИмяФормы: Строка, Параметры?: Структура, Владелец?: Произвольный, Уникальность?: Произвольный, Окно?: ОкноКлиентскогоПриложения, НавигационнаяСсылка?: Строка, ОписаниеОповещенияОЗакрытии?: ОписаниеОповещения, РежимОткрытияОкна?: РежимОткрытияОкнаФормы): Форма',
          Параметры: {
            ИмяФормы: 'Имя формы. Образуется как полный путь к объекту метаданных Форма (например, "Справочник.Контрагенты.Форма.ФормаОбъекта", "ОбщаяФорма.ФормаСохраненияФайла") или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, "Справочник.Товары.ФормаВыбора"). Имена форм по умолчанию:   - ФормаОбъекта (ObjectForm) - форма объекта по умолчанию;  - ФормаГруппы (FolderForm) - форма группы по умолчанию;  - ФормаЗаписи (RecordForm) - форма записи регистра по умолчанию;  - ФормаСписка (ListForm) - форма списка по умолчанию;  - ФормаВыбора (ChoiceForm) - форма выбора по умолчанию;  - ФормаВыбораГруппы (FolderChoiceForm) - форма выбора группы по умолчанию;  - ФормаКонстант (ConstantsForm) - форма констант по умолчанию;  - Форма (Form) - форма отчета и обработки по умолчанию;  - ФормаНастроек (SettingsForm) - форма настроек отчета по умолчанию;  - ФормаЗагрузки (LoadForm) - форма загрузки настроек;  - ФормаСохранения (SaveForm) - форма сохранения настроек;  - ФормаВарианта (VariantForm) - форма редактирования варианта отчета;  - ФормаПоиска (SearchForm) - форма полнотекстового поиска в данных. Для внешних отчетов и обработок имя формы задается следующим образом:   - ВнешнийОтчет.<имя отчета>.Форма.<имя формы>;  - ВнешнийОтчет.<имя отчета>.<имя стандартной формы>;  - ВнешняяОбработка.<имя обработки>.Форма.<имя формы>;  - ВнешняяОбработка.<имя обработки>.<имя стандартной формы>. При этом внешний отчет или обработка должны быть предварительно зарегистрированы в системе с помощью метода Подключить или Подключить соответственно. <Имя отчета> и <имя обработки> - это имена, под которыми зарегистрированы внешний отчет или обработка.',
            Параметры: 'Параметры формы. Ключ структуры - имя параметра, а значение - значение параметра формы. Имя элемента должно совпадать с именем параметра структуры. П =НовыйСтруктура("Ключ", Поставщик); Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", П); Форма.Открыть();',
            Владелец: 'Владелец формы - форма или элемент управления другой формы.',
            Уникальность: 'В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм. Если будет найдена форма с таким же ключом уникальности, вместо открытия новой формы будет активизирована найденная форма. Ложь - искать форму с ключом уникальности по умолчанию, Истина - не искать форму вообще, любое другое значение устанавливает ключ уникальности, по которому будет произведен поиск. Значение по умолчанию: Ложь.',
            Окно: 'Окно приложения, в котором будет открыта форма.  Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. Если указан тип ВариантОткрытияОкна, окно формы будет создано согласно выбранному варианту.',
            НавигационнаяСсылка: 'Если содержит значение, отличное от Неопределено, то это значение присваивается свойству НавигационнаяСсылка формы, полученной в результате вызова данного метода, и свойство АвтоНавигационнаяСсылка этой формы устанавливается в Ложь. Значение по умолчанию: Неопределено.',
            ОписаниеОповещенияОЗакрытии: 'Содержит описание процедуры, которая будет вызвана после закрытия формы со следующими параметрами: <РезультатЗакрытия> - значение, переданное при вызове метода Закрыть открываемой формы, <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.  Если параметр не указан, то по завершению никакая процедура вызвана не будет.',
            РежимОткрытияОкна: 'Указывает режим открытия окна управляемой формы. Значение по умолчанию: Неопределено.'
          }
        },
        ПоФорме: {
          СтрокаПараметров: '(Форма: Форма, Окно?: ОкноКлиентскогоПриложения): Форма',
          Параметры: {
            Форма: 'Форма или управляемая форма. В режиме тонкого и веб-клиентов только управляемая форма.',
            Окно: 'Окно приложения, в котором будет открыта форма.  Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. В случае использования ВариантОткрытияОкна, окно формы будет создано согласно выбранному варианту.'
          }
        }
      }
    },
    "ОткрытьФормуМодально": {
      name: 'ОткрытьФормуМодально',
      name_en: 'OpenFormModal',
      description: 'Открывает форму или управляемую форму.  В тонком и веб-клиенте только управляемую форму.',
      signature: {
        ПоНазванию: {
          СтрокаПараметров: '(ИмяФормы: Строка, Параметры?: Структура, Владелец?: Произвольный, НавигационнаяСсылка?: Строка): Произвольный',
          Параметры: {
            ИмяФормы: 'Имя формы. Образуется как полный путь к объекту метаданных Форма (например, "Справочник.Контрагенты.Форма.ФормаОбъекта") или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, "Справочник.Товары.ФормаВыбора"). Имена форм по умолчанию:   - ФормаОбъекта (ObjectForm) - форма объекта по умолчанию;  - ФормаГруппы (FolderForm) - форма группы по умолчанию;  - ФормаЗаписи (RecordForm) - форма записи регистра по умолчанию;  - ФормаСписка (ListForm) - форма списка по умолчанию;  - ФормаВыбора (ChoiceForm) - форма выбора по умолчанию;  - ФормаВыбораГруппы (FolderChoiceForm) - форма выбора группы по умолчанию;  - ФормаКонстант (ConstantsForm) - форма констант по умолчанию для обычного режима, установленная как форма констант для конфигурации;  - Форма (Form) - форма константы, отчета и обработки по умолчанию;  - ФормаНастроек (SettingsForm) - форма настроек отчета по умолчанию;  - ФормаЗагрузки (LoadForm) - форма загрузки настроек;  - ФормаСохранения (SaveForm) - форма сохранения настроек;  - ФормаВарианта (VariantForm) - форма редактирования варианта отчета;  - ФормаПоиска (SearchForm) - форма полнотекстового поиска в данных.',
            Параметры: 'Параметры формы. Ключ структуры - имя параметра, а значение - значение параметра формы. Имя элемента должно совпадать с именем параметра структуры. П =НовыйСтруктура("Ключ", Поставщик); Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", П); Форма.Открыть();',
            Владелец: 'Владелец формы - форма или элемент управления другой формы.',
            НавигационнаяСсылка: 'Если содержит значение, отличное от Неопределено, то это значение присваивается свойству НавигационнаяСсылка формы, полученной в результате вызова данного метода, и свойство АвтоНавигационнаяСсылка этой формы устанавливается в Ложь. Значение по умолчанию: Неопределено.'
          }
        },
        ПоФорме: {
          СтрокаПараметров: '(Форма: Форма): Произвольный',
          Параметры: {
            Форма: 'Форма или управляемая форма.  В режимах тонкого и веб-клиента только УправляемаяФорма.'
          }
        }
      }
    },
    "ОтменитьТранзакцию": {
      name: 'ОтменитьТранзакцию',
      name_en: 'RollbackTransaction',
      description: 'Отменяет открытую ранее транзакцию. Все изменения, внесенные в информационную базу в процессе транзакции, будут отменены.'
    },
    "ОчиститьЖурналРегистрации": {
      name: 'ОчиститьЖурналРегистрации',
      name_en: 'ClearEventLog',
      description: 'Удаляет часть журнала регистрации в соответствии с фильтром. Очистить можно только журнал, который хранится в формате lgd.',
      signature: {
        default: {
          СтрокаПараметров: '(Фильтр: Структура)',
          Параметры: {
            Фильтр: 'Структура фильтра журнала регистрации:   - ДатаНачала (StartDate) - Дата; значение по умолчанию Неопределено;  - ДатаОкончания (EndDate) - Дата; значение по умолчанию Неопределено;  - Уровень (Level) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - ИмяПриложения (ApplicationName) - Строка или массив строк; значение по умолчанию Неопределено;  - Пользователь (User) - ПользовательИнформационнойБазы или массив таких объектов, или Строка. Объект ПользовательИнформационнойБазы и массив таких объектов можно получить из объекта МенеджерПользователейИнформационнойБазы. Также можно задавать пользователя по имени (строкой). Причем, пользователей, которые были удалены из информацонной базы можно задавать только таким способом. Пустая строка означает "пользователя по умолчанию", который используется, когда в информационной базе нет ни одного пользователя (от имени такого пользователя работают также фоновые задания). Если в фильтре задается массив пользователей, то можно перемешивать в нем значения обоих типов - строка и ПользовательИнформационнойБазы. Значение по умолчанию Неопределено;  - Компьютер (Computer) - Строка или массив строк; значение по умолчанию Неопределено;  - Событие (Event) - Строка или массив строк; значение по умолчанию Неопределено.    - Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию. Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.   - Метаданные (Metadata - объект описания метаданного или их массив; значение по умолчанию Неопределено;  - Данные (Data) - значение, тип значения – ссылка на объект (СправочикСсылка и т.д.); значение по умолчанию Неопределено;  - ПредставлениеДанных (DataPresentation) - Строка;  - Комментарий (Comment) - Строка;  - СтатусТранзакции (TransactionStatus) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - Транзакция (TransactionID) - идентификатор транзакции; Строка;  - Сеанс (Session) - номер сеанса пользователя. Число или массив чисел; значение по умолчанию Неопределено;  - РабочийСервер (ServerName) - Строка или массив строк; значение по умолчанию Неопределено;  - ОсновнойIPПорт (Port) - номер основного IP-порта рабочего процесса; Число или массив чисел; значение по умолчанию Неопределено;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Число или массив чисел; значение по умолчанию Неопределено.  - РазделениеДанныхСеанса (SessionDataSeparation) - Структура, имена элементов которой соответствуют именам общих реквизитов. В процессе отбора элементы структуры РазделениеДанныхСеанса объединяются по И: запись журнала попадает в выборку, если в ней есть соответствия для всех общих реквизитов, заданных в фильтре. Значение по умолчанию Неопределено.   - Значение элемента структуры, в свою очередь, может быть:   - структурой, задающей единичное значение. Элементы структуры:   - Значение (Value) - значение общего реквизита. Значение по умолчанию - Неопределено;  - Использование (Use) - Булево. Значение по умолчанию - Истина. Задает использование общего реквизита, разделяющего данные. Если Ложь - элемент Значение игнорируется и может быть опущен. Таким образом, можно отбирать записи журнала, в которых данный общий реквизит не установлен.   - массивом, который задает набор допустимых значений общего реквизита, разделяющего данные. Массив содержит структуры, каждая из которых задает единичное значение общего реквизита (как описано выше). Элементы массива учитываются по ИЛИ: запись журнала попадает в выборку, если значение общего реквизита в ней равно одному из заданных в массиве.'
          }
        }
      }
    },
    "ОчиститьНастройкиПользователя": {
      name: 'ОчиститьНастройкиПользователя',
      name_en: 'ClearUserSettings',
      description: 'Очищает настройки пользователя, принадлежащие информационной базе и конкретному пользователю в ней.',
      signature: {
        ПоПользователюИнформационнойБазы: {
          СтрокаПараметров: '(ПользовательИБ: ПользовательИнформационнойБазы)',
          Параметры: {
            ПользовательИБ: 'Пользователь информационной базы, для которого выполняется очистка настроек.'
          }
        },
        ПоИмени: {
          СтрокаПараметров: '(ИмяПользователяИБ: Строка)',
          Параметры: {
            ИмяПользователяИБ: 'Имя пользователя информационной базы.'
          }
        }
      }
    },
    "ОчиститьСообщения": {
      name: 'ОчиститьСообщения',
      name_en: 'ClearMessages',
      description: 'Очищает окно сообщений.'
    },
    "ПараметрыДоступа": {
      name: 'ПараметрыДоступа',
      name_en: 'AccessParameters',
      description: 'Позволяет получить права текущего пользователя на заданный объект метаданных для проверки наличия ограничения прав доступа с учетом указанных полей.',
      signature: {
        default: {
          СтрокаПараметров: '(НаименованиеПрава: Строка, ОбъектМетаданных: Произвольный, СписокПолей: Строка, Пользователь_Роль?: ПользовательИнформационнойБазы): ПараметрыДоступа',
          Параметры: {
            НаименованиеПрава: 'Наименование запрашиваемого на объект права, например "Read".',
            ОбъектМетаданных: 'Объект метаданных, права на доступ к которому проверяются.  Могут быть указаны только следующие объекты метаданных:   - ОбъектМетаданных: ПланОбмена;  - ОбъектМетаданных: Константа (для режима совместимости Версия8_2_13 и ниже);  - ОбъектМетаданных: Справочник;  - ОбъектМетаданных: Документ;  - ОбъектМетаданных: ЖурналДокументов;  - ОбъектМетаданных: Последовательность;  - ОбъектМетаданных: ПланВидовХарактеристик;  - ОбъектМетаданных: ПланСчетов;  - ОбъектМетаданных: ПланВидовРасчета;  - ОбъектМетаданных: РегистрСведений;  - ОбъектМетаданных: РегистрНакопления;  - ОбъектМетаданных: РегистрБухгалтерии;  - ОбъектМетаданных: РегистрРасчета;  - ОбъектМетаданных: Перерасчет;  - ОбъектМетаданных: БизнесПроцесс;  - ОбъектМетаданных: Задача;  - ОбъектМетаданных: ВнешнийИсточникДанных.',
            СписокПолей: 'Список полей объекта базы данных, права на доступ к которым проверяются. Поля указываются списком, через запятую. Могут присутствовать имена табличных частей, реквизитов табличных частей, в последнем случае поле описывается как <Имя табличной части>.<Имя реквизита табличной части>.',
            Пользователь_Роль: 'Указывает пользователя или роль, для которых нужно определить доступность права. При этом возвращается значение права так, как оно определено в конфигурации.'
          }
        }
      }
    },
    "ПерейтиПоНавигационнойСсылке": {
      name: 'ПерейтиПоНавигационнойСсылке',
      name_en: 'GotoURL',
      description: 'Выполняет переход по ссылке так, как если бы пользователь выполнил интерактивную вспомогательную команду "Перейти по ссылке ...". Если выполняется переход по ссылке на объект информационной базы, отчет или обработку, то происходит открытие нового вспомогательного окна (если окно с этим объектом еще не открыто). Если выполняется переход по ссылке на точку навигации, то переход будет выполнен в основном окне приложения, и оно станет активным. Возможен переход по внешней ссылке. Для внешней ссылки, которая содержит сигнатуру "e1cib" выполняются следующие действия:   - Если начало ссылки совпадает с навигационной ссылкой информационной базы текущего сеанса, то выполняется переход по локальной ссылке;  - Если начало ссылки не совпадает с навигационной ссылкой информационной базы, то осуществляется поиск запущенного клиента, подключенного к базе, адрес которой соответствует ссылке. Если такой клиент найден, окно его приложения активизируется и в нем выполняется переход по ссылке.  - Если соответствующего запущенного экземпляра тонкого клиента нет, то выполняется попытка запуска нового экземляра тонкого клиента с соответствующей строкой соединения и в нем выполняется переход. Если выполняется переход по ссылке вида "http(s)" на объект в другой информационной базе, то:   - Выполняется попытка найти запущенный экземпляр тонкого клиента, работающего с соответствующей информационной базой.  - Если запущенного экземпляра тонкого клиента нет, или в нем открыт модальный диалог, выполняется попытка запуска нового экземпляра тонкого клиента с соответствующей строкой соединения.  - Если попытка запуска не успешна (например, тонкий клиент не установлен), переданная ссылка обрабатывается операционной системой. Если внешняя ссылка не является навигационной ссылкой информационной базы (например, ссылки на сайты или файлы на диске), то в тонком клиенте данная ссылка выполняется как команда операционной системы. Ссылка открывается ассоциированной с данным типом ссылки программой. Если ссылка указывает на текстовый документ, табличный документ и т.п., в тонком клиенте документ будет открыт в клиентском приложении.В веб-клиенте отрабатывают только http-ссылки, которые открываются в том же браузере в отдельном окне. Форматы навигационных ссылок описаны в документации, см. http://its.1c.ru/db/v83doc#bookmark:dev:TI000001216.',
      signature: {
        default: {
          СтрокаПараметров: '(НавигационнаяСсылка: Строка)',
          Параметры: {
            НавигационнаяСсылка: 'Навигационная ссылка.'
          }
        }
      }
    },
    "ПереместитьФайл": {
      name: 'ПереместитьФайл',
      name_en: 'MoveFile',
      description: 'Выполняет перемещение (переименование) указанного файла.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайлаИсточника: Строка, ИмяФайлаПриемника: Строка)',
          Параметры: {
            ИмяФайлаИсточника: 'Полное имя файла-источника (полное исходное имя файла).',
            ИмяФайлаПриемника: 'Полное имя файла-приемника (полное новое имя файла).'
          }
        }
      }
    },
    "ПодключитьВнешнююКомпоненту": {
      name: 'ПодключитьВнешнююКомпоненту',
      name_en: 'AttachAddIn',
      description: 'Подключает внешний компонент к 1С:Предприятию. Внешние компоненты могут храниться в информационной базе или макетах конфигурации в виде ZIP-архива или в виде двоичных данных, а также в файле файловой системы. При работе на тонком клиенте и веб-клиенте компонент должен быть предварительно установлен.',
      signature: {
        ПоИмениИМестоположению: {
          СтрокаПараметров: '(Местоположение: Строка, Имя: Строка, Тип?: ТипВнешнейКомпоненты): Булево',
          Параметры: {
            Местоположение: 'Местоположение внешнего компонента. В качестве местоположения может использоваться:   - путь к файлу внешнего компонента в файловой системе (недоступно на веб-клиенте), не ZIP-архив;  - полное имя макета, хранящего двоичные данные или ZIP-архив;  - URL к внешнему компоненту, в виде двоичных данных или ZIP-архива, в формате, аналогичном ПолучитьНавигационнуюСсылку.',
            Имя: 'Символическое имя подключаемой внешнего компонента. Имя должно удовлетворять правилам именования встроенного языка.',
            Тип: 'Тип подключаемого внешнего компонента. Не используется, если компонент упакован в ZIP-архив.'
          }
        },
        ПоИдентификатору: {
          СтрокаПараметров: '(ИдентификаторОбъекта: Строка): Булево',
          Параметры: {
            ИдентификаторОбъекта: 'Идентификатор объекта внешнего компонента в виде ProgID (Programmatic Identifier) реестра MS Windows (например: "AddIn.Scanner"). Должно соответствовать информации, находящейся в регистрационной базе данных системы (Registry).'
          }
        }
      }
    },
    "ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования": {
      name: 'ПодключитьОбработчикЗапросаНастроекКлиентаЛицензирования',
      name_en: 'AttachLicensingClientParametersRequestHandler',
      description: 'Подключает вызов указанной процедуры глобального модуля, доступного на клиенте, или модуля приложения (обычного или управляемого), которая будет вызываться, если ответ центра лицензирования указывает на необходимость установить параметры клиента лицензирования.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПроцедуры: Строка)',
          Параметры: {
            ИмяПроцедуры: 'Имя экспортируемой процедуры модуля приложения (обычного или управляемого) или глобального общего модуля. Процедура должна располагаться на клиенте. Процедура не должна содержать параметров.'
          }
        }
      }
    },
    "ПодключитьОбработчикОжидания": {
      name: 'ПодключитьОбработчикОжидания',
      name_en: 'AttachIdleHandler',
      description: 'Подключает вызов указанной процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля через определенный интервал времени. Вызов будет осуществляться только в "состоянии покоя", то есть в тот момент, когда программа не выполняет никаких действий. Во время временной блокировки, вызванной методом ЗаблокироватьРаботуПользователя или соответствующей командой "Временная блокировка", обработчики ожидания не выполняются.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПроцедуры: Строка, Интервал: Число, Однократно?: Булево)',
          Параметры: {
            ИмяПроцедуры: 'Имя экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля. Процедура должна располагаться на клиенте. Процедура не должна содержать параметров.',
            Интервал: 'Интервал времени в секундах с точностью до 1/10 секунды, через который будет осуществляться вызов процедуры (положительное число). Если указано значение меньше 1, то значение третьего параметра должно быть равно Истина.',
            Однократно: 'Признак однократного выполнения обработчика ожидания. Истина - указанный обработчик ожидания будет выполнен один раз. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "ПодключитьОбработчикОповещения": {
      name: 'ПодключитьОбработчикОповещения',
      name_en: 'AttachNotificationHandler',
      description: 'Подключает вызов указанной экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или глобального общего модуля для обработки оповещения при вызове метода Оповестить. Процедура должна быть экспортируемой и иметь три параметра - Имя события, Параметр, Источник.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПроцедуры: Строка)',
          Параметры: {
            ИмяПроцедуры: 'Имя экспортируемой процедуры модуля управляемого приложения (модуля обычного приложения) или общего глобального модуля. Процедура должна располагаться на клиенте. Процедура не должна содержать параметров.'
          }
        }
      }
    },
    "ПодключитьРасширениеРаботыСКриптографией": {
      name: 'ПодключитьРасширениеРаботыСКриптографией',
      name_en: 'AttachCryptoExtension',
      description: 'При первом обращении выполняет подключение расширения для работы с криптографией. При каждом обращении проверяет готовность расширения к работе.'
    },
    "ПодключитьРасширениеРаботыСФайлами": {
      name: 'ПодключитьРасширениеРаботыСФайлами',
      name_en: 'AttachFileSystemExtension',
      description: 'При первом обращении выполняет подключение расширения для работы с файлами. При каждом обращении проверяет готовность расширения к работе.'
    },
    "ПодробноеПредставлениеОшибки": {
      name: 'ПодробноеПредставлениеОшибки',
      name_en: 'DetailErrorDescription',
      description: 'Возвращает строку, аналогичную той, что показывается в стандартном диалоге платформы 1С:Предприятие, вызываемом при нажатии кнопки "Подробно" из сообщения об ошибке.',
      signature: {
        default: {
          СтрокаПараметров: '(ИнформацияОбОшибке: ИнформацияОбОшибке): Строка',
          Параметры: {
            ИнформацияОбОшибке: 'Содержит информацию об ошибке.'
          }
        }
      }
    },
    "ПоказатьВводДаты": {
      name: 'ПоказатьВводДаты',
      name_en: 'ShowInputDate',
      description: 'Открывает окно для ввода даты, но при этом не ожидает завершения ввода.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Дата?: Дата, Подсказка?: Строка, ЧастьДаты?: ЧастиДаты)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода даты со следующими параметрами:   - <Дата> - выбранное значение даты или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Дата: 'Начальное значение даты, отображаемое в окне ввода. Значение по умолчанию: Неопределено.',
            Подсказка: 'Текст заголовка окна диалога ввода даты. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            ЧастьДаты: 'Вводимая в диалоге часть (или части) даты. Значение по умолчанию: ДатаВремя.'
          }
        }
      }
    },
    "ПоказатьВводЗначения": {
      name: 'ПоказатьВводЗначения',
      name_en: 'ShowInputValue',
      description: 'Показывает окно для ввода значения заданного типа.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Значение: Произвольный, Подсказка?: Строка, Тип?: Тип)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода значения со следующими параметрами:   - <Значение> - выбранное значение или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Значение: 'Значение, которое будет использовано в качестве начального значения в диалоге.  Если параметр <Тип> не задан или имеет значение Неопределено, тип данного значения используется в качестве типа вводимого в окне данного.',
            Подсказка: 'Текст заголовка окна ввода значения. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            Тип: 'Тип вводимого значения. Если параметр не указан, используется тип параметра <Значение>.'
          }
        }
      }
    },
    "ПоказатьВводСтроки": {
      name: 'ПоказатьВводСтроки',
      name_en: 'ShowInputString',
      description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Строка?: Строка, Подсказка?: Строка, Длина?: Число, Многострочность?: Булево)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода строки со следующими параметрами:   - <Строка> - введенное значение строки или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Строка: 'Начальное значение строки, которое будет использовано в качестве начального значения в окне ввода.',
            Подсказка: 'Текст заголовка окна диалога ввода строки. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            Длина: 'Длина вводимой строки. Если параметр не указан, то строка неограниченной длины. Значение по умолчанию: 0.',
            Многострочность: 'Определяет режим ввода многострочного текста: Истина - ввод многострочного текста с разделителями строк; Ложь - ввод простой строки. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "ПоказатьВводЧисла": {
      name: 'ПоказатьВводЧисла',
      name_en: 'ShowInputNumber',
      description: 'Вызывает диалог для ввода строки, при этом не ожидает завершения ввода.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, Число: Число, Подсказка?: Строка, Длина?: Число, Точность?: Число)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода числа со следующими параметрами:   - <Число> - введенное значение числа или Неопределено, если пользователь отказался от ввода,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            Число: 'Значение числа, которое будет использовано в качестве начального значения в диалоге.',
            Подсказка: 'Текст заголовка окна диалога ввода числа. Может использоваться в качестве подсказки пользователю. Значение по умолчанию: Пустая строка.',
            Длина: 'Длина вводимого числа включая дробную часть (символы разделителей не учитываются). Значение по умолчанию: 0.',
            Точность: 'Количество знаков в дробной части вводимого числа. Значение по умолчанию: 0.'
          }
        }
      }
    },
    "ПоказатьВопрос": {
      name: 'ПоказатьВопрос',
      name_en: 'ShowQueryBox',
      description: 'Выводит на экран окно вопроса, при этом не ожидается завершения ответа пользователя.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении: ОписаниеОповещения, ТекстВопроса: Строка, Кнопки: РежимДиалогаВопрос, Таймаут?: Число, КнопкаПоУмолчанию?: РежимДиалогаВопрос, Заголовок?: Строка, КнопкаТаймаута?: Произвольный)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода значения со следующими параметрами:   - <РезультатВопроса> - результат выбора пользователя: значение системного перечисления или значение, связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут,  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.',
            ТекстВопроса: 'Текст задаваемого вопроса.',
            Кнопки: 'Задает состав и текст кнопок диалога, а также, связанные с кнопками значения. При использовании типа СписокЗначений:   - Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки. В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;  - Представление – задает текст кнопки. Если представление не задано и в качестве значения используется значение перечисления КодВозвратаДиалога, то используется стандартное представление;  - Картинка – не используется (должна быть пустой);  - Пометка – не используется (должна быть пустой). При использовании типа СписокЗначений список не должен быть пустым.',
            Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно вопроса будет закрыто. Если параметр не указан, то время ожидания не ограничено. Значение по умолчанию: 0.',
            КнопкаПоУмолчанию: 'Определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению.',
            Заголовок: 'Содержит заголовок окна вопроса.',
            КнопкаТаймаута: 'Определяет кнопку (по типу кнопки или по связанному с ней значению), на которой отображается количество секунд, оставшихся до истечения таймаута.'
          }
        }
      }
    },
    "ПоказатьЗначение": {
      name: 'ПоказатьЗначение',
      name_en: 'ShowValue',
      description: 'Показывает в диалоге переданное значение, при этом не ожидается его закрытие. Вид диалога зависит от типа переданного значения.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, Значение: Произвольный)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна ввода значения с параметром <ДополнительныеПараметры>, который содержит значение, указанное при создании объекта ОписаниеОповещения. Если параметр не указан, то по завершении никакая процедура вызвана не будет.',
            Значение: 'Значение любого типа, который может быть показан системой в диалоге.'
          }
        }
      }
    },
    "ПоказатьИнформациюОбОшибке": {
      name: 'ПоказатьИнформациюОбОшибке',
      name_en: 'ShowErrorInfo',
      description: 'Предназначен для показа информации об ошибке пользователю в стандартном диалоге платформы 1С:Предприятие.',
      signature: {
        default: {
          СтрокаПараметров: '(ИнформацияОбОшибке: ИнформацияОбОшибке)',
          Параметры: {
            ИнформацияОбОшибке: 'Информация об ошибке, которую надо показать пользователю.'
          }
        }
      }
    },
    "ПоказатьНаКарте": {
      name: 'ПоказатьНаКарте',
      name_en: 'ShowOnMap',
      description: 'Отображает на карте переданные координаты.',
      signature: {
        default: {
          СтрокаПараметров: '(Местоположение: ГеографическиеКоординаты)',
          Параметры: {
            Местоположение: 'Местоположение, которое нужно показать. Для отображения нескольких точек используется СписокЗначений, в котором значение элемента списка - это географическая координата, а представление - текст, отображаемый в точке (на булавке).'
          }
        }
      }
    },
    "ПоказатьОповещениеПользователя": {
      name: 'ПоказатьОповещениеПользователя',
      name_en: 'ShowUserNotification',
      description: 'Показывает окно, по умолчанию располагающееся внизу экрана, которое постепенно затухает и исчезает с экрана.  В окне может располагаться ссылка, выбор которой вызывает определенные для ссылки действия (например, открытие формы).',
      signature: {
        default: {
          СтрокаПараметров: '(Текст?: Строка, НавигационнаяСсылка?: Строка, Пояснение?: Строка, Картинка?: Картинка)',
          Параметры: {
            Текст: 'Текст оповещения.',
            НавигационнаяСсылка: 'Навигационная ссылка. Показывается как гиперссылка. При нажатии на нее происходит переход по указанной ссылке.',
            Пояснение: 'Пояснение оповещения.',
            Картинка: 'Картинка, которая будет показана в оповещении.'
          }
        }
      }
    },
    "ПоказатьПредупреждение": {
      name: 'ПоказатьПредупреждение',
      name_en: 'ShowMessageBox',
      description: 'Выводит на экран окно предупреждения, но не ожидает его закрытия.',
      signature: {
        default: {
          СтрокаПараметров: '(ОписаниеОповещенияОЗавершении?: ОписаниеОповещения, ТекстПредупреждения: Строка, Таймаут?: Число, Заголовок?: Строка)',
          Параметры: {
            ОписаниеОповещенияОЗавершении: 'Содержит описание процедуры, которая будет вызвана после закрытия окна предупреждения со следующими параметрами:   - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. Если параметр не указан, то по завершении никакая процедура вызвана не будет.',
            ТекстПредупреждения: 'Текст предупреждения.',
            Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно предупреждения будет закрыто. Если параметр не указан, то время ожидания не ограничено. Значение по умолчанию: 0.',
            Заголовок: 'Содержит заголовок окна предупреждения.'
          }
        }
      }
    },
    "ПолноеИмяПользователя": {
      name: 'ПолноеИмяПользователя',
      name_en: 'UserFullName',
      description: 'Получает полное имя пользователя, указанного при запуске программы.'
    },
    "ПолучитьCOMОбъект": {
      name: 'ПолучитьCOMОбъект',
      name_en: 'GetCOMObject',
      description: 'Основное применение функции ПолучитьCOMОбъект - это получение COM-объекта, соответствующего файлу. Для этого следует в качестве первого параметра функции задать имя файла, который будет определять COM-объект. Например, фрагмент кода: Таб = ПолучитьCOMОбъект("C:\\DATA\\DATA.XLS"); создает объект Excel.Application и открывает с его помощью файл документа "C:\\DATA\\DATA.XLS". Если указанный файл во время выполнения данного фрагмента уже открыт с помощью MS Excel, то будет получена ссылка на уже существующий объект. Для файлов, указываемых в качестве параметра данной функции, должно быть установлено соответствие расширения имени файла и класса COM. Если в качестве имени файла указана пустая строка, то будет создан новый экземпляр объекта. В этом случае необходимо указать имя класса COM.  Например, фрагмент кода: Таб = ПолучитьCOMОбъект("", "Excel.Application"); создает новый документ Excel. В дальнейшем этот документ может быть программно заполнен и сохранен в файл. Если первый параметр функции пропущен, то будет произведена попытка получить активный объект указанного типа. Если активного объекта указанного типа в настоящий момент не существует, то будет вызвано исключение. Например, в результате выполнения оператора: П = ПолучитьCOMОбъект( , "Excel.Application"); Переменная П получит значение типа COMОбъект, соответствующее активному приложению MS Excel, если таковое имелось, или будет вызвано исключение, если активных экземпляров MS Excel не было.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайла?: Строка, ИмяКлассаCOM?: Строка): COMОбъект',
          Параметры: {
            ИмяФайла: 'Имя файла, включающее полный путь.',
            ИмяКлассаCOM: 'Имя класса COM, экземпляр которого должен быть создан или получен. Если расширение имени файла, указанное в первом параметре, полностью идентифицирует класс объекта, то параметр может быть опущен.'
          }
        }
      }
    },
    "ПолучитьXMLТип": {
      name: 'ПолучитьXMLТип',
      name_en: 'GetXMLType',
      description: 'Получает тип данных XML, который может быть прочитан в настоящий момент из объекта типа ЧтениеXML. При получении типа данных XML может быть произведена операция чтения из объекта ЧтениеXML. В случае, если тип данных XML определить невозможно, возвращается значение Неопределено. Тип данных XML определяется по следующему алгоритму: 1) Пропускаются пробельные символы, если текущая позиция объекта ЧтениеXML соответствует типу узла "Текст" и значение узла полностью состоит из пробельных символов. 2) Если тип текущего узла не соответствует значению НачалоЭлемента, то считается, что тип не определен. 3) Определяется наличие атрибута "nil" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует и его значение равно "true", то считается, что тип не определен. 4) Определяется наличие атрибута "type" из пространства имен "http://www.w3.org/2001/XMLSchema-instance". Если атрибут существует, то производится анализ значения атрибута:   - значение разделяется на префикс пространства имен и локальное имя;  - по префиксу пространства имен в объекте ЧтениеXML определяется URI пространства имен, соответствующее данному префиксу (если соответствующего URI пространства имен не обнаружено - считается, что тип не определен);  - по полученному локальному имени и URI пространства имен создается значение типа данных XML. 5) Если атрибут "type" не существует, производится анализ имени элемента. Если локальное имя элемента совпадает с одним из имен типов пространства имен "http://www.w3.org/2001/XMLSchema" и пространство имен элемента не определено (пустая строка), то считается, что тип принадлежит пространству имен "http://www.w3.org/2001/XMLSchema".',
      signature: {
        default: {
          СтрокаПараметров: '(ЧтениеXML: ЧтениеXML): ТипДанныхXML',
          Параметры: {
            ЧтениеXML: 'Объект, из которого выполняется чтение.'
          }
        }
      }
    },
    "ПолучитьАдресПоМестоположению": {
      name: 'ПолучитьАдресПоМестоположению',
      name_en: 'GetAddressByLocation',
      description: 'Получает адрес по географическим координатам.',
      signature: {
        default: {
          СтрокаПараметров: '(Местоположение: ГеографическиеКоординаты): ДанныеАдреса',
          Параметры: {
            Местоположение: 'Местоположение, адрес которого нужно получить.'
          }
        }
      }
    },
    "ПолучитьБлокировкуСеансов": {
      name: 'ПолучитьБлокировкуСеансов',
      name_en: 'GetSessionsLock',
      description: 'Получает объект, описывающий блокировку сеансов.'
    },
    "ПолучитьВремяЗавершенияСпящегоСеанса": {
      name: 'ПолучитьВремяЗавершенияСпящегоСеанса',
      name_en: 'GetHibernateSessionTerminateTime',
      description: 'Интервал времени в секундах, по истечении которого спящий сеанс завершается.'
    },
    "ПолучитьВремяЗасыпанияПассивногоСеанса": {
      name: 'ПолучитьВремяЗасыпанияПассивногоСеанса',
      name_en: 'GetPassiveSessionHibernateTime',
      description: 'Получить интервал времени в секундах, по завершении которого неактивный сеанс переводится в спящий режим.'
    },
    "ПолучитьВремяОжиданияБлокировкиДанных": {
      name: 'ПолучитьВремяОжиданияБлокировкиДанных',
      name_en: 'GetLockWaitTime',
      description: 'Получает заданное в информационной базе время ожидания блокировки данных (в секундах).'
    },
    "ПолучитьДанныеВыбора": {
      name: 'ПолучитьДанныеВыбора',
      name_en: 'GetChoiceData',
      description: 'Формирует список значений данных выбора при вводе по строке, автоподборе текста и быстром выборе.',
      signature: {
        default: {
          СтрокаПараметров: '(ТипЗначения: Тип, Параметры: Структура): СписокЗначений',
          Параметры: {
            ТипЗначения: 'Объект метаданных, для которого выполняется формирование типа значений. Указывается в виде типа. Например: СправочникСсылка.Товары.',
            Параметры: 'Содержит параметры для формирования списка значений. Структура, в которой обязательно должны содержаться следующие ключи:   - Отбор (Filter) - отбор, используемый для поиска данных, тип Структура; значения элементов отбора могут иметь тип Массив, СписокЗначений, ФиксированныйМассив или иной тип, не являющийся коллекцией; для типов Массив, СписокЗначений, ФиксированныйМассив сравнение выполняется с видом сравнения ВСписке, иначе вид сравнения Равно;  - СтрокаПоиска (SearchString) - содержит строку, используемую при поиске данных; для быстрого выбора содержит значение Неопределено;  - ВыборГруппИЭлементов (ChoiceFoldersAndItems) - указывается использование групп и элементов; тип ИспользованиеГруппИЭлементов; параметр может отсутствовать;  - СпособПоискаСтроки (StringSearchMode) - указывается способ поиска при вводе по строке; тип СпособПоискаСтрокиПриВводеПоСтроке; параметр может отсутствовать;  - ПолнотекстовыйПоиск (FullTextSearch) - указывается необходимость использования полнотекстового поиска при вводе по строке; тип - ПолнотекстовыйПоискПриВводеПоСтроке; параметр может отсутствовать.'
          }
        }
      }
    },
    "ПолучитьДополнительныйПараметрКлиентаЛицензирования": {
      name: 'ПолучитьДополнительныйПараметрКлиентаЛицензирования',
      name_en: 'GetLicensingClientAdditionalParameter',
      description: 'Получает дополнительный параметр, используемый для обслуживания информационной базы.'
    },
    "ПолучитьДопустимыеКодыЛокализации": {
      name: 'ПолучитьДопустимыеКодыЛокализации',
      name_en: 'GetAvailableLocaleCodes',
      description: 'Получает массив допустимых кодов локализации.'
    },
    "ПолучитьДопустимыеЧасовыеПояса": {
      name: 'ПолучитьДопустимыеЧасовыеПояса',
      name_en: 'GetAvailableTimeZones',
      description: 'Получает массив строк допустимых идентификаторов часовых поясов.'
    },
    "ПолучитьЗаголовокКлиентскогоПриложения": {
      name: 'ПолучитьЗаголовокКлиентскогоПриложения',
      name_en: 'GetClientApplicationCaption',
      description: 'Получает заголовок приложения, который используется при формировании заголовков окон.'
    },
    "ПолучитьЗаголовокСистемы": {
      name: 'ПолучитьЗаголовокСистемы',
      name_en: 'GetCaption',
      description: 'Получает текст заголовка главного окна программы.'
    },
    "ПолучитьЗначенияОтбораЖурналаРегистрации": {
      name: 'ПолучитьЗначенияОтбораЖурналаРегистрации',
      name_en: 'GetEventLogFilterValues',
      description: 'Позволяет получить наборы допустимых значений параметров отбора журнала регистрации: приложение, пользователь, компьютер, событие, метаданные, рабочий сервер, основной IP-порт, вспомогательный IP-порт, данные сеанса. Эти значения можно использовать для формирования параметра Фильтр метода ВыгрузитьЖурналРегистрации.',
      signature: {
        default: {
          СтрокаПараметров: '(Колонки?: Строка, ИмяВходногоФайла?: Строка): Структура',
          Параметры: {
            Колонки: 'Для того чтобы получить наборы допустимых значений определенных колонок журнала регистрации, необходимо в параметре перечислить их имена, при этом необходимо имя каждой колонки отделять запятой. Доступны следующие колонки:   - Пользователь (User);  - Компьютер (Computer);  - ИмяПриложения (ApplicationName);  - Событие (Event);  - Метаданные (Metadata);  - РабочийСервер (ServerName);  - ОсновнойIPПорт (Port);  - ВспомогательныйIPПорт (SyncPort);  - РазделениеДанныхСеанса (SessionDataSeparation);  - РазделениеДанныхСеанса.<имя общего реквизита> (SessionDataSeparation.<имя общего реквизита>) - в одном вызове метода может быть указано несколько общих реквизитов, входящих в данные сеанса. Используется для получения наборов допустимых значений общих реквизитов, входящих в данные сеанса. Наборы значений возвращаются в элементе РазделениеДанныхСеансаЗначения (SessionDataSeparationValues). Если не задан, то наборы допустимых значений будут получены для всех доступных колонок.',
            ИмяВходногоФайла: 'Имя файла журнала регистрации.'
          }
        }
      }
    },
    "ПолучитьИдентификаторКонфигурации": {
      name: 'ПолучитьИдентификаторКонфигурации',
      name_en: 'GetConfigurationID',
      description: 'Возвращает идентификатор конфигурации, с которой работает информационная база. Идентификатор составляется путем анализа и учета метаданных конфигурации.'
    },
    "ПолучитьИзВременногоХранилища": {
      name: 'ПолучитьИзВременногоХранилища',
      name_en: 'GetFromTempStorage',
      description: 'Получает значение из временного хранилища.',
      signature: {
        default: {
          СтрокаПараметров: '(Адрес: Строка): Произвольный',
          Параметры: {
            Адрес: 'Адрес, указывающий на значение во временном хранилище.'
          }
        }
      }
    },
    "ПолучитьИмяВременногоФайла": {
      name: 'ПолучитьИмяВременногоФайла',
      name_en: 'GetTempFileName',
      description: 'Для записи данных во временный файл необходимо сначала сформировать имя такого файла. При этом во избежание случайных потерь имеющихся файлов требуется получить уникальное имя. Данный метод предназначен для получения такого имени. При выполнении метода файл не создается.  Если файл не будет удален средствами встроенного языка, он будет удален платформой при следующем запуске.',
      signature: {
        default: {
          СтрокаПараметров: '(Расширение?: Строка): Строка',
          Параметры: {
            Расширение: 'Указывает желаемое расширение имени временного файла. Если параметр не задан, то создается временный файл с расширением по умолчанию (.tmp). Желаемое расширение задается строкой, которая и будет использована в качестве расширения. Указание точки в начале расширения не обязательно. Например, при указании ".xml" или "xml" результат будет одинаковый.'
          }
        }
      }
    },
    "ПолучитьИмяКлиентаЛицензирования": {
      name: 'ПолучитьИмяКлиентаЛицензирования',
      name_en: 'GetLicensingClientName',
      description: 'Возвращает имя клиента лицензирования из информационной базы.'
    },
    "ПолучитьИнформациюЭкрановКлиента": {
      name: 'ПолучитьИнформациюЭкрановКлиента',
      name_en: 'GetClientDisplaysInformation',
      description: 'Получает информацию об экранах подключенных устройств.  Информация предоставляется в виде фиксированного массива объектов ИнформацияЭкранаКлиента. Первый элемент массива описывает основной экран.'
    },
    "ПолучитьИспользованиеЖурналаРегистрации": {
      name: 'ПолучитьИспользованиеЖурналаРегистрации',
      name_en: 'GetEventLogUsing',
      description: 'Проверяет, осуществляется ли в журнале регистрация события заданного уровня важности.'
    },
    "ПолучитьИспользованиеСобытияЖурналаРегистрации": {
      name: 'ПолучитьИспользованиеСобытияЖурналаРегистрации',
      name_en: 'GetEventLogEventUse',
      description: 'Получает текущее состояние управления регистрацией указанного события в журнале регистрации.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяСобытия: Строка): ИспользованиеСобытияЖурналаРегистрации',
          Параметры: {
            ИмяСобытия: 'Имя регистрируемого события. Допустимые системные имена событий:    - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.'
          }
        }
      }
    },
    "ПолучитьКраткийЗаголовокПриложения": {
      name: 'ПолучитьКраткийЗаголовокПриложения',
      name_en: 'GetShortApplicationCaption',
      description: 'Получает краткий заголовок приложения, размещенный в заголовке окна приложения перед текстом системного заголовка.'
    },
    "ПолучитьМакетОформления": {
      name: 'ПолучитьМакетОформления',
      name_en: 'GetAppearanceTemplate',
      description: 'Получает макет оформления.',
      signature: {
        default: {
          СтрокаПараметров: '(Оформление: СтандартноеОформление): ТабличныйДокумент',
          Параметры: {
            Оформление: 'Содержит стандартный вариант оформления.'
          }
        }
      }
    },
    "ПолучитьМаскуВсеФайлы": {
      name: 'ПолучитьМаскуВсеФайлы',
      name_en: 'GetAllFilesMask',
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в контексте которой выполняется вызов.'
    },
    "ПолучитьМаскуВсеФайлыКлиента": {
      name: 'ПолучитьМаскуВсеФайлыКлиента',
      name_en: 'GetClientAllFilesMask',
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой выполняется клиентское приложение.'
    },
    "ПолучитьМаскуВсеФайлыСервера": {
      name: 'ПолучитьМаскуВсеФайлыСервера',
      name_en: 'GetServerAllFilesMask',
      description: 'Получает файловую маску, принятую для выбора всех файлов в операционной системе, в которой работает сервер 1С:Предприятия, обрабатывающий вызов.'
    },
    "ПолучитьМестоположениеПоАдресу": {
      name: 'ПолучитьМестоположениеПоАдресу',
      name_en: 'GetLocationByAddress',
      description: 'Получает географические координаты по адресу.',
      signature: {
        default: {
          СтрокаПараметров: '(Адрес?: ДанныеАдреса): ГеографическиеКоординаты',
          Параметры: {
            Адрес: 'Адрес местоположения. Состав адреса может различаться в разных государствах. Для России определены поля:   - Страна (Country);  - Регион (State);  - Город (City);  - Улица (Street);  - Дом (House);  - Индекс (ZipCode).'
          }
        }
      }
    },
    "ПолучитьМинимальнуюДлинуПаролейПользователей": {
      name: 'ПолучитьМинимальнуюДлинуПаролейПользователей',
      name_en: 'GetUserPasswordMinLength',
      description: 'Получает ограничение на минимальную длину паролей, которое установлено для пользователей информационной базы.'
    },
    "ПолучитьНавигационнуюСсылку": {
      name: 'ПолучитьНавигационнуюСсылку',
      name_en: 'GetURL',
      description: 'Получает текст ссылки на объект информационной базы или его реквизит в формате 1С:Предприятия. В первом случае принимает в качестве параметра ссылку на объект (это может быть как ссылка, так и ключ записи регистра сведений). Объектом могут быть: справочник, документ, план счетов, план видов характеристик, план видов расчета, план обмена, ключ записи регистра сведений, бизнес процесс, задача. Во втором в качестве параметров принимает ключ объекта (это может быть как ссылка, так и ключ записи регистра сведений) и имя реквизита (ресурса). Если нужно получить ссылку на реквизит табличной части, перед именем реквизита необходимо добавить имя табличной части и точку ".".',
      signature: {
        default: {
          СтрокаПараметров: '(Объект: Произвольный, ИмяРеквизита?: Строка, Индекс?: Число): Строка',
          Параметры: {
            Объект: 'Ссылка на объект.',
            ИмяРеквизита: 'Имя реквизита объекта или ресурса Регистра сведений, для которого нужно выяснить ссылку. Если это реквизит табличной части объекта, то параметр указывается как <имя табличной части>.<имя реквизита>, то есть с разделителем "." (точка).',
            Индекс: 'Индекс строки в табличной части, в том случае если объект является реквизитом табличной части. Первая строка имеет индекс, равный 0.'
          }
        }
      }
    },
    "ПолучитьНавигационнуюСсылкуИнформационнойБазы": {
      name: 'ПолучитьНавигационнуюСсылкуИнформационнойБазы',
      name_en: 'GetInfoBaseURL',
      description: 'Получает навигационную ссылку информационной базы. Форматы ссылки в зависимости от вида информационной базы:   - Файловая:   - Если путь к файловой версии является UNC путем, то формат строка имеет следующий вид e1c://file/UNC путь;  - Если путь к файловой версии содержит том, то формат строка имеет следующий вид - e1c://filev/символ тома/остальной путь;   - Клиент-сервер:   - e1c://server/имя сервера/имя ИБ.   - Веб-сервер:   - http://путь;  - https://путь. Эта ссылка может использоваться для создания абсолютной ссылки из относительной. Внимание! На сервере данный метод поддерживается только в контексте клиентского вызова. В фоновых и регламентных заданиях возвращает пустое значение.'
    },
    "ПолучитьОбновлениеКонфигурацииБазыДанных": {
      name: 'ПолучитьОбновлениеКонфигурацииБазыДанных',
      name_en: 'GetDataBaseConfigurationUpdate',
      description: 'Получает информацию о состоянии фонового обновления конфигурации базы данных.'
    },
    "ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы": {
      name: 'ПолучитьОбновлениеПредопределенныхДанныхИнформационнойБазы',
      name_en: 'GetInfoBasePredefinedData',
      description: 'Возвращает текущее установленное в информационной базе значение режима обновления предопределенных данных.'
    },
    "ПолучитьОбщийМакет": {
      name: 'ПолучитьОбщийМакет',
      name_en: 'GetCommonTemplate',
      description: 'Получает один из общих макетов конфигурации.',
      signature: {
        default: {
          СтрокаПараметров: '(ОбщийМакет: Строка): ТабличныйДокумент',
          Параметры: {
            ОбщийМакет: 'Имя общего макета, как оно задано в конфигураторе, или объект описания метаданного общего макета.'
          }
        }
      }
    },
    "ПолучитьОбщуюФорму": {
      name: 'ПолучитьОбщуюФорму',
      name_en: 'GetCommonForm',
      description: 'Получает общую форму.',
      signature: {
        default: {
          СтрокаПараметров: '(Форма?: Строка, Владелец?: Форма, КлючУникальности?: Произвольный): Форма',
          Параметры: {
            Форма: 'Имя формы, как оно задано в конфигураторе, или объект описания метаданного требуемой формы. Если параметр не указан, то используется основная форма, заданная в конфигураторе.',
            Владелец: 'Объект, который будет являться владельцем открываемой формы.',
            КлючУникальности: 'В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм.  При поиске учитываются значения свойств открытых форм соответствующим значениям параметров метода. Если найдена открытая форма (по совпадению всех параметров), то она будет возвращена вместо новой формы.  Если из некой формы (один и тот же владелец) требуется открывать новые экземпляры другой формы, то при каждом вызове метода значение данного параметра должно быть уникально (в рамках соответствующих значений свойств открытых форм). Значение параметра присваивается свойству открываемой формы КлючУникальности. Следует учитывать, что при получении формы из "объекта" система получает форму для конкретного экземпляра объекта с учетом совокупности переданных параметров, в то время как для "ссылки" всегда существует только один объект в базе данных и форма получается одна (для одинаковой совокупности параметров).'
          }
        }
      }
    },
    "ПолучитьОкна": {
      name: 'ПолучитьОкна',
      name_en: 'GetWindows',
      description: 'Получает окна приложения.'
    },
    "ПолучитьОперативнуюОтметкуВремени": {
      name: 'ПолучитьОперативнуюОтметкуВремени',
      name_en: 'GetRealTimeTimestamp',
      description: 'Получает оперативную отметку времени.'
    },
    "ПолучитьПараметрыФункциональныхОпцийИнтерфейса": {
      name: 'ПолучитьПараметрыФункциональныхОпцийИнтерфейса',
      name_en: 'GetInterfaceFunctionalOptionParameters',
      description: 'Получает параметры функциональных опций командного интерфейса.'
    },
    "ПолучитьПолноеИмяПредопределенногоЗначения": {
      name: 'ПолучитьПолноеИмяПредопределенногоЗначения',
      name_en: 'GetPredefinedValueFullName',
      description: 'Выполняет действие, обратное методу ПредопределенноеЗначение. Возвращает полное имя предопределенного значения или значения системного перечисления.',
      signature: {
        default: {
          СтрокаПараметров: '(ПредопределенноеЗначение: Произвольный): Строка',
          Параметры: {
            ПредопределенноеЗначение: 'Ссылка на предопределенный элемент из предопределенных данных, прикладных перечислений, точек маршрута бизнес-процессов или значение системного перечисления.'
          }
        }
      }
    },
    "ПолучитьПредставленияНавигационныхСсылок": {
      name: 'ПолучитьПредставленияНавигационныхСсылок',
      name_en: 'GetURLsPresentations',
      description: 'Получает массив представлений ссылок ПредставлениеНавигационнойСсылки.',
      signature: {
        default: {
          СтрокаПараметров: '(МассивСсылок: Массив): Массив',
          Параметры: {
            МассивСсылок: 'Массив ссылок. Пример ссылки: e1cib/data/Справочник.Товары?ref="ae92005056c0000811dcf650677a5575" указывает на элемент справочника Товары с наименованием "1С:Деньги".'
          }
        }
      }
    },
    "ПолучитьПроверкуСложностиПаролейПользователей": {
      name: 'ПолучитьПроверкуСложностиПаролейПользователей',
      name_en: 'GetUserPasswordStrengthCheck',
      description: 'Проверяет, установлены ли ограничения на сложность паролей пользователей информационной базы.'
    },
    "ПолучитьРазделительПути": {
      name: 'ПолучитьРазделительПути',
      name_en: 'GetPathSeparator',
      description: 'Получает значение разделителя пути, используемого в операционной системе, в контексте которой выполняется вызов.'
    },
    "ПолучитьРазделительПутиКлиента": {
      name: 'ПолучитьРазделительПутиКлиента',
      name_en: 'GetClientPathSeparator',
      description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает клиентское приложение.'
    },
    "ПолучитьРазделительПутиСервера": {
      name: 'ПолучитьРазделительПутиСервера',
      name_en: 'GetServerPathSeparator',
      description: 'Получает значение разделителя пути, используемого в операционной системе, в которой работает рабочий процесс сервера.'
    },
    "ПолучитьСеансыИнформационнойБазы": {
      name: 'ПолучитьСеансыИнформационнойБазы',
      name_en: 'GetInfoBaseSessions',
      description: 'Получает список сеансов текущей информационой базы.'
    },
    "ПолучитьСкоростьКлиентскогоСоединения": {
      name: 'ПолучитьСкоростьКлиентскогоСоединения',
      name_en: 'GetClientConnectionSpeed',
      description: 'Возвращает скорость клиентского соединения.'
    },
    "ПолучитьСоединенияИнформационнойБазы": {
      name: 'ПолучитьСоединенияИнформационнойБазы',
      name_en: 'GetInfoBaseConnections',
      description: 'Получает массив описаний соединений с текущей информационной базой.'
    },
    "ПолучитьСообщенияПользователю": {
      name: 'ПолучитьСообщенияПользователю',
      name_en: 'GetUserMessages',
      description: 'Получает массив объектов СообщениеПользователю, которые еще не были выведены пользователю. Такое может происходить при работе в регламентных заданиях, на стороне сервера или в Web-сервисах.',
      signature: {
        default: {
          СтрокаПараметров: '(УдалятьПолученные?: Булево): ФиксированныйМассив',
          Параметры: {
            УдалятьПолученные: 'Признак необходимости удаления полученных сообщений из списка. Истина - удалять. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "ПолучитьСоответствиеОбъектаИФормы": {
      name: 'ПолучитьСоответствиеОбъектаИФормы',
      name_en: 'GetObjectAndFormConformity',
      description: 'Получает информацию об идентификаторе формы и имени атрибута формы, связанного с передаваемым в качестве аргумента функции объектом.',
      signature: {
        default: {
          СтрокаПараметров: '(Объект: СправочникОбъект.<Имя справочника>): Структура',
          Параметры: {
            Объект: 'Прикладной объект, преобразованный из универсального объекта в значение, для которого необходимо получить соответствие с именем реквизита формы.'
          }
        }
      }
    },
    "ПолучитьСоставСтандартногоИнтерфейсаOData": {
      name: 'ПолучитьСоставСтандартногоИнтерфейсаOData',
      name_en: 'GetStandardODataInterfaceContent',
      description: 'Возвращает массив объектов метаданных, включенных в стандартный OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты'
    },
    "ПолучитьСтруктуруХраненияБазыДанных": {
      name: 'ПолучитьСтруктуруХраненияБазыДанных',
      name_en: 'GetDBStorageStructureInfo',
      description: 'Получает информацию о структуре таблиц базы данных для переданных в качестве параметра массива имен объектов метаданных или массива объектов метаданных для административных действий с ней. Если параметр не используется, то возвращаемая таблица значений содержит информацию о структуре таблиц базы данных всех объектов метаданных.',
      signature: {
        default: {
          СтрокаПараметров: '(ОбъектыМетаданных?: Массив, ИменаБазыДанных?: Булево): ТаблицаЗначений',
          Параметры: {
            ОбъектыМетаданных: 'Массив имен объектов метаданных или массив объектов метаданных, для которых требуется получить структуру таблиц базы данных.',
            ИменаБазыДанных: 'Определяет, в каких терминах выдается информация о структуре хранения. Истина - в терминах СУБД. Ложь - в терминах модели базы данных 1С:Предприятия. Значение по умолчанию: Ложь.'
          }
        }
      }
    },
    "ПолучитьТекущийСеансИнформационнойБазы": {
      name: 'ПолучитьТекущийСеансИнформационнойБазы',
      name_en: 'GetCurrentInfoBaseSession',
      description: 'Возвращает текущий сеанс информационной базы.'
    },
    "ПолучитьФайл": {
      name: 'ПолучитьФайл',
      name_en: 'GetFile',
      description: 'Получает файл и сохраняет его в локальную файловую систему пользователя.  По умолчанию метод исполняется в интерактивном режиме, то есть когда будет выдано диалоговое окно, позволяющее указать действие с полученным файлом - запустить его или сохранить по указанному пользователем расположению.',
      signature: {
        default: {
          СтрокаПараметров: '(Адрес: Строка, ИмяФайла?: Строка, Интерактивно?: Булево): Булево',
          Параметры: {
            Адрес: 'Расположение данных во временном хранилище или в информационной базе.',
            ИмяФайла: 'Путь к файлу, в который будут сохранены данные из информационной базы.  В неинтерактивном режиме необходимо указать значение параметра, иначе будет вызвано исключение.  В интерактивном режиме может быть не задан. Значение по умолчанию: Пустая строка.',
            Интерактивно: 'Истина - режим, в котором пользователю показывается диалог, в котором он может выбрать действие с получаемым файлом: запустить его или сохранить по выбранному расположению. В веб-клиенте параметр должен быть равен Истина. В противном случае будет сгенерировано сообщение об ошибке. Значение по умолчанию: Истина.'
          }
        }
      }
    },
    "ПолучитьФайлы": {
      name: 'ПолучитьФайлы',
      name_en: 'GetFiles',
      description: 'Получает набор файлов и сохраняет их в локальную файловую систему пользователя.',
      signature: {
        default: {
          СтрокаПараметров: '(ПолучаемыеФайлы: Массив, ПолученныеФайлы?: Массив, РасположениеФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево): Булево',
          Параметры: {
            ПолучаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище или в информационной базе;  - Имя - это локальный путь, по которому должен быть расположен получаемый файл. Это может быть либо полный путь, либо часть пути, которая будет объединена со значением параметра <РасположениеФайлов>. Это также может быть имя файла или имя каталога (каталогов) + имя файла.',
            ПолученныеФайлы: 'Массив объектов типа ОписаниеПереданногоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище или в информационной базе;  - Имя - это локальный путь, по которому должен быть расположен получаемый файл.',
            РасположениеФайлов: 'Определяет общее расположение помещаемых файлов в локальной файловой системе. Может быть задан строкой либо заранее подготовленным диалогом выбора файлов в режиме выбора каталога или сохранения файлов.',
            Интерактивно: 'Истина - задан интерактивный режим, в котором пользователю показывается диалог, в котором он может выбрать локальное расположение файлов. Ложь - на сервер передается список файлов, описанный в параметре <Файлы>. В интерактивном режиме строка, переданная в параметре <Диалог/Путь> рассматривается как начальное значения для выбора пути. Значение по умолчанию: Истина.'
          }
        }
      }
    },
    "ПолучитьФорму": {
      name: 'ПолучитьФорму',
      name_en: 'GetForm',
      description: 'Получает форму или управляемую форму. Перед получением осуществляется поиск уже открытой такой же формы.  Поиск осуществляется по типу формы, значениям ключевых параметров формы, владельцу формы, пользовательскому ключу уникальности. Если в параметре Уникальность передано значение Истина, то поиск уже открытых форм не осуществляется.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФормы: Строка, Параметры?: Структура, Владелец?: Произвольный, Уникальность?: Произвольный, Окно?: ОкноКлиентскогоПриложения, НавигационнаяСсылка?: Строка): Форма',
          Параметры: {
            ИмяФормы: 'Имя формы. Образуется как полный путь к объекту метаданных Форма (например, "Справочник.Контрагенты.Форма.ФормаОбъекта", "ОбщаяФорма.ФормаСохраненияФайла") или как полный путь к прикладному объекту, дополненный именем формы по умолчанию (например, "Справочник.Товары.ФормаВыбора"). Имена форм по умолчанию:   - ФормаОбъекта (ObjectForm) - форма объекта по умолчанию;  - ФормаГруппы (FolderForm) - форма группы по умолчанию;  - ФормаЗаписи (RecordForm) - форма записи регистра по умолчанию;  - ФормаСписка (ListForm) - форма списка по умолчанию;  - ФормаВыбора (ChoiceForm) - форма выбора по умолчанию;  - ФормаВыбораГруппы (FolderChoiceForm) - форма выбора группы по умолчанию;  - ФормаКонстант (ConstantsForm) - форма констант по умолчанию для обычного режима, установленная как форма констант для конфигурации;  - Форма (Form) - форма константы, отчета и обработки по умолчанию;  - ОбщаяФорма (CommonForm) - общая форма;  - ФормаНастроек (SettingsForm) - форма настроек отчета по умолчанию;  - ФормаЗагрузки (LoadForm) - форма загрузки настроек;  - ФормаСохранения (SaveForm) - форма сохранения настроек;  - ФормаВарианта (VariantForm) - форма редактирования варианта отчета;  - ФормаПоиска (SearchForm) - форма полнотекстового поиска в данных. Например, для получения общей формы "ОбщиеНастройки" следует в модуле написать код: Форма = ПолучитьФорму("ОбщаяФорма.ОбщиеНастройки"); Для внешних отчетов и обработок имя формы задается следующим образом:   - ВнешнийОтчет.<имя отчета>.Форма.<имя формы>;  - ВнешнийОтчет.<имя отчета>.<имя стандартной формы>;  - ВнешняяОбработка.<имя обработки>.Форма.<имя формы>;  - ВнешняяОбработка.<имя обработки>.<имя стандартной формы>. При этом внешний отчет или обработка должны быть предварительно зарегистрированы в системе.',
            Параметры: 'Параметры формы. Ключ структуры - имя параметра, а значение - значение параметра формы. Имя элемента должно совпадать с именем параметра структуры. П =НовыйСтруктура("Ключ", Поставщик); Форма = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", П); Форма.Открыть();',
            Владелец: 'Владелец формы - форма или элемент управления другой формы.',
            Уникальность: 'В данном параметре может быть задан некоторый ключ, значение которого будет использоваться для поиска уже открытых форм. Если будет найдена форма с таким же ключом уникальности, вместо открытия новой формы будет активизирована найденная форма. Ложь - искать форму с ключом уникальности по умолчанию, Истина - не искать форму вообще, любое другое значение устанавливает ключ уникальности, по которому будет произведен поиск. Значение по умолчанию: Ложь.',
            Окно: 'Окно приложения, в котором будет открыта форма.  Применимо только для управляемой формы. Окном может быть только основное окно приложения или вспомогательное окно формы. Если указан тип ВариантОткрытияОкна, окно формы будет создано согласно выбранному варианту.',
            НавигационнаяСсылка: 'Если содержит значение, отличное от Неопределено, то это значение присваивается свойству НавигационнаяСсылка формы, полученной в результате вызова данного метода, и свойство АвтоНавигационнаяСсылка этой формы устанавливается в Ложь. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "ПолучитьФункциональнуюОпцию": {
      name: 'ПолучитьФункциональнуюОпцию',
      name_en: 'GetFunctionalOption',
      description: 'Получает значения функциональной опции.',
      signature: {
        default: {
          СтрокаПараметров: '(Имя: Строка, Параметры?: Структура): Произвольный',
          Параметры: {
            Имя: 'Имя функциональной опции в соответствии с установленными языковыми настройками.',
            Параметры: 'Параметры функциональных опций, необходимые для получения значения функциональной опции. Имеет смысл только для функциональных опций, источниками значения которых является реквизит справочника или ресурс регистра сведений. Для опций констант этот параметр игнорируется. Ключ элемента структуры задает имя параметра, которое должно соответствовать имени одному из объектов метаданных типа ОбъектМетаданных: ПараметрФункциональныхОпций. Значение элемента структуры должно содержать значение параметра.'
          }
        }
      }
    },
    "ПолучитьФункциональнуюОпциюИнтерфейса": {
      name: 'ПолучитьФункциональнуюОпциюИнтерфейса',
      name_en: 'GetInterfaceFunctionalOption',
      description: 'Получает значение функциональной опции применительно к командному интерфейсу.  Для получения значения опции используются параметры, установленные с помощью метода УстановитьПараметрыФункциональныхОпцийИнтерфейса.',
      signature: {
        default: {
          СтрокаПараметров: '(Имя: Строка): Произвольный',
          Параметры: {
            Имя: 'Имя функциональной опции.'
          }
        }
      }
    },
    "ПолучитьЧасовойПоясИнформационнойБазы": {
      name: 'ПолучитьЧасовойПоясИнформационнойБазы',
      name_en: 'GetInfoBaseTimeZone',
      description: 'Получает строку идентификатора часового пояса информационной базы.'
    },
    "ПользователиОС": {
      name: 'ПользователиОС',
      name_en: 'OSUsers',
      description: 'Предоставляет доступ к информации о доменах и пользователях операционной системы.'
    },
    "ПоместитьВоВременноеХранилище": {
      name: 'ПоместитьВоВременноеХранилище',
      name_en: 'PutToTempStorage',
      description: 'Сохраняет сериализуемое значение во временное хранилище.',
      signature: {
        default: {
          СтрокаПараметров: '(Данные: Произвольный, Адрес?: УникальныйИдентификатор): Строка',
          Параметры: {
            Данные: 'Данные, которые необходимо поместить во временное хранилище.',
            Адрес: 'Уникальный идентификатор формы, во временное хранилище которой надо поместить данные и вернуть новый адрес. Или адрес во временном хранилище, по которому надо поместить данные. Адрес должен быть получен ранее с помощью данного метода.  В случае, если передается УникальныйИдентификатор формы или адрес в хранилище, то значение будет автоматически удалено после закрытия этой формы. Если передан УникальныйИдентификатор, не являющийся уникальным идентификатором формы, то значение будет удалено после завершения сеанса пользователя. Если параметр не указан, помещенное значение будет удалено после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
          }
        }
      }
    },
    "ПоместитьФайл": {
      name: 'ПоместитьФайл',
      name_en: 'PutFile',
      description: 'Помещает файл из локальной файловой системы во временное хранилище.',
      signature: {
        default: {
          СтрокаПараметров: '(Адрес?: Строка, НачальноеИмяФайла?: Строка, ВыбранноеИмяФайла?: Строка, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор): Булево',
          Параметры: {
            Адрес: 'Адрес во временном хранилище, по которому должны быть помещены данные. Если значение параметра не задано или является пустой строкой, то будет создан новый файл. Расположение нового файла возвращается в данном параметре.',
            НачальноеИмяФайла: 'Путь к файлу, данные из которого будут помещены во временное хранилище. Если параметр <Интерактивно> = Истина, то отображается диалог выбора файла и выбранный в диалоге путь возвращается в параметре <ВыбранноеИмяФайла>.',
            ВыбранноеИмяФайла: 'В параметре возвращается путь к файлу, указанный в диалоге выбора файла. Для неинтерактивного режима выбранное имя файла соответствует начальному имени файла. В веб-клиенте значение параметра зависит от типа браузера. Для FireFox 3 в параметре возвращается только имя файла без пути. Для Internet Explorer возвращаемое значение зависит от настройки текущей зоны. Подробности: http://msdn.microsoft.com/en-us/library/ms535128(VS.85).aspx.',
            Интерактивно: 'Указывает использование интерактивного режима, при котором отображается диалог выбора файла. Этот файл будет помещен по указанному в параметре <Адрес> адресу во временное хранилище или по новому адресу, если второй параметр метода опущен.  Если значение параметра Истина, то метод отобразит стандартное диалоговое окно выбора файла, в котором можно выбрать файл для помещения в хранилище. В этом случае выбранный путь возвращается в параметре <Выбранное имя файла>. В веб-клиенте параметр должен быть равен Истина. В противном случае будет сгенерировано сообщение об ошибке. Значение по умолчанию: Истина.',
            УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы.  Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, помещенное значение будет удалено, после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
          }
        }
      }
    },
    "ПоместитьФайлы": {
      name: 'ПоместитьФайлы',
      name_en: 'PutFiles',
      description: 'Помещает набор файлов из локальной файловой системы во временное хранилище.',
      signature: {
        default: {
          СтрокаПараметров: '(ПомещаемыеФайлы?: Строка, ПомещенныеФайлы?: Массив, НаборПомещаемыхФайлов?: ДиалогВыбораФайла, Интерактивно?: Булево, УникальныйИдентификаторФормы?: УникальныйИдентификатор): Булево',
          Параметры: {
            ПомещаемыеФайлы: 'Массив объектов типа ОписаниеПередаваемогоФайла. Каждый объект описывает получаемый файл:   - Хранение - расположение данных во временном хранилище;  - Имя - это локальный путь, по которому должен быть получен файл. Массив может быть заполнен полностью, в этом случае известен набор помещаемых файлов и адреса, по которым они должны быть сохранены. Массив может быть заполнен частично, у элементов массива заполнены только имена. В этом случае, набор помещаемых файлов определен, а места хранения неизвестны. Файлы будут размещены в новых временных хранилищах. Массив может быть не заполнен. В этом случае набор помещаемых файлов определяется по значениям остальных параметров метода (поиском по маске либо интерактивным выбором).',
            ПомещенныеФайлы: 'Массив объектов типа ОписаниеПереданногоФайла. Каждый объект описывает помещенный файл: Хранение - расположение данных во временном хранилище; Имя - это локальный путь, по которому получен файл.',
            НаборПомещаемыхФайлов: 'Определяет набор помещаемых файлов. Может быть задан строкой поиска для метода НайтиФайлы либо заранее подготовленным диалогом выбора файлов в режиме открытия файлов. Если параметр определен, то параметр <ПомещаемыеФайлы> должен быть не определен либо быть пустым массивом.',
            Интерактивно: 'Указывает использование интерактивного режима, при котором пользователю показывается диалог, в котором он может выбрать набор помещаемых файлов.',
            УникальныйИдентификаторФормы: 'Уникальный идентификатор формы, который можно получить с помощью свойства УникальныйИдентификатор управляемой формы.  Файл помещается во временное хранилище и автоматически удаляется после удаления объекта формы. Если параметр не указан, помещенное значение будет удалено, после очередного запроса сервера из общего модуля, при контекстном и неконтекстном серверном вызове из формы, при серверном вызове из модуля команды или при получении формы.'
          }
        }
      }
    },
    "Прав": {
      name: 'Прав',
      name_en: 'Right',
      description: 'Выбирает последние справа символы строки.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, ЧислоСимволов: Число): Строка',
          Параметры: {
            Строка: 'Исходная строка.',
            ЧислоСимволов: 'Количество выбираемых символов.'
          }
        }
      }
    },
    "ПравоДоступа": {
      name: 'ПравоДоступа',
      name_en: 'AccessRight',
      description: 'Показывает установку права доступа к объекту метаданных для текущего пользователя на момент выполнения текущей строчки кода. Вызов метода всегда требует административных прав, если явно указан третий параметр - Пользователь/Роль, права которого проверяются. Если пользователь не указан, то проверяются права текущего пользователя, и для этого наличие административных прав не требуется.  Если пользователь задан явно, то выдаются права явно заданного пользователя в соответствии с метаданными.',
      signature: {
        default: {
          СтрокаПараметров: '(Право: Строка, ОбъектМетаданных: ОбъектМетаданных: Куб, Пользователь_Роль?: ПользовательИнформационнойБазы, СтандартныйРеквизитСтандартнаяТабличнаяЧасть?: Строка): Булево',
          Параметры: {
            Право: 'Название права доступа. Могут быть использованы следующие значения:   - Чтение (Read) - чтение;  - Добавление (Insert) - добавление;  - Изменение (Update) - изменение;  - Удаление (Delete) - удаление;  - Проведение (Posting) - проведение документов;  - ОтменаПроведения (UndoPosting) - отмена проведения документов;  - Просмотр (View) - просмотр;  - ИнтерактивноеДобавление (InteractiveInsert) - интерактивное добавление;  - Редактирование (Edit) - редактирование;  - ИнтерактивнаяПометкаУдаления (InteractiveSetDeletionMark) - интерактивная пометка на удаление;  - ИнтерактивноеСнятиеПометкиУдаления (InteractiveClearDeletionMark) - интерактивное снятие пометки на удаление;  - ИнтерактивноеУдалениеПомеченных (InteractiveDeleteMarked) - интерактивное удаление помеченных объектов;  - ИнтерактивноеПроведение (InteractivePosting) - интерактивное проведение;  - ИнтерактивноеПроведениеНеОперативное (InteractivePostingRegular) - интерактивное проведение (стандартными командами форм) документа в неоперативном режиме;  - ИнтерактивнаяОтменаПроведения (InteractiveUndoPosting) - интерактивная отмена проведения;  - ИнтерактивноеИзменениеПроведенных (InteractiveChangeOfPosted) - интерактивное редактирование проведенного документа. Если право не установлено, то пользователь не может проведенный документ удалить, установить пометку удаления, перепровести или сделать непроведенным. Форма такого документа открывается в режиме просмотра;  - ВводПоСтроке (InputByString) - использование режима ввода по строке;  - УправлениеИтогами (TotalsControl) - управление итогами регистра бухгалтерии и регистра накопления (установка периода, по который рассчитаны итоги, и пересчет итогов);  - Использование (Use) - использование;  - ИнтерактивноеУдаление (InteractiveDelete) - интерактивное непосредственное удаление;  - Администрирование (Administration) - администрирование информационной базы; требуется наличия права "Администрирование данных";  - АдминистрированиеДанных (DataAdministration) - право на административные действия над данными;  - МонопольныйРежим (ExclusiveMode) - использование монопольного режима;  - АктивныеПользователи (ActiveUsers) - просмотр списка активных пользователей;  - ЖурналРегистрации (EventLog) - журнал регистрации;  - ВнешнееСоединение (ExternalConnection) - внешнее соединение;  - Automation (Automation) - использование automation;  - ИнтерактивноеОткрытиеВнешнихОбработок (InteractiveOpenExtDataProcessors) - интерактивное открытие внешних обработок;  - ИнтерактивноеОткрытиеВнешнихОтчетов (InteractiveOpenExtReports) - интерактивное открытие внешних отчетов;  - Получение (Get) - получение значения, не хранящегося в базе данных;  - Установка (Set) - установка значения, не сохраняемого в базе данных;  - ИнтерактивнаяАктивация (InteractiveActivate) - интерактивная активация;  - Старт (Start) - старт бизнес-процесса;  - ИнтерактивныйСтарт (InteractiveStart) - интерактивный старт бизнес-процесса;  - Выполнение (Execute) - выполнение задачи;  - ИнтерактивноеВыполнение (InteractiveExecute) - интерактивное выполнение задачи;  - Вывод (Output) - вывод на печать, запись и копирование в буфер обмена;  - ОбновлениеКонфигурацииБазыДанных (UpdateDataBaseConfiguration) - обновление конфигурации базы данных;  - ТонкийКлиент (ThinClient) - право запуска тонкого клиента;  - ВебКлиент (WebClient) - право запуска веб-клиента;  - ТолстыйКлиент (ThickClient) - право запуска толстого клиента;  - РежимВсеФункции (AllFunctionsMode) - право на использования режима "Все функции";  - СохранениеДанныхПользователя (SaveUserData) - право на сохранение данных пользователя (настроек, избранного, истории);  - ИзменениеСтандартнойАутентификации (StandardAuthenticationChange) - пользователь имеет право изменять свои сохраненные параметры стандартной аутентификации внешнего источника данных;  - ИзменениеСтандартнойАутентификацииСеанса (SessionStandardAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса;  - ИзменениеАутентификацииОССеанса (SessionOSAuthenticationChange) - пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса и текущего пользователя;  - ИнтерактивноеУдалениеПредопределенныхДанных (InteractiveDeletePredefinedData) - интерактивное удаление предопределенных данных;  - ИнтерактивнаяПометкаУдаленияПредопределенныхДанных (InteractiveSetDeletionMarkPredefinedData) - интерактивная пометка предопределенных данных;  - ИнтерактивноеСнятиеПометкиУдаленияПредопределенных (InteractiveClearDeletionMarkPredefinedData) - интерактивное снятие пометки предопределенных данных;  - ИнтерактивноеУдалениеПомеченныхПредопределенныхДан (InteractiveDeleteMarkedPredefinedData) - интерактивное удаление помеченных предопределенных данных;  - АдминистрированиеРасширенийКонфигурации (ConfigExtensionsAdministration) - право на администрирование расширений конфигурации.',
            ОбъектМетаданных: 'Объект метаданных.',
            Пользователь_Роль: 'Указывает пользователя или роль, для которых нужно определить доступность права. При этом возвращается значение права так, как оно определено в конфигурации.',
            СтандартныйРеквизитСтандартнаяТабличнаяЧасть: 'Необязательное имя стандартного реквизита, имя стандартного реквизита стандартной табличной части или имя стандартной табличной части.  Для стандартного реквизита стандартной табличной части, имя табличной части указывается перед точкой до имени реквизита. Например: "ВидыСубконто.ВидСубконто".'
          }
        }
      }
    },
    "ПредопределенноеЗначение": {
      name: 'ПредопределенноеЗначение',
      name_en: 'PredefinedValue',
      description: 'Возвращает ссылку на предопределенный элемент из предопределенных данных, прикладных перечислений и точек маршрута бизнес-процессов, а также значения системных перечислений.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПредопределенногоЗначения: Строка)',
          Параметры: {
            ИмяПредопределенногоЗначения: 'Содержит полный путь до предопределенного значения, включая имя самого значения. Например, "ПланСчетов.Основной.Счет41". Синтаксис описания предопределенного значения совпадает с синтаксисом оператора ЗНАЧЕНИЕ языка запросов: <Тип предопределенного значения>.<Имя объекта метаданных>.<Значение>. Тип предопределенного значения> может быть:    - Справочник (Catalog);  - ПланВидовХарактеристик (ChartOfCharacteristicTypes);  - ПланСчетов (ChartOfAccounts);  - ПланВидовРасчета (ChartOfCalculationTypes);  - Документ (Document) - только пустая ссылка;  - Перечисление (Enum);  - БизнесПроцесс (BusinessProcess) - только пустая ссылка и получение точек бизнес процесса;  - Задача (Task) - только пустая ссылка. В качестве <Имя объекта метаданных> указывается имя объекта метаданных, как оно задано в конфигураторе.  Для перечислений, определенных в конфигурации, <Значение> указывается как имя соответствующего объекта метаданных типа ЗначениеПеречисления. Для всех остальных типов предопределенных значений <Значение> указывается как имя предопределенного элемента данных, как оно указано в конфигураторе, или ПустаяСсылка для указания пустой ссылки. Для точек маршрутов бизнес-процессов имя предопределенного значения имеет вид: БизнесПроцесс.<Имя объекта метаданных>.ТочкаМаршрута.<Имя точки маршрута>. Также метод может быть использован для получения значения системного перечисления. В этом случае параметр формируется как: <ИмяСистемногоПеречисления>.<ИмяЗначенияСистемногоПеречисления>.'
          }
        }
      }
    },
    "ПредставлениеКодаЛокализации": {
      name: 'ПредставлениеКодаЛокализации',
      name_en: 'LocaleCodePresentation',
      description: 'Локализованное наименование языка с заданным идентификатором.',
      signature: {
        default: {
          СтрокаПараметров: '(КодЛокализации: Строка): Строка',
          Параметры: {
            КодЛокализации: 'Код локализации, для которого должно быть получено представление.'
          }
        }
      }
    },
    "ПредставлениеПериода": {
      name: 'ПредставлениеПериода',
      name_en: 'PeriodPresentation',
      description: 'Формирует внешнее представление периода, заданного датами начала и окончания периода.',
      signature: {
        default: {
          СтрокаПараметров: '(ДатаНачалаПериода: Дата, ДатаОкончанияПериода: Дата, ФорматнаяСтрока?: Строка): Строка',
          Параметры: {
            ДатаНачалаПериода: 'Дата начала периода.',
            ДатаОкончанияПериода: 'Дата окончания периода.',
            ФорматнаяСтрока: 'Определяет способ форматирования периода. Может содержать следующие параметры:   - Л/L - код локализации. Если не указан, берется код локализации по умолчанию. Если система не поддерживает форматирование периода с указанной локализацией, генерируется исключительная ситуация.  - ФП/FP - признак "финансовый период". Влияет на форматирование в случае, если указанный датами период соответствует первому полугодию или первым 9 месяцам года. Если не указан, признак не установлен. Коды региональных установок, использование которых допустимо в форматной строке: Код Язык en_US Английский  az Азербайджанский be_BY Белорусский bg_BG Болгарский hu Венгерский vi_VN Вьетнамский ka_GE Грузинский kk_KZ Казахский ky_KY Киргизский lv_LV Латышский lt_LT Литовский de_DE Немецкий pl_PL Польский ro_RO Румынский ru_RU Русский tr_TR Турецкий tk Туркменский uk_UA Украинский fi_FI Финский fr_CA Французский et_EE Эстонский    Пример форматной строки: Л=en_US; ФП=Истина Значение по умолчанию: Пустая строка.'
          }
        }
      }
    },
    "ПредставлениеПрава": {
      name: 'ПредставлениеПрава',
      name_en: 'RightPresentation',
      description: 'Получает представление права по имени права.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПрава?: Строка): Строка',
          Параметры: {
            ИмяПрава: 'Содержит имя права, для которого нужно получить представление.'
          }
        }
      }
    },
    "ПредставлениеПриложения": {
      name: 'ПредставлениеПриложения',
      name_en: 'ApplicationPresentation',
      description: 'Позволяет получить локализованное название приложения.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяПриложения: Строка): Строка',
          Параметры: {
            ИмяПриложения: 'Строка, идентифицирующая приложение. Допустимые имена:   - 1CV8 - идентификатор приложения 1С:Предприятие в режиме запуска "Толстый клиент";  - 1CV8C - идентификатор приложения 1С:Предприятие в режиме запуска "Тонкий клиент";  - WebClient - идентификатор приложения 1С:Предприятие в режиме запуска "Веб-клиент";  - Designer - идентификатор приложения Конфигуратор;  - COMConnection - идентификатор сессии внешнего соединения 1С:Предприятия через COM;  - WSConnection - идентификатор сессии Web-сервиса;  - BackgroundJob - идентификатор сессии обработки заданий;  - SystemBackgroundJob - идентификатор системного фонового задания;  - SrvrConsole - идентификатор сессии консоли кластера;  - COMConsole - идентификатор административной сессии внешнего соединения;  - JobScheduler - идентификатор сессии планировщика заданий;  - Debugger - идентификатор сессии отладчика;  - OpenIDProvider - провайдер OpenID;  - RAS - идентификатор сервера администрирования.'
          }
        }
      }
    },
    "ПредставлениеСобытияЖурналаРегистрации": {
      name: 'ПредставлениеСобытияЖурналаРегистрации',
      name_en: 'EventLogEventPresentation',
      description: 'Позволяет получить локализованное название события.',
      signature: {
        default: {
          СтрокаПараметров: '(ИдентификаторСобытия: Строка): Строка',
          Параметры: {
            ИдентификаторСобытия: 'Строка, идентифицирующая событие. Допустимые системные имена событий:    - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.'
          }
        }
      }
    },
    "ПредставлениеЧасовогоПояса": {
      name: 'ПредставлениеЧасовогоПояса',
      name_en: 'TimeZonePresentation',
      description: 'Возвращает локализованное наименование часового пояса с заданным идентификатором.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧасовойПояс: Строка): Строка',
          Параметры: {
            ЧасовойПояс: 'Идентификатор часового пояса. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
          }
        }
      }
    },
    "Предупреждение": {
      name: 'Предупреждение',
      name_en: 'DoMessageBox',
      description: 'Выводит на экран окно предупреждения.',
      signature: {
        default: {
          СтрокаПараметров: '(ТекстПредупреждения: Строка, Таймаут?: Число, Заголовок?: Строка)',
          Параметры: {
            ТекстПредупреждения: 'Текст предупреждения.',
            Таймаут: 'Интервал времени в секундах, в течение которого система будет ожидать ответа пользователя. По истечении интервала окно предупреждения будет закрыто. Если параметр не указан, то время ожидания не ограничено. Значение по умолчанию: 0.',
            Заголовок: 'Содержит заголовок окна предупреждения.'
          }
        }
      }
    },
    "ПрекратитьРаботуСистемы": {
      name: 'ПрекратитьРаботуСистемы',
      name_en: 'Terminate',
      description: 'Завершает работу системы независимо от наличия модальных диалогов, открытых редактируемых форм документов и справочников и т.д. При этом не вызываются процедуры-обработчики событий завершения работы системы.',
      signature: {
        default: {
          СтрокаПараметров: '(ПерезапуститьПриЗавершении?: Булево, ДополнительныеПараметрыКоманднойСтроки?: Строка)',
          Параметры: {
            ПерезапуститьПриЗавершении: 'Указывает необходимость выполнения запуска нового сеанса с текущими установками после прекращения работы системы. Значение по умолчанию: Ложь.',
            ДополнительныеПараметрыКоманднойСтроки: 'Содержит дополнительные параметры, которые будут переданы новому сеансу. Если такие параметры уже есть среди текущих установок, переданные заменят текущие. Параметр указывается, если значение параметра <ПерезапуститьПриЗавершении>=Истина.'
          }
        }
      }
    },
    "ПривилегированныйРежим": {
      name: 'ПривилегированныйРежим',
      name_en: 'PrivilegedMode',
      description: 'Определяет включение привилегированного режима исполнения кода.'
    },
    "ПрочитатьJSON": {
      name: 'ПрочитатьJSON',
      name_en: 'ReadJSON',
      description: 'Считывает значение из JSON-текста или файла. JSON-текст должен быть корректным.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧтениеJSON: ЧтениеJSON, ПрочитатьВСоответствие?: Булево, ИменаСвойствСоЗначениямиДата?: Массив, ОжидаемыйФорматДаты?: ФорматДатыJSON, ИмяФункцииВосстановления?: Строка, МодульФункцииВосстановления?: УправляемаяФорма, ДополнительныеПараметрыФункцииВосстановления?: Произвольный, ИменаСвойствДляОбработкиВосстановления?: Массив, МаксимальнаяВложенность?: Число): Произвольный',
          Параметры: {
            ЧтениеJSON: 'Объект чтения JSON.',
            ПрочитатьВСоответствие: 'Если установлено Истина, чтение объекта JSON будет выполнено в Соответствие. Если установлено Ложь, объекты будут считываться в объект типа Структура. Примечание. При десериализации объектов JSON в структуру необходимо помнить о требованиях к ключам структуры. Если при десериализации объекта будет найдено имя свойства, недопустимое для ключа структуры, то будет вызвано исключение. Значение по умолчанию: Ложь.',
            ИменаСвойствСоЗначениямиДата: 'Массив, элементы которого содержат имена свойств JSON, для которых нужно вызывать восстановление даты из строки. Если имя свойства указано в этом параметре и указано в параметре ИменаСвойствДляОбработкиВосстановления, то для таких свойств восстановление осуществляется в функции восстановления. Если восстановление даты из значения свойства невозможно, то будет сгенерировано исключение. Значение по умолчанию: Неопределено.',
            ОжидаемыйФорматДаты: 'Ожидаемый формат даты при десериализации объекта в формате JSON. Если в результате десериализации значение не является строкой и имеет формат даты, отличный от ожидаемого, то будет вызвано исключение. Значение по умолчанию: ISO.',
            ИмяФункцииВосстановления: 'Данная функция вызывается при чтении каждого свойства и должна иметь следующие параметры:   - <Свойство> - значение типа Строка, указывается только при чтении объектов JSON,  - <Значение> - значение допустимого для сериализации типа,  - <ДополнительныеПараметры>. Возвращаемое значение - произвольного типа. Если данный параметр задан и не задан параметр МодульФункцииВосстановления, и наоборот, будет вызвано исключение. Если функция не установлена, то при вызове метода ПрочитатьJSON, параметр ИменаСвойствСоЗначениямиДата игнорируется. Значение по умолчанию: Неопределено.',
            МодульФункцииВосстановления: 'Указывает модуль, процедура которого будет использована для восстановления значения. В зависимости от типа параметра будет вызван соответствующий метод:   - УправляемаяФорма - будет вызван метод модуля указанной управляемой формы.  - КомандаКомандногоИнтерфейса - будет вызван метод модуля команды командного интерфейса.  - ОбщийМодуль - будет вызван метод неглобального общего модуля.  Значение по умолчанию: Неопределено.',
            ДополнительныеПараметрыФункцииВосстановления: 'Дополнительные параметры, которые будут переданы в функцию восстановления значений. Значение по умолчанию: Неопределено.',
            ИменаСвойствДляОбработкиВосстановления: 'Массив имен свойств JSON, для которых будет вызвана функция восстановления. Параметр игнорируется, если не установлен параметр ИмяФункцииВосстановления. Значение по умолчанию: Неопределено.',
            МаксимальнаяВложенность: 'Максимальный уровень вложенности объекта JSON. При превышении уровня вложенности будет сгенерировано исключение. Значение по умолчанию: 500.'
          }
        }
      }
    },
    "ПрочитатьXML": {
      name: 'ПрочитатьXML',
      name_en: 'ReadXML',
      description: 'Считывает значение в формате XML. Прочитаны могут быть значения тех типов, которые могут быть записаны методом ЗаписатьXML.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧтениеXML: ЧтениеXML, ТипЗначения?: Тип): Неопределено',
          Параметры: {
            ЧтениеXML: 'Объект, через который происходит чтение XML.',
            ТипЗначения: 'Тип значения, которое должно быть прочитано из XML. Если тип не указан, то будет произведена попытка определения типа значения непосредственно из представления XML.'
          }
        }
      }
    },
    "ПрочитатьДатуJSON": {
      name: 'ПрочитатьДатуJSON',
      name_en: 'ReadJSONDate',
      description: 'Выполняет преобразование строки, прочитанной в JSON-формате, в значение типа Дата.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, Формат: ФорматДатыJSON): Дата',
          Параметры: {
            Строка: 'Строка, которую требуется преобразовать в дату.',
            Формат: 'Формат, в котором представлена дата в строке, подлежащей преобразованию.'
          }
        }
      }
    },
    "ПустаяСтрока": {
      name: 'ПустаяСтрока',
      name_en: 'IsBlankString',
      description: 'Проверяет строку на наличие значащих символов.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Булево',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "РабочийКаталогДанныхПользователя": {
      name: 'РабочийКаталогДанныхПользователя',
      name_en: 'UserDataWorkDir',
      description: 'Предоставляет доступ к каталогу текущего пользователя данной информационной базы внутри стандартного каталога данных приложения.'
    },
    "РазблокироватьДанныеДляРедактирования": {
      name: 'РазблокироватьДанныеДляРедактирования',
      name_en: 'UnlockDataForEdit',
      description: 'Снимает блокировку объекта.  Если блокировка не была установлена от имени этой формы или без указания формы, никаких действий не выполняется.',
      signature: {
        default: {
          СтрокаПараметров: '(Ключ?: РегистрСведенийКлючЗаписи.<Имя регистра сведений>, ИдентификаторФормы?: УникальныйИдентификатор)',
          Параметры: {
            Ключ: 'Ссылка на объект, который должен быть разблокирован, или ключ записи независимого регистра сведений, которая должна быть разблокирована.  Если параметр не указан, то разблокируются все объекты, заблокированные с данным идентификатором формы или без указания идентификатора формы.',
            ИдентификаторФормы: 'Уникальный идентификатор формы.  Если параметр не указан, то разблокируются только те объекты, которые были заблокированы без указания идентификатора формы.'
          }
        }
      }
    },
    "РазделитьФайл": {
      name: 'РазделитьФайл',
      name_en: 'SplitFile',
      description: 'Разделяет указанный файл на несколько частей (файлов) заданного размера. Имя каждой части образуется из имени исходного файла с прибавлением ему расширения в виде порядкового номера, включая лидирующие нули. Например, для разделения файла на части, размером каждой равной одному мегабайту, следует выполнить следующий код: РазделитьФайл("C:\\Windows\\Temp\\Presentation.ppt", 1024 * 1024 ) В результате получим несколько файлов: C:\\Windows\\Temp\\Presentation.ppt.001 C:\\Windows\\Temp\\Presentation.ppt.002 ... C:\\Windows\\Temp\\Presentation.ppt.n-1 C:\\Windows\\Temp\\Presentation.ppt.n Все части, кроме последней, имеют размер 1 мегабайт. Размер последней части определяется как размер исходного файла минус сумма размеров всех предыдущих частей.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяФайла: Строка, РазмерЧасти: Число, Путь?: Строка): Массив',
          Параметры: {
            ИмяФайла: 'Имя файла, который требуется разделить на части.',
            РазмерЧасти: 'Размер одной части файла в байтах.',
            Путь: 'Путь к каталогу, в который будут помещены файлы, созданные в результате операции разделения. Если путь не указан, файлы будут помещены в каталог исходного файла.'
          }
        }
      }
    },
    "РазорватьСоединениеСВнешнимИсточникомДанных": {
      name: 'РазорватьСоединениеСВнешнимИсточникомДанных',
      name_en: 'DisconnectExternalDataSource',
      description: 'Выполняет разрыв соединения с внешним источником данных.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяВнешнегоИсточникаДанных?: Строка)',
          Параметры: {
            ИмяВнешнегоИсточникаДанных: 'Имя внешнего источника данных, с которым нужно разорвать соединение.'
          }
        }
      }
    },
    "РаскодироватьСтроку": {
      name: 'РаскодироватьСтроку',
      name_en: 'DecodeString',
      description: 'Раскодирует строку, закодированную в соответствии с указанным способом кодирования.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, СпособКодированияСтроки: СпособКодированияСтроки, КодировкаСтроки?: Строка)',
          Параметры: {
            Строка: 'Закодированная строка.',
            СпособКодированияСтроки: 'Способ, которым была закодирована исходная строка.',
            КодировкаСтроки: 'Кодировка, в которую была преобразована строка перед кодированием. Значение по умолчанию: UTF8.'
          }
        }
      }
    },
    "РольДоступна": {
      name: 'РольДоступна',
      name_en: 'IsInRole',
      description: 'Определяет доступность указанной роли текущему пользователю.',
      signature: {
        default: {
          СтрокаПараметров: '(Роль: Строка): Булево',
          Параметры: {
            Роль: 'Название роли как она задана в конфигураторе или объект описания метаданного роли.'
          }
        }
      }
    },
    "Секунда": {
      name: 'Секунда',
      name_en: 'Second',
      description: 'Определяет секунду в указанной дате.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "Сигнал": {
      name: 'Сигнал',
      name_en: 'Beep',
      description: 'Воспроизводит звуковой сигнал. Устройство, воспроизводящее звук, а также характер звукового сигнала зависят от программно-аппаратного состава компьютера и звуковых установок ОС.'
    },
    "Символ": {
      name: 'Символ',
      name_en: 'Char',
      description: 'Преобразует код символа в строку, содержащую символ.',
      signature: {
        default: {
          СтрокаПараметров: '(КодСимвола: Число): Строка',
          Параметры: {
            КодСимвола: 'Код получаемого символа. Код задается в соответствии с кодировкой Unicode.'
          }
        }
      }
    },
    "СкопироватьЖурналРегистрации": {
      name: 'СкопироватьЖурналРегистрации',
      name_en: 'CopyEventLog',
      description: 'Копирует часть журнала регистрации из одного файла в другой в соответствии с фильтром. Если файл уже существует, то он будет заменен. Если имя файла не указано, то используется журнал регистрации текущей информационной базы. Указание одного из параметров ИмяВходногоФайла или ИмяВыходногоФайла является обязательным.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяВходногоФайла?: Строка, ИмяВыходногоФайла?: Строка, Фильтр: Структура)',
          Параметры: {
            ИмяВходногоФайла: 'Строка, содержащая имя входного файла. Если параметр не указан, то используется файл журнала регистрации текущей информационной базы.',
            ИмяВыходногоФайла: 'Строка, содержащая имя выходного файла. Если не указана, то используется файл журнала регистрации текущей информационной базы.',
            Фильтр: 'Структура фильтра журнала регистрации:   - ДатаНачала (StartDate) - Дата; значение по умолчанию Неопределено;  - ДатаОкончания (EndDate) - Дата; значение по умолчанию Неопределено;  - Уровень (Level) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - ИмяПриложения (ApplicationName) - Строка или массив строк; значение по умолчанию Неопределено;  - Пользователь (User) - ПользовательИнформационнойБазы или массив таких объектов, или Строка. Объект ПользовательИнформационнойБазы и массив таких объектов можно получить из объекта МенеджерПользователейИнформационнойБазы. Также можно задавать пользователя по имени (строкой). Причем, пользователей, которые были удалены из информацонной базы можно задавать только таким способом. Пустая строка означает "пользователя по умолчанию", который используется, когда в информационной базе нет ни одного пользователя (от имени такого пользователя работают также фоновые задания). Если в фильтре задается массив пользователей, то можно перемешивать в нем значения обоих типов - строка и ПользовательИнформационнойБазы. Значение по умолчанию Неопределено;  - Компьютер (Computer) - Строка или массив строк; значение по умолчанию Неопределено;  - Событие (Event) - Строка или массив строк; значение по умолчанию Неопределено.    - Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию. Допустимые системные имена событий:  - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.   - Метаданные (Metadata - объект описания метаданного или их массив; значение по умолчанию Неопределено;  - Данные (Data) - значение, тип значения – ссылка на объект (СправочикСсылка и т.д.); значение по умолчанию Неопределено;  - ПредставлениеДанных (DataPresentation) - Строка;  - Комментарий (Comment) - Строка;  - СтатусТранзакции (TransactionStatus) - перечисление или массив перечислений; значение по умолчанию Неопределено;  - Транзакция (TransactionID) - идентификатор транзакции; Строка;  - Сеанс (Session) - номер сеанса пользователя. Число или массив чисел; значение по умолчанию Неопределено;  - РабочийСервер (ServerName) - Строка или массив строк; значение по умолчанию Неопределено;  - ОсновнойIPПорт (Port) - номер основного IP-порта рабочего процесса; Число или массив чисел; значение по умолчанию Неопределено;  - ВспомогательныйIPПорт (SyncPort) - номер вспомогательного IP-порта рабочего процесса. Число или массив чисел; значение по умолчанию Неопределено.  - РазделениеДанныхСеанса (SessionDataSeparation) - Структура, имена элементов которой соответствуют именам общих реквизитов. В процессе отбора элементы структуры РазделениеДанныхСеанса объединяются по И: запись журнала попадает в выборку, если в ней есть соответствия для всех общих реквизитов, заданных в фильтре. Значение по умолчанию Неопределено.   - Значение элемента структуры, в свою очередь, может быть:   - структурой, задающей единичное значение. Элементы структуры:   - Значение (Value) - значение общего реквизита. Значение по умолчанию - Неопределено;  - Использование (Use) - Булево. Значение по умолчанию - Истина. Задает использование общего реквизита, разделяющего данные. Если Ложь - элемент Значение игнорируется и может быть опущен. Таким образом, можно отбирать записи журнала, в которых данный общий реквизит не установлен.   - массивом, который задает набор допустимых значений общего реквизита, разделяющего данные. Массив содержит структуры, каждая из которых задает единичное значение общего реквизита (как описано выше). Элементы массива учитываются по ИЛИ: запись журнала попадает в выборку, если значение общего реквизита в ней равно одному из заданных в массиве.'
          }
        }
      }
    },
    "СмещениеЛетнегоВремени": {
      name: 'СмещениеЛетнегоВремени',
      name_en: 'DaylightTimeOffset',
      description: 'Получает смещение в секундах летнего времени заданного часового пояса относительно стандартного времени этого часового пояса для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение летнего времени, действующее в заданном часовом поясе.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧасовойПояс?: Строка, УниверсальноеВремя?: Дата)',
          Параметры: {
            ЧасовойПояс: 'Идентификатор часового пояса. Если Неопределено, то часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.',
            УниверсальноеВремя: 'Универсальное время (UTC), для которого нужно определить смещение или Неопределено. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "СмещениеСтандартногоВремени": {
      name: 'СмещениеСтандартногоВремени',
      name_en: 'StandardTimeOffset',
      description: 'Получает смещение в секундах стандартного времени заданного часового пояса относительно универсального времени без учета летнего времени для заданного универсального времени. Если УниверсальноеВремя = Неопределено, то возвращает смещение стандартного времени, действующее в заданном часовом поясе.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧасовойПояс?: Строка, УниверсальноеВремя?: Дата)',
          Параметры: {
            ЧасовойПояс: 'Идентификатор часового пояса. Если Неопределено, то часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.',
            УниверсальноеВремя: 'Универсальное время (UTC), для которого нужно определить смещение или Неопределено. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "СоздатьКаталог": {
      name: 'СоздатьКаталог',
      name_en: 'CreateDirectory',
      description: 'Создает новый каталог файлов.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяКаталога: Строка)',
          Параметры: {
            ИмяКаталога: 'Полное имя создаваемого каталога. Допускается использование схемы ftp для адресации файлов. При использовании этой схемы в адресах необходимо указывать прямые слеши \'/\', а не обратные \'\\\'.'
          }
        }
      }
    },
    "СоздатьФабрикуXDTO": {
      name: 'СоздатьФабрикуXDTO',
      name_en: 'CreateXDTOFactory',
      signature: {
        ПоИмениФайла: {
          СтрокаПараметров: '(Путь: Строка, Пакеты?: Массив): ФабрикаXDTO',
          Параметры: {
            Путь: 'Строка, представляющая собой путь к файлу, содержащему XML схему.',
            Пакеты: 'Массив пакетов XDTO, которые используются при разыменовании директив импорта.'
          }
        },
        ПоСпискуИменФайлов: {
          СтрокаПараметров: '(Пути: Массив, Пакеты?: Массив): ФабрикаXDTO',
          Параметры: {
            Пути: 'Массив путей к XML схемам, на основании которых необходимо создать фабрику XDTO.',
            Пакеты: 'Массив пакетов XDTO, которые используются для разыменования директив импорта.'
          }
        }
      }
    },
    "СокрЛ": {
      name: 'СокрЛ',
      name_en: 'TrimL',
      description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Строка',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "СокрЛП": {
      name: 'СокрЛП',
      name_en: 'TrimAll',
      description: 'Отсекает незначащие символы, стоящие слева от первого значащего символа в строке, и пробелы, стоящие справа от последнего значащего символа в строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Строка',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "СокрП": {
      name: 'СокрП',
      name_en: 'TrimR',
      description: 'Отсекает незначащие символы, стоящие справа от последнего значащего символа в строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Строка',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "Сообщить": {
      name: 'Сообщить',
      name_en: 'Message',
      description: 'Выводит текст сообщения в окно сообщений. Если в момент вызова окно сообщений отсутствует, то будет открыто новое окно сообщений. Сообщение, в зависимости от его смысловой нагрузки, можно пометить одной из пиктограмм, входящих в предопределенный набор.',
      signature: {
        default: {
          СтрокаПараметров: '(ТекстСообщения: Строка, Статус?: СтатусСообщения)',
          Параметры: {
            ТекстСообщения: 'Текст сообщения.',
            Статус: 'Статус сообщения. Определяет вид пиктограммы.  В режиме управляемого приложения параметр игнорируется. Значение по умолчанию: Обычное.'
          }
        }
      }
    },
    "Состояние": {
      name: 'Состояние',
      name_en: 'Status',
      description: 'Выводит текст в панель состояния.',
      signature: {
        default: {
          СтрокаПараметров: '(ТекстСообщения?: Строка, Прогресс?: Число, Пояснение?: Строка, Картинка?: Картинка)',
          Параметры: {
            ТекстСообщения: 'Строка, предназначенная для вывода в панель состояния. Если параметр не указан, возобновляется вывод системного текста в панель состояния.',
            Прогресс: 'Значение индикатора прогресса (от 1 до 100).  Если не задан, индикатор прогресса не отображается.',
            Пояснение: 'Текст пояснения.',
            Картинка: 'Картинка.'
          }
        }
      }
    },
    "СохранитьЗначение": {
      name: 'СохранитьЗначение',
      name_en: 'SaveValue',
      description: 'Сохраняет значение для использования не только в текущем, но и в последующих сеансах работы с программой. Значение хранится индивидуально для каждой пары информационная база - пользователь. Например, можно сохранять значения по умолчанию, используемые данным пользователем.',
      signature: {
        default: {
          СтрокаПараметров: '(Имя: Строка, Значение: Произвольный)',
          Параметры: {
            Имя: 'Имя, с которым сохраняется значение, используется для идентификации сохраняемых значений.',
            Значение: 'Сохраняемое значение.'
          }
        }
      }
    },
    "СохранитьНастройкиПользователя": {
      name: 'СохранитьНастройкиПользователя',
      name_en: 'SaveUserSettings',
      description: 'Выполняет сохранение пользовательских настроек в процессе работы, не дожидаясь завершения приложения.'
    },
    "Сред": {
      name: 'Сред',
      name_en: 'Mid',
      description: 'Выбирает строку символов, начиная с символа НачальныйНомер, общим количеством ЧислоСимволов.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, НачальныйНомер: Число, ЧислоСимволов?: Число): Строка',
          Параметры: {
            Строка: 'Исходная строка.',
            НачальныйНомер: 'Начальный номер символа, с которого начинается выборка. Нумерация символов в строке начинается с 1. Если указано значение, меньшее или равное нулю, то параметр принимает значение 1.',
            ЧислоСимволов: 'Количество выбираемых символов. Если параметр не указан, то выбираются символы до конца строки.'
          }
        }
      }
    },
    "СтрДлина": {
      name: 'СтрДлина',
      name_en: 'StrLen',
      description: 'Получает количество символов в строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Число',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "СтрЗаканчиваетсяНа": {
      name: 'СтрЗаканчиваетсяНа',
      name_en: 'StrEndsWith',
      description: 'Определяет, заканчивается ли строка указанной подстрокой. Определение выполняется с учетом регистра, аналогично функции Найти.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, СтрокаПоиска: Строка): Булево',
          Параметры: {
            Строка: 'Строка, окончание которой проверяется на совпадение с подстрокой поиска.',
            СтрокаПоиска: 'Строка, содержащая предполагаемое окончание строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация.'
          }
        }
      }
    },
    "СтрЗаменить": {
      name: 'СтрЗаменить',
      name_en: 'StrReplace',
      description: 'Находит в исходной строке все вхождения подстроки поиска и заменяет ее на подстроку замены.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка, ПодстрокаЗамены: Строка): Строка',
          Параметры: {
            Строка: 'Исходная строка.',
            ПодстрокаПоиска: 'Искомая подстрока.',
            ПодстрокаЗамены: 'Подстрока, на которую будет заменена подстрока поиска.'
          }
        }
      }
    },
    "СтрНайти": {
      name: 'СтрНайти',
      name_en: 'StrFind',
      description: 'Находит первое вхождение искомой строки как подстроки в исходной строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка, НаправлениеПоиска?: НаправлениеПоиска, НачальнаяПозиция?: Число, НомерВхождения?: Число): Число',
          Параметры: {
            Строка: 'Исходная строка.',
            ПодстрокаПоиска: 'Искомая подстрока.',
            НаправлениеПоиска: 'Указывает направление поиска подстроки в строке. Значение по умолчанию: СНачала.',
            НачальнаяПозиция: 'Указывает позицию в строке, с которой начинается поиск.   - Если параметр не задан и в параметре НаправлениеПоиска указано значение СНачала, то значение по-умолчанию равно 1.  - Если параметр не задан и в параметре НаправлениеПоиска указано значение СКонца, то значение по умолчанию равно длине строки. Не может быть отрицательным. В случае указания отрицательного значения выдаётся исключительная ситуация "Неверное значение параметра".',
            НомерВхождения: 'Указывает номер вхождения искомой подстроки в исходной строке. Значение по умолчанию: 1.'
          }
        }
      }
    },
    "СтрНачинаетсяС": {
      name: 'СтрНачинаетсяС',
      name_en: 'StrStartWith',
      description: 'Определяет, что строка начинается с указанной подстроки. Определение выполняется с учетом регистра, аналогично функции Найти.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, СтрокаПоиска: Строка): Булево',
          Параметры: {
            Строка: 'Строка, начало которой проверяется на совпадение с подстрокой поиска.',
            СтрокаПоиска: 'Строка, содержащая предполагаемое начало строки. В случае если переданное значение является пустой строкой генерируется исключительная ситуация.'
          }
        }
      }
    },
    "Строка": {
      name: 'Строка',
      name_en: 'String',
      description: 'Преобразует полученный параметр в значение типа Строка. При преобразовании к строке числа формируется его полное представление в стандартном виде, соответствующем национальным установкам. Преобразование значений типа Булево зависит от национальных установок и содержит строковое представление этих значений. При преобразовании к строке даты формируется ее полное представление в стандартном читабельном виде, соответствующем национальным установкам. Преобразование к строке значений остальных типов производится по мере возможности и обычно содержит читабельное представление значения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный): Строка',
          Параметры: {
            Значение: 'Исходное значение.'
          }
        }
      }
    },
    "СтрокаСоединенияИнформационнойБазы": {
      name: 'СтрокаСоединенияИнформационнойБазы',
      name_en: 'InfoBaseConnectionString',
      description: 'Возвращает Строка соединения информационной базы, которую, например, можно использовать для запуска 1С:Предприятия средствами встроенного языка в Automation, Менеджер COM-соединений. Пример результата метода: File="C:\\1cv8\\Base".'
    },
    "СтрПолучитьСтроку": {
      name: 'СтрПолучитьСтроку',
      name_en: 'StrGetLine',
      description: 'Получает строку многострочной строки по номеру.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, НомерСтроки: Число): Строка',
          Параметры: {
            Строка: 'Исходная строка.',
            НомерСтроки: 'Номер получаемой строки. Нумерация строк в многострочной строке начинается с 1.'
          }
        }
      }
    },
    "СтрРазделить": {
      name: 'СтрРазделить',
      name_en: 'StrSplit',
      description: 'Разделяет строку на части по указанным символам-разделителям.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, Разделитель: Строка, ВключатьПустые?: Булево): Массив',
          Параметры: {
            Строка: 'Разделяемая строка.',
            Разделитель: 'Строка символов, каждый из которых является индивидуальным разделителем.',
            ВключатьПустые: 'Указывает необходимость включать в результат пустые строки, которые могут образоваться в результате разделения исходной строки. Значение по умолчанию: Истина.'
          }
        }
      }
    },
    "СтрСоединить": {
      name: 'СтрСоединить',
      name_en: 'StrConcat',
      description: 'Соединяет массив переданных строк в одну строку с указанным разделителем.',
      signature: {
        default: {
          СтрокаПараметров: '(Строки: ФиксированныйМассив, Разделитель?: Строка): Строка',
          Параметры: {
            Строки: 'Массив, содержащий объединяемые строки.',
            Разделитель: 'Строка, которая будет вставлена между объединяемыми строками. Если параметр не задан, строки будут объединены слитно друг с другом. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "СтрСравнить": {
      name: 'СтрСравнить',
      name_en: 'StrCompare',
      description: 'Выполняет сравнение строк без учета регистра, аналогичное сравнению строк с помощью объекта СравнениеЗначений.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка1: Строка, Строка2: Строка): Число',
          Параметры: {
            Строка1: 'Строка для сравнения',
            Строка2: 'Строка для сравнения.'
          }
        }
      }
    },
    "СтрЧислоВхождений": {
      name: 'СтрЧислоВхождений',
      name_en: 'StrOccurrenceCount',
      description: 'Вычисляет число вхождений подстроки поиска в исходной строке.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка, ПодстрокаПоиска: Строка): Число',
          Параметры: {
            Строка: 'Исходная строка.',
            ПодстрокаПоиска: 'Искомая подстрока.'
          }
        }
      }
    },
    "СтрЧислоСтрок": {
      name: 'СтрЧислоСтрок',
      name_en: 'StrLineCount',
      description: 'Позволяет посчитать число строк в многострочной строке. Строки в многострочной строке разделены символами перевода строк (Символы.ПС).',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Число',
          Параметры: {
            Строка: 'Исходная строка.'
          }
        }
      }
    },
    "СтрШаблон": {
      name: 'СтрШаблон',
      name_en: 'StrTemplate',
      description: 'Подставляет параметры в строку по номеру.   - Если в строке встречается символ % два раза подряд (%%), такая пара трактуется как одинарный процент, независимо от того, стоит ли сразу за ними цифра или не стоит.  - Если параметров недостаточно для заполнения в шаблоне параметра %N, генерируется исключительная ситуация "Недостаточно фактических параметров".  - Если параметров слишком много, чтобы подставить их все в шаблон, генерируется исключительная ситуация "Очень много параметров".',
      signature: {
        default: {
          СтрокаПараметров: '(Шаблон: Строка, Значение1_Значение10?: Произвольный): Строка',
          Параметры: {
            Шаблон: 'Строка, содержащая маркеры подстановки вида: "%1..%N". Нумерация маркеров начинается с 1.',
            Значение1_Значение10: 'Параметры, содержащие произвольные значения, строковые представления которых должны быть подставлены в шаблон. Указываются через запятую. Количество значений должно совпадать с числом N из %N. Если количество значений не совпадает с числом N из %N, тогда генерируется исключительная ситуация "Недостаточно фактических параметров".'
          }
        }
      }
    },
    "ТекущаяДата": {
      name: 'ТекущаяДата',
      name_en: 'CurrentDate',
      description: 'Определяет текущую (системную) дату на компьютере.'
    },
    "ТекущаяДатаСеанса": {
      name: 'ТекущаяДатаСеанса',
      name_en: 'CurrentSessionDate',
      description: 'Получает текущую дату сервера, приведенную к часовому поясу сеанса. При вычислении даты используется один из заданных часовых поясов в порядке: часовой пояс сеанса, часовой пояс информационной базы, часовой пояс сервера.'
    },
    "ТекущаяУниверсальнаяДата": {
      name: 'ТекущаяУниверсальнаяДата',
      name_en: 'CurrentUniversalDate',
      description: 'Получает текущую универсальную дату компьютера.'
    },
    "ТекущаяУниверсальнаяДатаВМиллисекундах": {
      name: 'ТекущаяУниверсальнаяДатаВМиллисекундах',
      name_en: 'CurrentUniversalDateInMilliseconds',
      description: 'Получает текущую универсальную дату в миллисекундах (в UTC, начиная с 01.01.0001 00:00:00).'
    },
    "ТекущийВариантИнтерфейсаКлиентскогоПриложения": {
      name: 'ТекущийВариантИнтерфейсаКлиентскогоПриложения',
      name_en: 'ClientApplicationInterfaceCurrentVariant',
      description: 'Получает текущий вариант интерфейса.'
    },
    "ТекущийВариантОсновногоШрифтаКлиентскогоПриложения": {
      name: 'ТекущийВариантОсновногоШрифтаКлиентскогоПриложения',
      name_en: 'ClientApplicationBaseFontCurrentVariant',
      description: 'Получает текущий вариант основного шрифта приложения.'
    },
    "ТекущийКодЛокализации": {
      name: 'ТекущийКодЛокализации',
      name_en: 'CurrentLocaleCode',
      description: 'Получает код локализации (язык, страна) текущего сеанса, который может быть ключом командной строки /VL или, при запуске из Конфигуратора, установкой параметров запуска.'
    },
    "ТекущийРежимЗапуска": {
      name: 'ТекущийРежимЗапуска',
      name_en: 'CurrentRunMode',
      description: 'Получает режим запуска клиентского приложения текущего сеанса работы.'
    },
    "ТекущийЯзык": {
      name: 'ТекущийЯзык',
      name_en: 'CurrentLanguage',
      description: 'Получает язык интерфейса, выбранный для текущего пользователя или основной язык, если нет текущего пользователя или для него не указан язык.'
    },
    "ТекущийЯзыкСистемы": {
      name: 'ТекущийЯзыкСистемы',
      name_en: 'CurrentSystemLanguage',
      description: 'Возвращает используемый системой язык.'
    },
    "Тип": {
      name: 'Тип',
      name_en: 'Type',
      description: 'Получает тип по его строковому имени.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяТипа: Строка): Тип',
          Параметры: {
            ИмяТипа: 'Имя получаемого типа.'
          }
        }
      }
    },
    "ТипЗнч": {
      name: 'ТипЗнч',
      name_en: 'TypeOf',
      description: 'Получает тип значения.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Произвольный): Тип',
          Параметры: {
            Значение: 'Значение, тип которого необходимо получить.'
          }
        }
      }
    },
    "ТранзакцияАктивна": {
      name: 'ТранзакцияАктивна',
      name_en: 'TransactionActive',
      description: 'Получить текущее состояние транзакции.'
    },
    "ТРег": {
      name: 'ТРег',
      name_en: 'Title',
      description: 'Преобразует строку следующим образом: у каждого слова строки первый символ преобразуется к верхнему регистру. Все остальные символы преобразуются к нижнему регистру.',
      signature: {
        default: {
          СтрокаПараметров: '(Строка: Строка): Строка',
          Параметры: {
            Строка: 'Преобразуемая строка.'
          }
        }
      }
    },
    "УдалитьДанныеИнформационнойБазы": {
      name: 'УдалитьДанныеИнформационнойБазы',
      name_en: 'EraseInfoBaseData',
      description: 'Выполняет удаление данных информационной базы:   - Из таблиц, определяемых структурой метаданных;  - Из хранилищ настроек;  - Из истории;  - Административных параметров информационной базы;  - Из списка пользователей.'
    },
    "УдалитьИзВременногоХранилища": {
      name: 'УдалитьИзВременногоХранилища',
      name_en: 'DeleteFromTempStorage',
      description: 'Удаляет ранее помещенное значение из временного хранилища.',
      signature: {
        default: {
          СтрокаПараметров: '(Адрес: Строка)',
          Параметры: {
            Адрес: 'Адрес файла во временном хранилище, который необходимо удалить.'
          }
        }
      }
    },
    "УдалитьОбъекты": {
      name: 'УдалитьОбъекты',
      name_en: 'DeleteObjects',
      description: 'Удаляет объекты, ссылки на которые переданы в параметре СписокСсылок.ОбластьПоиска. При проверке ссылочной целостности поиск осуществляется среди всех данных, из которых могут быть ссылки на переданные объекты. Если на какой-либо объект нет доступа, то вызывается исключение.',
      signature: {
        default: {
          СтрокаПараметров: '(СписокСсылок: Массив, Проверять?: Булево, НайденныеДанные?: ТаблицаЗначений, ОбластьПоиска?: Массив, ВключитьОбъекты?: Массив, ИсключитьОбъекты?: Массив)',
          Параметры: {
            СписокСсылок: 'Список ссылок на объекты, которые нужно удалить.',
            Проверять: 'Определяет, выполнять ли контроль ссылочной целостности при выполнении процедуры. Истина - перед удалением проверяется, нет ли ссылок на удаляемый объект. Если есть, то объект не удаляется, а ссылки помещаются в таблицу значений <НайденныеДанные>. Ложь - проверка не выполняется. Значение по умолчанию: Ложь.',
            НайденныеДанные: 'Содержит ссылки на найденные объекты в виде ТаблицаЗначений, состоящей из колонок с индексами: 0 - искомая ссылка; 1 - ссылка на объект, если найденная ссылка соответствует объектной таблице или значение, идентифицирующее запись необъектной таблицы; 2 - объект метаданных, которому соответствуют данные, в которых найдена ссылка. В таблицу выводятся только непосредственно препятствующие удалению объекты (без рекурсии).',
            ОбластьПоиска: 'Определяет область поиска объектов, которые следует удалить. Область устанавливается комбинацией разделителей, в состав которых включены объекты метаданных, среди данных которых следует выполнять поиск. Элемент массива имеет тип Массив. Элемент вложенного массива имеет тип:   - Объект метаданных – Общий реквизит, разделяющий данные.  - Строка – имя общего реквизита, разделяющего данные. По умолчанию имеет значение Неопределено. Допустимые значения:   - Неопределено,  - Массив с комбинациями разделителей, определяющий область поиска,  - Пустой массив - область поиска определяется параметрами метода ВключитьОбъекты и ИсключитьОбъекты. Примечание. Если комбинация разделителей содержит повторы, то вызывается исключение, т.к. в конфигурации не может быть объектов метаданных, дважды включенных в состав одного разделителя. Значение по умолчанию: Неопределено.',
            ВключитьОбъекты: 'Позволяет явно указать объекты метаданных, которые должны присутствовать в области поиска ссылок на объекты. Элементом массива могут быть:   - Объект метаданных.  - Строка – полное имя объекта метаданных. Допустимые значения:   - Неопределено,  - Пустой массив,  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.',
            ИсключитьОбъекты: 'В качестве элементов массива могут выступать:   - Объект метаданных,  - Строка – полное имя объекта метаданных. Свойство позволяет явно указать объекты метаданных, которые следует исключить из области поиска ссылок на объекты. Допустимые значения:   - Неопределено  - Пустой массив (нет объектов, которые необходимо дополнительно включить в область поиска).  - Массив объектов метаданных.  Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "УдалитьФайлы": {
      name: 'УдалитьФайлы',
      name_en: 'DeleteFiles',
      description: 'Удаляет указанные файлы.',
      signature: {
        default: {
          СтрокаПараметров: '(Путь: Строка, Маска?: Строка)',
          Параметры: {
            Путь: 'Путь к удаляемым файлам.',
            Маска: 'Маска для выбора удаляемых файлов.  Если <Маска> не указана, то удаляются все файлы и каталог <Путь>. Для операционной системы MS Windows:  В строке маски, помимо обычных символов, допускается использование символа "*" (звездочка), обозначающего любое число произвольных символов, и "?" (знак вопроса), обозначающего один произвольный символ. Можно последовательно перечислить несколько фильтров, разделенных символом "|" (вертикальная черта). Для операционных систем Linux, MacOS:  В строке маски допускается использование следующих последовательностей:   - любой символ, допустимый в имени файла. Сопоставление указанных символов производится с учетом регистра;  - "*" (звездочка) - любая последовательность символов;  - "?" (знак вопроса) - любой символ;  - "[" - класс символов. После открывающей квадратной скобки указывается последовательность символов. Паттерн соответствует любому из указанных символов. Можно указывать диапазон, используя "-". Описание класса символов завершается "]". Для указания "-" в качестве символа класса нужно указать его первым или последним символом. Если после "[" указан знак "!", то класс описывает все символы, кроме указанных.'
          }
        }
      }
    },
    "УниверсальноеВремя": {
      name: 'УниверсальноеВремя',
      name_en: 'ToUniversalTime',
      description: 'Преобразует местное время в заданном часовом поясе в универсальное время.',
      signature: {
        default: {
          СтрокаПараметров: '(МестноеВремя: Дата, ЧасовойПояс?: Строка)',
          Параметры: {
            МестноеВремя: 'Локальное время.',
            ЧасовойПояс: 'Может быть задан только в коде, исполняемом на сервере, режиме запуска "Толстый клиент" и во внешнем соединении. Идентификатор часового пояса, к которому относится местное время. Если не задан (Неопределено), то часовой пояс компьютера. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59. Значение по умолчанию: Неопределено.'
          }
        }
      }
    },
    "УстановитьБезопасныйРежим": {
      name: 'УстановитьБезопасныйРежим',
      name_en: 'SetSafeMode',
      description: 'При выполнении на сервере или в файловом варианте информационной базы устанавливает или отменяет безопасный режим. В других случаях не вызывает никаких действий. В безопасном режиме:   - игнорируется привилегированный режим;  - запрещены внешние по отношению к платформе 1С:Предприятия действия: COM; загрузка внешних компонентов; запуск внешних приложений и команд операционной системы; доступ к файловой системе, кроме временных файлов; доступ к Интернету. Платформа обеспечивает равенство значений счетчика безопасного режима при вызове произвольного метода встроенного языка и после возврата из него.',
      signature: {
        default: {
          СтрокаПараметров: '(БезопасныйРежим: Булево)',
          Параметры: {
            БезопасныйРежим: 'Строка включает безопасный режим и устанавливает профиль безопасности с заданным именем. Повторный вызов увеличивает счетчик безопасного режима и не меняет имя текущего профиля безопасности. Может быть установлено имя только профиля, если его SafeModeProfile=Истина. Истина включает безопасный режим. Повторный вызов увеличивает счетчик безопасного режима. Ложь уменьшает счетчик безопасного режима. Если счетчик достиг 0, то безопасный режим выключается.'
          }
        }
      }
    },
    "УстановитьБезопасныйРежимРазделенияДанных": {
      name: 'УстановитьБезопасныйРежимРазделенияДанных',
      name_en: 'SetDataSeparationSafeMode',
      description: 'Устанавливает или отменяет безопасный режим разделения данных по заданному общему реквизиту. Установка безопасного режима действует до вызова его явной отмены или до возврата из метода встроенного языка, в котором выполнена его установка. Правила установки и отмены безопасного режима разделения данных аналогичны привилегированному режиму и безопасному режиму. Не позволяет отменить режим безопасного сеанса, определяемый установкой атрибута safe=”true” элемента zone файла default.vrd.  В каждом методе встроенного языка для каждого разделителя неявно определяется счетчик безопасного режима разделения данных с начальным значением 0. Установка безопасного режима разделения данных увеличивает значение счетчика в текущем методе, а отмена - уменьшает. Если значение текущего счетчика – 0, то отмена безопасного режима разделения данных порождает исключение.  Если при возврате из метода встроенного языка значение текущего счетчика отлично от 0, то оно принудительно сбрасывается в 0. Если суммарное значение счетчиков по текущему состоянию стека вызовов встроенного языка на сервере 1С:Предприятия отлично от нуля, то безопасный режим разделения данных включен.',
      signature: {
        default: {
          СтрокаПараметров: '(ОбщийРеквизит: Строка, Режим: Булево)',
          Параметры: {
            ОбщийРеквизит: 'Имя общего реквизита со значением "Использовать" свойства "Разделение данных", для которого должен быть установлен или отменен безопасный режим.',
            Режим: 'Истина – установить безопасный режим разделения данных по заданному общему реквизиту; Ложь – отменить безопасный режим разделения данных по заданному общему реквизиту.'
          }
        }
      }
    },
    "УстановитьБлокировкуСеансов": {
      name: 'УстановитьБлокировкуСеансов',
      name_en: 'SetSessionsLock',
      description: 'Устанавливает режим блокировки сеансов.',
      signature: {
        default: {
          СтрокаПараметров: '(Блокировка: БлокировкаСеансов)',
          Параметры: {
            Блокировка: 'Новое описание блокировки сеансов.'
          }
        }
      }
    },
    "УстановитьВнешнююКомпоненту": {
      name: 'УстановитьВнешнююКомпоненту',
      name_en: 'InstallAddIn',
      description: 'Доставляет объект внешнего компонента с сервера на клиент, после чего он становится доступен для метода ПодключитьВнешнююКомпоненту.',
      signature: {
        default: {
          СтрокаПараметров: '(Местоположение: Строка)',
          Параметры: {
            Местоположение: 'Строка, определяющая местоположение внешнего компонента. В качестве строки может использоваться:   - полное имя макета, в котором хранится внешний компонент в архиве;  - URL к внешнему компоненту, упакованному в ZIP-архив, в формате, аналогичном ПолучитьНавигационнуюСсылку().'
          }
        }
      }
    },
    "УстановитьВремяЗавершенияСпящегоСеанса": {
      name: 'УстановитьВремяЗавершенияСпящегоСеанса',
      name_en: 'SetHibernateSessionTerminateTime',
      description: 'Установить интервал времени в секундах, по истечении которого спящий сеанс будет завершен.',
      signature: {
        default: {
          СтрокаПараметров: '(Таймаут?: Число)',
          Параметры: {
            Таймаут: 'Интервал времени в секундах, по истечении которого спящий сеанс завершается. Значение по умолчанию: 86400.'
          }
        }
      }
    },
    "УстановитьВремяЗасыпанияПассивногоСеанса": {
      name: 'УстановитьВремяЗасыпанияПассивногоСеанса',
      name_en: 'SetPassiveSessionHibernateTime',
      description: 'Устанавливает интервал времени в секундах, по истечении которого неактивный сеанс переводится в спящий режим.',
      signature: {
        default: {
          СтрокаПараметров: '(Таймаут?: Число)',
          Параметры: {
            Таймаут: 'Интервал времени в секундах, по истечении которого неактивный сеанс переводится в спящий режим. Значение по умолчанию: 1200.'
          }
        }
      }
    },
    "УстановитьВремяОжиданияБлокировкиДанных": {
      name: 'УстановитьВремяОжиданияБлокировкиДанных',
      name_en: 'SetLockWaitTime',
      description: 'Устанавливает время ожидания блокировки данных (в секундах).',
      signature: {
        default: {
          СтрокаПараметров: '(Таймаут?: Число)',
          Параметры: {
            Таймаут: 'Время ожидания блокировки данных (в секундах). Значение по умолчанию: 20.'
          }
        }
      }
    },
    "УстановитьЗаголовокКлиентскогоПриложения": {
      name: 'УстановитьЗаголовокКлиентскогоПриложения',
      name_en: 'SetClientApplicationCaption',
      description: 'Устанавливает заголовок приложения, которое используется при формировании заголовков окон.',
      signature: {
        default: {
          СтрокаПараметров: '(ПредставлениеКлиентскогоПриложения: Строка)',
          Параметры: {
            ПредставлениеКлиентскогоПриложения: 'Представление клиентского приложения.'
          }
        }
      }
    },
    "УстановитьЗаголовокСистемы": {
      name: 'УстановитьЗаголовокСистемы',
      name_en: 'SetCaption',
      description: 'Устанавливает новый заголовок главного окна программы.',
      signature: {
        default: {
          СтрокаПараметров: '(Заголовок: Строка)',
          Параметры: {
            Заголовок: 'Текст, устанавливаемый в качестве заголовка главного окна программы.'
          }
        }
      }
    },
    "УстановитьИспользованиеЖурналаРегистрации": {
      name: 'УстановитьИспользованиеЖурналаРегистрации',
      name_en: 'SetEventLogUsing',
      description: 'Метод устанавливает, какие события (по уровню важности) должны регистрироваться в журнале.',
      signature: {
        default: {
          СтрокаПараметров: '(Уровни: Массив)',
          Параметры: {
            Уровни: 'Массив уровней важности регистрируемых событий. Состоит из значений типа УровеньЖурналаРегистрации. Пустой массив означает, что никакие события регистрировать не надо. Помимо пустого массива, допускаются следующие наборы значений:   - Ошибка;  - Ошибка, Предупреждение;  - Ошибка, Предупреждение, Информация;  - Ошибка, Предупреждение, Информация, Примечание. Порядок значений в массиве несущественен.'
          }
        }
      }
    },
    "УстановитьИспользованиеСобытияЖурналаРегистрации": {
      name: 'УстановитьИспользованиеСобытияЖурналаРегистрации',
      name_en: 'SetEventLogEventUse',
      description: 'Управляет регистрацией событий в журнале регистрации. Устанавливает для информационной базы режим регистрации события журнала регистрации. По умолчанию все события используются.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяСобытия: Строка, Использование: ИспользованиеСобытияЖурналаРегистрации)',
          Параметры: {
            ИмяСобытия: 'Имя регистрируемого события. Допустимые системные имена событий:    - _$Access$_.Access - Доступ. Доступ; Предназначено для регистрации фактов успешного доступа пользователей системы к тем или иным данным. Поле журнала регистрации Данные (Структура) в этом случае имеет следующий состав:   - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались. Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Access$_.AccessDenied - Доступ. Отказ в доступе; Предназначено для регистрации фактов отказа в доступе к тем или иным данным пользователям системы. Поле журнала регистрации Данные (Структура). имеет следующий состав:   - Для ошибки доступа к объекту (не ограничение доступа к данным):    - Право (Right) - имя нарушенного права;  - Для ошибки ограничения доступа к данным:    - Действие (Action) - Действие, которое выполнялось с данными, для объектных таблиц: Чтение (Read), Добавление (Insert), Изменение (Update), Удаление (Delete); для не объектных таблиц, все что не Чтение, то Изменение;  - Данные (Data) - скомпонованный результат выборки, поля регистрации данных, к которым обращались.Таблица значений, в которой содержатся данные из результата исполнения запроса. Все вложенные таблицы развернуты. Одинаковые значения пишутся один раз.  - _$Data$_.Delete - Данные. Удаление;  - _$Data$_.New - Данные. Добавление;  - _$Data$_.Post - Данные. Проведение;  - _$Data$_.TotalsMaxPeriodUpdate - Данные. Изменение максимального периода рассчитанных итогов;  - _$Data$_.TotalsMinPeriodUpdate - Данные. Изменение минимального периода рассчитанных итогов;  - _$Data$_.Unpost - Данные. Отмена проведения;  - _$Data$_.Update - Данные. Изменение;  - _$Data$_.SetStandardODataInterfaceContent - Данные. Изменение состава стандартного интерфейса OData;  - _$InfoBase$_.ConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.ConfigUpdate - Информационная база. Изменение конфигурации;  - _$InfoBase$_.DBConfigUpdate - Информационная база. Изменение конфигурации базы данных;  - _$InfoBase$_.DBConfigBackgroundUpdateStart - Информационная база. Запуск фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateFinish - Информационная база. Завершение фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateCancel - Информационная база. Отмена фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateSuspend - Информационная база. Приостановка (пауза) процесса фонового обновления;  - _$InfoBase$_.DBConfigBackgroundUpdateResume - Информационная база. Продолжение (после приостановки) процесса фонового обновления;  - _$InfoBase$_.DBConfigExtensionUpdate - Информационная база. Изменение расширения конфигурации базы данных; Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Имя расширения.  - Версия (Version) - Строка. Версия расширения.  - _$InfoBase$_.EventLogSettingsUpdate - Информационная база. Изменение параметров журнала регистрации;  - _$InfoBase$_.InfoBaseAdmParamsUpdate - Информационная база. Изменение параметров информационной базы;  - _$InfoBase$_.MasterNodeUpdate - Информационная база. Изменение главного узла;  - _$InfoBase$_.RegionalSettingsUpdate - Информационная база. Изменение региональных установок;  - _$InfoBase$_.EraseData - Информационная база. Удаление данных информационной баз;  - _$InfoBase$_.TARImportant - Тестирование и исправление. Ошибка;  - _$InfoBase$_.TARInfo - Тестирование и исправление. Сообщение;  - _$InfoBase$_.TARMess - Тестирование и исправление. Предупреждение;  - _$Job$_.Cancel - Фоновое задание. Отмена;  - _$Job$_.Fail - Фоновое задание. Ошибка выполнения;  - _$Job$_.Terminate - Фоновое задание. Принудительное завершение;  - _$Job$_.Start - Фоновое задание. Запуск;  - _$Job$_.Succeed - Фоновое задание. Успешное завершение;  - _$PerformError$_ - Ошибка выполнения;  - _$Session$_.Authentication - Сеанс. Аутентификация; выполняется только при удачной аутентификации. Для события Аутентификация записываются поля Пользователь и ИмяПользователя. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле Данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID;  - ИдентификаторПользователяПровайдераOpenID (OpenIDProviderUserID) - идентификатор пользователя на провайдере.  - _$Session$_.AuthenticationError - Сеанс. Ошибка аутентификации; выполняется только при ошибке аутентификации. Поле Комментарий события не заполняется. В случае аутентификации 1С:Предприятия или аутентификации операционной системы поле Данные заполняется структурой со следующим составом свойств:   - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - Имя (Name) - Строка. Выбирается из Имя;  - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы.  - В случае аутентификации при помощи OpenID поле данные заполняется структурой со следующим составом свойств:   - ТекущийПользовательОС (CurrentOSUser) - Строка. Источник данных - средства операционной системы;  - URLПровайдераOpenID (OpenIDProviderURL) - URL использованного провайдера OpenID  - _$Session$_.ConfigExtensionApplyError - Сеанс. Ошибка применения расширения конфигурации; записывается, если в процессе применений расширения произошла ошибка. Совпадает с текстом выводимого сообщения при невозможности подключить расширение. Поле Данные заполняется структурой со следующим составом свойств:    - Имя (Name) - Строка. Имя расширения  - _$Session$_.Finish - Сеанс. Завершение;  - _$Session$_.Start - Сеанс. Начало;  - _$Transaction$_.Begin - Транзакция. Начало;  - _$Transaction$_.Commit - Транзакция. Фиксация;  - _$Transaction$_.Rollback - Транзакция. Отмена;  - _$User$_.Delete - Пользователи. Удаление; записываются как при редактировании списка пользователей в Конфигураторе, так и при удалении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя  - _$User$_.New - Пользователи. Добавление; записываются как при создани пользователей в Конфигураторе, так и методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык.  - _$User$_.Update - Пользователи. Изменение; записываются как при редактировании списка пользователей в Конфигураторе, так и при изменении пользователей методами встроенного языка. Поле Данные доступно при выгрузке и просмотре только для администратора. Поле Данные заполняется структурой со следующим составом свойств:   - АутентификацияОС (OSAuthentication) - Булево. Выбирается из АутентификацияОС;  - АутентификацияСтандартная (StandardAuthentication) - Булево. Выбирается из АутентификацияСтандартная;  - ЗапрещеноИзменятьПароль (CannotChangePassword) - Булево. Выбирается из ЗапрещеноИзменятьПароль;  - Имя (Name) - Строка. Выбирается из Имя;  - ОсновнойИнтерфейс (DefaultInterface) - ОсновнойИнтерфейс. Выбирается из имени интерфейса. Выводится, только если основной режим ОбычноеПриложение.  - ПарольИзменен (PasswordChanged) - Булево. Указывает, изменен ли пароль.  - ПарольУстановлен (PasswordIsSet) - Булево. Выбирается из ПарольУстановлен;  - ПоказыватьВСпискеВыбора (ShowInList) - Булево. Выбирается из ПоказыватьВСпискеВыбора;  - ПолноеИмя (FullName) - Строка. Выбирается из ПолноеИмя  - ПользовательОС (OSUser) - Строка. Выбирается из ПользовательОС;  - РежимЗапуска (RunMode) - РежимЗапускаКлиентскогоПриложения. Выбирается из РежимЗапуска;  - Роли (Roles) - Массив полных имен объектов метаданных ОбъектМетаданных: Роль;  - Язык (Language) - Язык;  - _$OpenIDProvider$_.PositiveAssertion - Провайдер OpenID. Подтверждено; записывается базой, выступающей в роли провайдера OpenID, при отправке положительного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - Имя (Name) - Строка. Выбирается из Имя;  - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию;  - _$OpenIDProvider$_.NegativeAssertion - Провайдер OpenID. Отклонено; записывается базой, выступающей в роли провайдера OpenID, при отправке отрицательного ответа на запрос аутентификации. Поле Комментарий события не заполняется. Поле Данные заполняется структурой со следующим составом свойств:   - URLДоверяющейСтороны (RelyingPartyURL) - URL доверяющей стороны OpenID, запросившей аутентификацию.',
            Использование: 'Задает использование и режим регистрации указанного в первом параметре события.  Режим регистрации управляется значением свойства ОписаниеИспользования, которое регламентировано для двух событий:   - _$Access$_.Access – массив значений типа ОписаниеИспользованияСобытияДоступЖурналаРегистрации;  - _$Access$_.AccessDenied – массив значений типа ОписаниеИспользованияСобытияОтказВДоступеЖурналаРегистрации.'
          }
        }
      }
    },
    "УстановитьКраткийЗаголовокПриложения": {
      name: 'УстановитьКраткийЗаголовокПриложения',
      name_en: 'SetShortApplicationCaption',
      description: 'Добавляет краткий заголовок приложения.  Текст размещается в заголовке окна приложения перед текстом системного заголовка и автоматически отделяется точкой.',
      signature: {
        default: {
          СтрокаПараметров: '(КраткийЗаголовок: Строка)',
          Параметры: {
            КраткийЗаголовок: 'Устанавливаемый заголовок приложения. Произвольный набор символов.'
          }
        }
      }
    },
    "УстановитьМинимальнуюДлинуПаролейПользователей": {
      name: 'УстановитьМинимальнуюДлинуПаролейПользователей',
      name_en: 'SetUserPasswordMinLength',
      description: 'Устанавливает минимальную длину, которую должны иметь пароли пользователей информационной базы. Действует только при изменении пароля существующего пользователя или при создании нового пользователя.',
      signature: {
        default: {
          СтрокаПараметров: '(Длина?: Число)',
          Параметры: {
            Длина: 'Минимально допустимое количество символов в паролях пользователей. Значение по умолчанию: 5.'
          }
        }
      }
    },
    "УстановитьМонопольныйРежим": {
      name: 'УстановитьМонопольныйРежим',
      name_en: 'SetExclusiveMode',
      description: 'Устанавливает и отключает использование монопольного режима.',
      signature: {
        default: {
          СтрокаПараметров: '(МонопольныйРежим: Булево)',
          Параметры: {
            МонопольныйРежим: 'Истина - устанавливает монопольную блокировку текущей области данных от имени сеанса; Ложь - если установлена монопольная блокировка текущей области от имени текущего сеанса, то удаляет монопольную блокировку текущей области. Снимает монопольный режим только текущей области, т.е. области, определяемой значениями установленных в сеансе разделитей. Не затрагивает монопольные блокировки подобластей;'
          }
        }
      }
    },
    "УстановитьНастройкиКлиентаЛицензирования": {
      name: 'УстановитьНастройкиКлиентаЛицензирования',
      name_en: 'SetLicensingClientParameters',
      description: 'Предназначен для сохранения в информационной базе имени пользователя и пароля клиента лицензирования. Эти данные используются при проверке лицензионности конфигурации.',
      signature: {
        default: {
          СтрокаПараметров: '(Имя?: Строка, Пароль?: Строка, ДополнительныйПараметр?: Строка)',
          Параметры: {
            Имя: 'Имя клиента лицензирования.',
            Пароль: 'Пароль клиента лицензирования.',
            ДополнительныйПараметр: 'Дополнительный параметр клиента лицензирования, используемый для технической поддержки конфигурации.'
          }
        }
      }
    },
    "УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы": {
      name: 'УстановитьОбновлениеПредопределенныхДанныхИнформационнойБазы',
      name_en: 'SetInfoBasePredefinedDataUpdate',
      description: 'Устанавливает новое значение режима обновления предопределенных данных для информационной базы. Для выполнения требуются права администратора информационной базы. Фактический режим обновления определяется в следующем порядке:   - Если для объекта метаданных в данных установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для объекта метаданных в конфигурации установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если для информационной базы установлен режим обновления, отличный от Авто, то используется это значение.  - Иначе, если это периферийный узел РИБ, то предопределенные данные не будут обновлены. Если проверка выполняется для центрального узла РИБ, или для базы не являющейся РИБ, обновление предопределенных данных будет выполнено. Метод доступен только из неразделенного сеанса.',
      signature: {
        Установитьобновлениепредопределенныхданныхинформационнойбазы: {
          СтрокаПараметров: '(ОбновлениеПредопределенных?: ОбновлениеПредопределенныхДанных)',
          Параметры: {
            ОбновлениеПредопределенных: 'Режим обновления предопределенных данных. Значение по умолчанию: Авто.'
          }
        }
      }
    },
    "УстановитьПараметрыФункциональныхОпцийИнтерфейса": {
      name: 'УстановитьПараметрыФункциональныхОпцийИнтерфейса',
      name_en: 'SetInterfaceFunctionalOptionParameters',
      description: 'Устанавливает параметры функциональных опций, действие которых будет распространяться на командный интерфейс и рабочий стол. Вызывает автоматическое обновление интерфейса (включая рабочий стол). Параметры функциональных опций позволяют определить, как отобрать значения функциональной опции, привязанной к реквизиту справочника или ресурсу регистра сведений, то есть в случае, когда в одном объекте может храниться набор значений опций.  При привязке функциональной опции к ресурсу периодического регистра сведений, если период в параметрах не указывается, значение выбирается как срез последних на текущую дату. А если есть параметр Период (Period), то он используется как дата, на которую будет взят срез.',
      signature: {
        default: {
          СтрокаПараметров: '(УстанавливаемыеПараметры: Структура, СбрасываемыеПараметры?: Массив)',
          Параметры: {
            УстанавливаемыеПараметры: 'Структура, определяющая значения параметров. Ключ элемента структуры задает имя параметра, соответствующее имени одному из объектов метаданных типа ПараметрФункциональныхОпций. Значение элемента структуры содержит значение параметра.',
            СбрасываемыеПараметры: 'Сбрасываемые параметры функциональных опций.  Могут задаваться строкой (имена опций указываются через запятую) или массивом строк имен параметров функциональных опции, значения которых необходимо сбросить.'
          }
        }
      }
    },
    "УстановитьПривилегированныйРежим": {
      name: 'УстановитьПривилегированныйРежим',
      name_en: 'SetPrivilegedMode',
      description: 'В файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы управляет (включает или выключает) привилегированный режим исполнения кода, аналогичный режиму работы кода привилегированных модулей. В привилегированном режиме никакие проверки прав не выполняются и разрешены любые операции. В клиент-серверном варианте при выполнении на клиенте данный метод не выполняет никаких действий. Первое выполнение метода с параметром Истина в файловом варианте информационной базы или на сервере в клиент-серверном варианте информационной базы включает привилегированный режим. Для явного выключения привилегированного режима необходимо внутри процедуры или функции, в которой он был включен, вызвать метод с параметром Ложь столько же раз, сколько раз в этой же процедуре или функции был вызван метод с параметром Истина. Если этого сделано не было, то при возврате из процедуры/функции, в которой был включен привилегированный режим, он будет выключен автоматически (неявно). Если в процедуре или функции вызовов метода с параметром Ложь сделано больше, чем вызовов с параметром Истина, то будет вызвано исключение.',
      signature: {
        default: {
          СтрокаПараметров: '(Включить: Булево)',
          Параметры: {
            Включить: 'Определяет, будет ли включен привилегированный режим:   - Истина - включить режим;  - Ложь - выключить режим.'
          }
        }
      }
    },
    "УстановитьПроверкуСложностиПаролейПользователей": {
      name: 'УстановитьПроверкуСложностиПаролейПользователей',
      name_en: 'SetUserPasswordStrengthCheck',
      description: 'Устанавливает или отключает следующие ограничения на сложность паролей пользователей информационной базы:   - Длина не менее 7 символов;  - Содержит не менее 3-х типов символов из перечисленных ниже:   - заглавные буквы;  - строчные буквы;  - цифры;  - спец. символы.   - Не совпадает с именем пользователя;  - Не является последовательностью символов. Действует только при изменении пароля существующего пользователя или при создании нового пользователя.',
      signature: {
        default: {
          СтрокаПараметров: '(СложныйПароль: Булево)',
          Параметры: {
            СложныйПароль: 'Истина - установить; Ложь - снять.'
          }
        }
      }
    },
    "УстановитьРасширениеРаботыСКриптографией": {
      name: 'УстановитьРасширениеРаботыСКриптографией',
      name_en: 'InstallCryptoExtension',
      description: 'Устанавливает расширение для работы с криптографией в браузер.'
    },
    "УстановитьРасширениеРаботыСФайлами": {
      name: 'УстановитьРасширениеРаботыСФайлами',
      name_en: 'InstallFileSystemExtension',
      description: 'Устанавливает расширение работы с файлами. В режиме запуска толстого и тонкого клиентов информирует о том, что расширение установлено. Для клиента мобильного приложения, информирует о том, что расширение установлено.'
    },
    "УстановитьСоединениеСВнешнимИсточникомДанных": {
      name: 'УстановитьСоединениеСВнешнимИсточникомДанных',
      name_en: 'ConnectExternalDataSource',
      description: 'Устанавливает соединение с внешним источником данных.',
      signature: {
        default: {
          СтрокаПараметров: '(ИмяВнешнегоИсточникаДанных?: Строка)',
          Параметры: {
            ИмяВнешнегоИсточникаДанных: 'Имя внешнего источника данных, с которым нужно установить соединение.'
          }
        }
      }
    },
    "УстановитьСоответствиеОбъектаИФормы": {
      name: 'УстановитьСоответствиеОбъектаИФормы',
      name_en: 'SetObjectAndFormConformity',
      description: 'Устанавливает соответствие управляемой формы и объектов вида СообщениеПользователю для последующей правильной привязки сообщений к элементам управления формы. Для того, чтобы сообщение использовало данные соответствия объекта и формы, у него необходимо заполнить поле Данные. Соответствие может быть получено методом ПолучитьСоответствиеОбъектаИФормы. Получать соответствие можно до тех пор, пока существует объект, для которого оно зарегистрированно.',
      signature: {
        default: {
          СтрокаПараметров: '(Объект: СправочникОбъект.<Имя справочника>, ИдентификаторФормыИИмяРеквизита: Структура)',
          Параметры: {
            Объект: 'Прикладной объект, преобразованный из универсального объекта в значение, для которого необходимо установить соответствие с именем реквизита формы.',
            ИдентификаторФормыИИмяРеквизита: 'Содержит идентификатор формы и имя реквизита элемента управления, для которых выполняется установка соответствия.  Структура, передаваемая в параметр, может содержать два элемента с именами ключей: 1. "ИдентификаторФормы" ("FormID") – уникальный идентификатор формы (тип УникальныйИдентификатор); 2. "ИмяРеквизита" ("AttributeName") – имя реквизита в форме (тип Строка). Этот элемент может не указываться.'
          }
        }
      }
    },
    "УстановитьСоставСтандартногоИнтерфейсаOData": {
      name: 'УстановитьСоставСтандартногоИнтерфейсаOData',
      name_en: 'SetStandardODataInterfaceContent',
      description: 'Устанавливает состав объектов метаданных, доступных через стандартный сервис OData API. Объекты, доступные для включения в стандартный OData API:   - Справочник.ИмяСправочника  - Документ.ИмяДокумента  - ПланОбмена.ИмяПланаОбмена  - ПланСчетов.ИмяПланаСчетов  - ПланВидовРасчета.ИмяПланаВидовРасчета  - ПланВидовХарактеристик.ИмяПланаВидовХарактеристик  - РегистрБухгалтерии.ИмяРегистраБухгалтерии  - РегистрСведений.ИмяРегистраСведений  - РегистрРасчета.ИмяРегистраРасчета  - РегистрНакопления.ИмяРегистраНакопления  - ЖурналДокументов.ИмяЖурналаДокументов  - Перечисление.ИмяПеречисления  - Задача.ИмяЗадачи  - БизнесПроцесс.ИмяБизнесПроцесса  - Константа.ИмяКонстанты',
      signature: {
        default: {
          СтрокаПараметров: '(ОбъектыМетаданных: Массив)',
          Параметры: {
            ОбъектыМетаданных: 'Массив объектов метаданных и/или имен объектов метаданных.'
          }
        }
      }
    },
    "УстановитьЧасовойПоясИнформационнойБазы": {
      name: 'УстановитьЧасовойПоясИнформационнойБазы',
      name_en: 'SetInfoBaseTimeZone',
      description: 'Устанавливает новый часовой пояс информационной базы и сохраняет его в базе данных. Если параметр не задан, то установка часового пояса информационной базы отменяется. В этом случае часовой пояс информационной базы совпадает с часовым поясом сервера.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧасовойПояс?: Строка)',
          Параметры: {
            ЧасовойПояс: 'Идентификатор часового пояса. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
          }
        }
      }
    },
    "УстановитьЧасовойПоясСеанса": {
      name: 'УстановитьЧасовойПоясСеанса',
      name_en: 'SetSessionTimeZone',
      description: 'Устанавливает часовой пояс текущего сеанса. Если параметр не задан, то часовым поясом сеанса становится часовой пояс информационной базы, если он определен, или часовой пояс компьютера сервера, если часовой пояс информационной базы не определен.',
      signature: {
        default: {
          СтрокаПараметров: '(ЧасовойПояс?: Строка)',
          Параметры: {
            ЧасовойПояс: 'Идентификатор часового пояса. Список допустимых часовых поясов может быть получен методом ПолучитьДопустимыеЧасовыеПояса.  Кроме того, возможно задание часовых поясов смещением от универсального времени (часовые пояса GMT) в формате: GMT{+/-}h[h][:mm] где hh=0:23, mm=0:59.'
          }
        }
      }
    },
    "Формат": {
      name: 'Формат',
      name_en: 'Format',
      description: 'Формирует удобное для чтения представление значений. Полезно использование в отчетах и при прочем визуальном отображении значений.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Число, ФорматнаяСтрока?: Строка): Строка',
          Параметры: {
            Значение: 'Форматируемое значение.',
            ФорматнаяСтрока: 'Форматная строка представляет собой строковое значение, включающее параметры форматирования.  Параметры форматирования перечисляются через символ ";". Наличие параметра означает отличие форматирования от стандартного.  Если параметр не задан, то применяется стандартное форматирование, которое в основном соответствует преобразованию значения к строке. Однако для значений типа Число и Дата по умолчанию (0 и 01.01.0001 00:00:00 соответственно) будет выдаваться пустая строка. Каждый параметр задается именем параметра, символом "=" и значением параметра. Значение параметра может указываться в одинарных или двойных кавычках. Это необходимо, если значение параметра содержит символы, используемые в синтаксисе форматной строки. Внутри значения параметра могут указываться произвольные символы, которые при формировании результирующей строки будут отображаться как есть. Таким образом, например, можно указывать разделители часов, минут и секунд при форматировании времени. Если эти символы совпадают со значениями форматной строки, их необходимо заключать в одинарные кавычки. Имена и значения параметров форматной строки:   - Л (L) - имя языка, страны, для которых будет выполняться стандартное форматирование. Доступные имена языков:   - af Африкаанс  - af_NA (af_NA) Африкаанс (Намибия)  - af_ZA Африкаанс (Южная Африка)  - am Амхарский  - am_ET Амхарский (Эфиопия)  - ar Арабский  - ar_AE Арабский (Объединенные Арабские Эмираты)  - ar_BH Арабский (Бахрейн)  - ar_DZ Арабский (Алжир)  - ar_EG Арабский (Египет)  - ar_IQ Арабский (Ирак)  - ar_JO Арабский (Иордания)  - ar_KW Арабский (Кувейт)  - ar_LB Арабский (Ливан)  - ar_LY Арабский (Ливия)  - ar_MA Арабский (Марокко)  - ar_OM Арабский (Оман)  - ar_QA Арабский (Катар)  - ar_SA Арабский (Саудовская Аравия)  - ar_SD Арабский (Судан)  - ar_SY Арабский (Сирия)  - ar_TN Арабский (Тунис)  - ar_YE Арабский (Йемен)  - as Ассамский  - as_IN Ассамский (Индия)  - az Азербайджанский  - az_AZ Азербайджанский (Азербайджан)  - az_Cyrl Азербайджанский (Кириллица)  - az_Cyrl_AZ Азербайджанский (Кириллица, Азербайджан)  - az_Latn Азербайджанский (Латиница)  - az_Latn_AZ Азербайджанский (Латиница, Азербайджан)  - be Белорусский  - be_BY Белорусский (Беларусь)  - bg Болгарский  - bg_BG Болгарский (Болгария)  - bn Бенгальский  - bn_IN Бенгальский (Индия)  - ca Каталанский  - ca_ES Каталанский (Испания)  - cs Чешский  - cs_CZ Чешский (Чешская Республика)  - cy Валлийский  - cy_GB Валлийский (Великобритания)  - da Датский  - da_DK Датский (Дания)  - de Немецкий  - de_AT Немецкий (Австрия)  - de_BE Немецкий (Бельгия)  - de_CH Немецкий (Швейцария)  - de_DE Немецкий (Германия)  - de_LI (de_LI) Немецкий (Лихтенштейн)  - de_LU Немецкий (Люксембург)  - el Греческий  - el_CY (el_CY) Греческий (Кипр)  - el_GR Греческий (Греция)  - en Английский  - en_AU Английский (Австралия)  - en_BE Английский (Бельгия)  - en_BW Английский (Ботсвана)  - en_BZ (en_BZ) Английский (Белиз)  - en_CA Английский (Канада)  - en_GB Английский (Великобритания)  - en_HK Английский (Гонконг, (Область с Особым Административным Управлением, Китай))  - en_IE Английский (Ирландия)  - en_IN Английский (Индия)  - en_JM (en_JM) Английский (Ямайка)  - en_MH (en_MH) Английский (Маршалловы Острова)  - en_MT Английский (Мальта)  - en_NA (en_NA) Английский (Намибия)  - en_NZ Английский (Новая Зеландия)  - en_PH Английский (Филиппины)  - en_PK Английский (Пакистан)  - en_SG Английский (Сингапур)  - en_TT (en_TT) Английский (Тринидад и Тобаго)  - en_US Английский (Соединенные Штаты Америки)  - en_VI Английский (Американские Виргинские Острова)  - en_ZA Английский (Южная Африка)  - en_ZW Английский (Зимбабве)  - es Испанский  - es_AR Испанский (Аргентина)  - es_BO Испанский (Боливия)  - es_CL Испанский (Чили)  - es_CO Испанский (Колумбия)  - es_CR Испанский (Коста-Рика)  - es_DO Испанский (Доминиканская Республика )  - es_EC Испанский (Эквадор)  - es_ES Испанский (Испания)  - es_GT Испанский (Гватемала)  - es_HN Испанский (Гондурас)  - es_MX Испанский (Мексика)  - es_NI Испанский (Никарагуа)  - es_PA Испанский (Панама)  - es_PE Испанский (Перу)  - es_PR Испанский (Пуэрто-Рико)  - es_PY Испанский (Парагвай)  - es_SV Испанский (Сальвадор)  - es_US Испанский (Соединенные Штаты Америки)  - es_UY Испанский (Уругвай)  - es_VE Испанский (Венесуэлла)  - et Эстонский  - et_EE Эстонский (Эстония)  - eu Баскский  - eu_ES Баскский (Испания)  - fa Персидский  - fa_AF Персидский (Афганистан)  - fa_IR Персидский (Иран)  - fi Финский  - fi_FI Финский (Финляндия)  - fo Фарерский  - fo_FO Фарерский (Фарерские острова)  - fr Французский  - fr_BE Французский (Бельгия)  - fr_CA Французский (Канада)  - fr_CH Французский (Швейцария)  - fr_FR Французский (Франция)  - fr_LU Французский (Люксембург)  - fr_MC (fr_MC) Французский (Монако)  - fr_SN (fr_SN) Французский (Сенегал)  - ga Ирландский  - ga_IE Ирландский (Ирландия)  - gl Галисийский  - gl_ES, Галисийский (Испания)  - gu Гуярати  - gu_IN Гуярати (Индия)  - he Иврит  - he_IL Иврит (Израиль)  - hi Хинди  - hi_IN Хинди (Индия)  - hr Хорватский  - hr_HR Хорватский (Хорватия)  - hu Венгерский  - hu_HU Венгерский (Венгрия)  - hy Армянский  - hy_AM Армянский (Армения)  - hy_AM_REVISED Армянский (Армения, REVISED)  - id Индонезийский  - id_ID Индонезийский (Индонезия)  - is Исландский  - is_IS Исландский (Исландия)  - it Итальянский  - it_CH, Итальянский (Швейцария)  - it_IT Итальянский (Италия)  - ja Японский  - ja_JP Японский (Япония)  - ka Грузинский  - ka_GE Грузинский (Грузия)  - kk Казахский  - kk_KZ Казахский (Казахстан)  - kl Гренландский  - kl_GL Гренландский (Гренландия)  - kn Каннада  - kn_IN Каннада (Индия)  - ko Корейский  - ko_KR Корейский (Южная Корея)  - kok Конкани  - kok_IN Конкани (Индия)  - ky Киргизский  - ky_KY Киргизский (Киргизия)  - lt Литовский  - lt_LT Литовский (Литва)  - lv Латышский  - lv_LV Латышский (Латвия)  - mk Македонский  - mk_MK Македонский (Македония)  - ml Малаялам  - ml_IN Малаялам (Индия)  - mr Маратийский  - mr_IN Маратийский (Индия)  - ms Малайский  - ms_BN Малайский (Бруней)  - ms_MY Малайский (Малайзия)  - mt Мальтийский  - mt_MT Мальтийский (Мальта)  - nb Норвежский букмол  - nb_NO Норвежский букмол (Норвегия)  - nl Голландский  - nl_BE Голландский (Бельгия)  - nl_NL Голландский (Нидерланды)  - nn Норвежский нюнорск  - nn_NO Норвежский нюнорск (Норвегия)  - om Оромо (Афан)  - om_ET Оромо (Афан) (Эфиопия)  - om_KE Оромо (Афан) (Кения)  - or Ория  - or_IN Ория (Индия)  - pa Панджабский  - pa_IN Панджабский (Индия)  - pl Польский  - pl_PL Польский (Польша)  - ps Пашто (Пушто)  - ps_AF Пашто (Пушто) (Афганистан)  - pt Португальский  - pt_BR Португальский (Бразилия)  - pt_PT Португальский (Португалия)  - ro Румынский  - ro_RO Румынский (Румыния)  - ru Русский  - ru_RU Русский (Россия)  - ru_UA Русский (Украина)  - sk Словацкий  - sk_SK Словацкий (Словакия)  - sl Словенский  - sl_SI Словенский (Словения)  - so Сомали  - so_DJ Сомали (Джибути)  - so_ET Сомали (Эфиопия)  - so_KE Сомали (Кения)  - so_SO Сомали (Сомали)  - sq Албанский  - sq_AL Албанский (Албания)  - sr Сербский  - sr_BA (sr_BA) Сербский (Босния и Герцеговина)  - sr_CS Сербский (Сербия и Черногория)  - sr_Cyrl Сербский (Кириллица)  - sr_Cyrl_BA (sr_Cyrl_BA) Сербский (Кириллица, Босния и Герцеговина)  - sr_Cyrl_CS Сербский (Кириллица, Сербия и Черногория)  - sr_Cyrl_ME (sr_Cyrl_ME) Сербский (Кириллица, Черногория)  - sr_Cyrl_RS (sr_Cyrl_RS) Сербский (Кириллица, Сербия)  - sr_Latn Сербский (Латиница)  - sr_Latn_BA (sr_Latn_BA) Сербский (Латиница, Босния и Герцеговина)  - sr_Latn_CS Сербский (Латиница, Сербия и Черногория)  - sr_Latn_ME (sr_Latn_ME) Сербский (Латиница, Черногория)  - sr_Latn_RS (sr_Latn_RS) Сербский (Латиница, Сербия)  - sr_ME (sr_ME) Сербский (Черногория)  - sr_RS (sr_RS) Сербский (Сербия)  - sv Шведский  - sv_FI Шведский (Финляндия)  - sv_SE Шведский (Швеция)  - sw Суахили  - sw_KE Суахили (Суахили)  - sw_TZ Суахили (Танзания)  - ta Тамильский  - ta_IN Тамильский (Индия)  - te Телугу  - te_IN Телугу (Индия)  - th Тайский  - th_TH Тайский (Таиланд)  - ti Тигриниа  - ti_ER Тигриниа (Эритрея)  - ti_ET Тигриниа (Эфиопия)  - tr Турецкий  - tr_TR Турецкий (Турция)  - uk Украинский  - uk_UA Украинский (Украина)  - ur Урду  - ur_PK Урду (Пакистан)  - uz Узбекский  - uz_Cyrl Узбекский (Кириллица)  - uz_Cyrl_UZ Узбекский (Кириллица, Узбекистан)  - uz_Latn Узбекский (Латиница)  - uz_Latn_UZ Узбекский (Латиница, Узбекистан)  - uz_UZ Узбекский (Узбекистан)  - vi Вьетнамский  - vi_VN Вьетнамский (Вьетнам)  - zh Китайский  - zh_CN Китайский (Китай)  - zh_Hans Китайский (Hans)  - zh_Hans_CN Китайский (Hans, Китай)  - zh_Hans_SG Китайский (Hans, Сингапур)  - zh_Hant Китайский (Hant)  - zh_Hant_HK Китайский (Hant, Гонконг (Область с Особым Административным Управлением, Китай))  - zh_Hant_MO Китайский (Hant, Макао (Область с Особым Административным Управлением, Китай))  - zh_Hant_TW Китайский (Hant, Тайвань)  - zh_HK Китайский (Гонконг (Область с Особым Административным Управлением, Китай))  - zh_MO Китайский (Макао (Область с Особым Административным Управлением, Китай))  - zh_SG Китайский (Сингапур)  - zh_TW Китайский (Тайвань)  - ЧЦ (ND) - общее число отображаемых десятичных разрядов целой и дробной частей. Исходное число округляется при этом в соответствии с правилами округления Окр15как20. Если указан этот параметр, то для отображения дробной части числа обязательно указание параметра ЧДЦ, иначе дробная часть отображаться не будет.  - ЧДЦ (NFD) - число десятичных разрядов в дробной части. Исходное число округляется при этом в соответствии с правилами округления Окр15как20.  - ЧС (NS) - сдвиг разрядов: положительный - деление, отрицательный - умножение. Другими словами, это означает, что исходное число будет умножено или поделено на 10*С, где С - значение параметра по модулю.  - ЧРД (NDS) - символ-разделитель целой и дробной части.  - ЧРГ (NGS) - символ-разделитель групп целой части числа. Если в качестве разделителя использовать пустую строку, то в этом случае разделителем будет символ неразрывного пробела.  - ЧН (NZ) - строка, представляющая нулевое значение числа. Если не задано, то представление в виде пустой строки. Если задано "ЧН=", то в виде "0". Не используется для числовых полей ввода.  - ЧВН (NLZ) - нужно ли выводить лидирующие нули. Значение данного параметра не задается, собственно наличие параметра определяет вывод лидирующих нулей.  - ЧГ (NG) - порядок группировки разрядов числа. В качестве значения указываются числа, через запятую, обозначающие количество группируемых разрядов справа налево. Имеют смысл только два первых числа. Первое из них указывает первичную группировку, то есть ту, которая будет использована для наименее значимых разрядов целой части числа. Если второе число не указано, то будут сгруппированы только наименее значимые разряды. Если в качестве второго числа задан 0, то для всех разрядов целой части числа будет применено значение указанное для первичной группировки. Если в качестве второго числа используется значение, отличное от 0, то это значение будет использовано для группировки всех разрядов, кроме уже сгруппированных наименее значимых.  - ЧО (NN) - представление отрицательных чисел.   - 0 (0) - строка вида "(1,1)";  - 1 (1) - строка вида "-1,1";  - 2 (2) - строка вида "- 1,1";  - 3 (3) - строка вида "1,1-";  - 4 (4) - строка вида "1,1 -".  - ДФ (DF) - формат даты.   - д (d) - день месяца (цифрами) без лидирующего нуля;  - дд (dd) - день месяца (цифрами) с лидирующим нулем;  - ддд (ddd) - краткое название дня недели *);  - дддд (dddd) - полное название дня недели *);  - М (M) - номер месяца (цифрами) без лидирующего нуля;  - ММ (MM) - номер месяца (цифрами) с лидирующим нулем;  - МММ (MMM) - краткое название месяца *);  - ММММ (MMMM) - полное название месяца *);  - к (q) - номер квартала в году;  - г (y) - номер года без века и лидирующего нуля;  - гг (yy) - номер года без века с лидирующим нулем;  - гггг (yyyy) - номер года с веком;  - ч (h) - час в 12 часовом варианте без лидирующих нулей;  - чч (hh) - час в 12 часовом варианте с лидирующим нулем;  - Ч (H) - час в 24 часовом варианте без лидирующих нулей;  - ЧЧ (HH) - час в 24 часовом варианте с лидирующим нулем;  - м (m) - минута без лидирующего нуля;  - мм (mm) - минута с лидирующим нулем;  - с (s) - секунда без лидирующего нуля;  - сс (ss) - секунда с лидирующим нулем;  - вв (tt) - отображение половины дня AM/PM (действительно только для языков конфигурирования, поддерживающих 12 часовой вариант представления времени).  - Примечание: *) - не используется для форматной строки поля ввода даты.  - ДЛФ (DLF) - локальный формат даты. Указывается вариант отображения частей даты.   - Д (D) - дата (цифрами);  - ДД (DD) - длинная дата (месяц прописью);  - В (T) - полное время, дата может объединяться со временем;  - ДВ (DT) - дата время.  - Пример: выражение Формат(\'20051120140323\',"ДЛФ=ДДВ") имеет значение "20 ноября 2005 г. 14:03:23".  - Важно! Порядок следования опций форматной строки для ДЛФ <дата + время> (ДВ или ДДВ) не может быть изменен.  - ДП (DE) - строка, представляющая пустую дату (например, Формат(\'00010101000000\' ,"ДП=""пустая дата""") вернет строку "пустая дата").  - БЛ (BF) - строка, представляющая логическое значение Ложь.  - БИ (BT) - строка, представляющая логическое значение Истина. Примечание. Использование параметров для поля ввода: параметр ДП (DE) не используется; параметр ДЛФ (DLF) используется только со значениями Д (D), В(T) и ДВ (DT).'
          }
        }
      }
    },
    "Цел": {
      name: 'Цел',
      name_en: 'Int',
      description: 'Вычисляет целую часть переданного числа, полностью отсекая дробную часть.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число): Число',
          Параметры: {
            Число: 'Исходное число.'
          }
        }
      }
    },
    "Час": {
      name: 'Час',
      name_en: 'Hour',
      description: 'Определяет час в указанной дате.',
      signature: {
        default: {
          СтрокаПараметров: '(Дата: Дата): Число',
          Параметры: {
            Дата: 'Исходная дата.'
          }
        }
      }
    },
    "ЧасовойПояс": {
      name: 'ЧасовойПояс',
      name_en: 'TimeZone',
      description: 'Получает идентификатор часового пояса компьютера.'
    },
    "ЧасовойПоясСеанса": {
      name: 'ЧасовойПоясСеанса',
      name_en: 'SessionTimeZone',
      description: 'Получает идентификатор часового пояса текущего сеанса.'
    },
    "Число": {
      name: 'Число',
      name_en: 'Number',
      description: 'Преобразует полученный параметр в значение типа Число. Значение типа Строка преобразуется в число в том случае, если параметр является строковым представлением литерала численного типа. При этом строковое представление анализируется как с учетом региональных установок информационной базы, так и без их учета. В противном случае будет выдано сообщение об ошибке выполнения функции. Параметр типа Булево преобразуется в число по следующим правилам:   - Ложь преобразуется в 0;  - Истина преобразуется в 1.',
      signature: {
        default: {
          СтрокаПараметров: '(Значение: Строка): Число',
          Параметры: {
            Значение: 'Исходное значение.'
          }
        }
      }
    },
    "ЧислоПрописью": {
      name: 'ЧислоПрописью',
      name_en: 'NumberInWords',
      description: 'Формирует представление числа прописью в соответствии с заданными форматной строкой и параметрами предмета исчисления.',
      signature: {
        default: {
          СтрокаПараметров: '(Число: Число, ФорматнаяСтрока?: Строка, ПараметрыПредметаИсчисления?: Строка): Строка',
          Параметры: {
            Число: 'Число, которое необходимо преобразовать в строку прописью.',
            ФорматнаяСтрока: 'Форматная строка представляет собой строковое значение, включающее параметры форматирования. Параметры форматирования перечисляются через символ ";" (точка с запятой). Если параметр не указывается, используется значение параметра по умолчанию. Каждый параметр задается именем параметра, символом "=" (равно) и значением параметра. Значение параметра может указываться в одинарных или двойных кавычках. Это необходимо, если значение параметра содержит символы, используемые в синтаксисе форматной строки.   - Л (L) - Код локализации. По умолчанию используется код локализации, установленный в операционной системе. Примеры кодов локализации: ru_RU - Русский (Россия); en_US - Английский (США).  - НП (SN) - Включать/не включать название предмета исчисления (Булево), по умолчанию - Истина.  - НД (FN) - Включать/не включать название десятичных частей предмета исчисления (Булево), по умолчанию - Истина.  - ДП (FS) - Дробную часть выводить прописью/числом (Булево), по умолчанию - Ложь;  - ИИ (AU) - Определяет формирование классической (с использованием союза and перед прописью десятков и/или единиц внутри прописи триады) или упрощенной (без использования союза and) прописи числа. Имеет смысл и анализируется только при англоязычной локализации (en, en_XX). Возможные значения параметра:   - НеИспользовать (DontUse) - формировать упрощенную пропись числа (используется по умолчанию);  - Использовать (Use) - формировать классическую пропись числа.',
            ПараметрыПредметаИсчисления: 'Представляет собой строковое значение, определяющее параметры предмета исчисления. Параметры предмета исчисления перечисляются через запятую. Формат строки зависит от кода локализации. Для русского и белорусского языков (ru_RU, be_BY): "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2", где: "рубль, рубля, рублей, м" – предмет исчисления:    - рубль – единственное число именительный падеж;  - рубля – единственное число родительный падеж;  - рублей – множественное число родительный падеж;  - м – мужской род (ж – женский род, с - средний род);  - "копейка, копейки, копеек, ж" – дробная часть, аналогично предмету исчисления (может отсутствовать);  - "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для украинского языка (uk_UA):  "гривна, гривны, гривен, м, копейка, копейки, копеек, ж, 2", где: "гривна, гривны, гривен, м" – предмет исчисления:    - "гривна – единственное число именительный падеж;  - гривны – единственное число родительный падеж;  - гривен – множественное число родительный падеж;  - м – мужской род (ж – женский род, с - средний род);  - "копейка, копейки, копеек, ж" – дробная часть, аналогично предмету исчисления (может отсутствовать);  - "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для польского языка (pl_PL):  "złoty, złote, złotych, m, grosz, grosze, groszy, m, 2" где: "złoty, złote, złotych, m " - предмет исчисления (m - мужской род, ż - женский род, ń - средний род, mo – личностный мужской род).   - złoty - единственное число именительный падеж;  - złote - единственное число винительный падеж;  - złotych - множественное число винительный падеж;  - m - мужской род (ż - женский род, ń - средний род, mo – личностный мужской род);  - "grosz, grosze, groszy, m " - дробная часть (может отсутствовать) (аналогично целой части);  - 2 - количество разрядов дробной части (может отсутствовать, по-умолчанию равно 2). Пример: Пропись = ЧислоПрописью(1832, “L=pl_PL;SN=true;FN=true;FS=true”, “złoty, złote, złotych, m, grosz, grosze, groszy, m, 2”); Для английского, французского, финского и казахского языков (en_US, fr_CA,fi_FI, kk_KZ): "dollar, dollars, cent, cents, 2", где:   - "dollar, dollars" – предмет исчисления в единственном и множественном числе;  - "cent, cents" – дробная часть в единственном и множественном числе (может отсутствовать);  - "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для немецкого языка (de_DE): "EURO, EURO, М, Cent, Cent, M, 2", где: "EURO, EURO, М" – предмет исчисления:    - EURO, EURO – предмет исчисления в единственном и множественном числе;  - М – мужской род (F – женский род, N - средний род); "Cent, Cent, M" – дробная часть, аналогично предмету исчисления (может отсутствовать); "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для латышского языка (lv_LV): "lats, lati, latu, V, santīms, santīmi, santīmu, V, 2, J, J", где: "lats, lati, latu, v" – предмет исчисления:    - lats – для чисел заканчивающихся на 1, кроме 11;  - lati – для чисел заканчивающихся на 2-9 и 11;  - latu – множественное число (родительный падеж) используется после числительных 0, 10, 20,..., 90, 100, 200, ..., 1000, ..., 100000;  - v – мужской род (s – женский род); "santīms, santīmi, santīmu, V" – дробная часть, аналогично предмету исчисления (может отсутствовать); "2" – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2); "J" - число 100 выводится как "Одна сотня" для предмета исчисления (N - как "Сто"); может отсутствовать, по умолчанию равно "J"; "J" - число 100 выводится как "Одна сотня" для дробной части (N - как "Сто"); может отсутствовать, по умолчанию равно "J". Для литовского языка (lt_LT): "litas, litai, litų, М, centas, centai, centų, М, 2", где: "litas, litai, litų, М" – предмет исчисления:   - litas - единственное число целой части;  - litai - множественное число целой части от 2 до 9;  - litų - множественное число целой части прочие;  - m - род целой части (f - женский род), "centas, centai, centų, М" – дробная часть, аналогично предмету исчисления (может отсутствовать); "2" - количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для эстонского языка (et_EE): "kroon, krooni, sent, senti, 2", где: "kroon, krooni" – – предмет исчисления в единственном и множественном числе;   - "sent, senti" – дробная часть в единственном и множественном числе (может отсутствовать);  - 2 – количество разрядов дробной части (может отсутствовать, по умолчанию равно 2). Для болгарского языка (bg_BG): "лев, лева, м, стотинка, стотинки, ж, 2", где: "лев, лева, м" – предмет исчисления:   - лев - единственное число целой части;  - лева - множественное число целой части;  - м - род целой части, "стотинка, стотинки, ж" - дробная часть:   - стотинка - единственное число дробной части;  - стотинки - множественное число дробной части;  - ж - род дробной части, "2" - количество разрядов дробной части. Для румынского языка (ro_RO): "leu, lei, M, ban, bani, W, 2"; "leu, lei, M" – предмет исчисления:   - leu - единственное число целой части;  - lei - множественное число целой части;  - M - род целой части; "ban, bani, W" - дробная часть:   - ban - единственное число дробной части;  - bani - множественное число дробной части;  - W - род дробной части; "2" - количество разрядов дробной части. Для грузинского, азербайджанского и туркменского языков(ka_GE, az,tk): "ლარი, თეთრი, 2";   - ლარი - целая часть;  - თეთრი - дробная часть;  - "2" - количество разрядов дробной части. Для вьетнамского языка (vi_VN): "dong, xu, 2";   - dong, - целая часть;  - xu, - дробная часть;  - 2 - количество разрядов дробной части. Для турецкого языка (tr_TR): "TL,Kr,2,Separate", где:   - TL - целая часть;  - Kr - дробная часть (может отсутствовать);  - 2 - количество разрядов дробной части (может отсутсвовать, значение по-умолчанию - 2);  - "Separate" - признак написания прописи раздельно, "Solid" - слитно (может отсутствовать, по умолчанию слитно). Для киргизского языка (ky_KY): "Сом,Тыйын,2", где:   - Сом - целая часть;  - Тыйын - дробная часть (может отсутствовать);  - 2 - количество разрядов дробной части (может отсутсвовать, значение по-умолчанию - 2). Для венгерского языка (hu): "Forint, fillér, 2", где   - Forint - целая часть;  - fillér - дробная часть;  - "2" - количество разрядов дробной части.  Значение по умолчанию: Пустая строка.'
          }
        }
      }
    },
    "ЭтоАдресВременногоХранилища": {
      name: 'ЭтоАдресВременногоХранилища',
      name_en: 'IsTempStorageURL',
      description: 'Проверяет, является ли переданный адрес адресом файла во временном хранилище.',
      signature: {
        default: {
          СтрокаПараметров: '(Адрес: Строка): Булево',
          Параметры: {
            Адрес: 'Адрес файла во временном хранилище, который необходимо проверить.'
          }
        }
      }
    }
  };
  return data;
}

export function globalvariables() {
  return {
    "WSСсылки": {
      name: 'WSСсылки',
      name_en: 'WSReferences',
      description: 'Содержит менеджер ссылок на внешние Web-сервисы.'
    },
    "БиблиотекаКартинок": {
      name: 'БиблиотекаКартинок',
      name_en: 'PictureLib',
      description: 'Используется для доступа к библиотеке картинок.'
    },
    "БиблиотекаМакетовОформленияКомпоновкиДанных": {
      name: 'БиблиотекаМакетовОформленияКомпоновкиДанных',
      name_en: 'DataCompositionAppearanceTemplateLib',
      description: 'Библиотека макетов оформления компоновки данных. Доступны следующие предопределенные макеты оформления: Основной(Main), Яркий(Gaudy), Море(Sea), Арктика(Arctic), Зеленый(Green), Античный(Antique).'
    },
    "БиблиотекаСтилей": {
      name: 'БиблиотекаСтилей',
      name_en: 'StyleLib',
      description: 'Используется для доступа к определенным в конфигурации стилям.'
    },
    "БизнесПроцессы": {
      name: 'БизнесПроцессы',
      name_en: 'BusinessProcesses',
      description: 'Используется для доступа к определенным в конфигурации бизнес-процессам.'
    },
    "ВнешниеИсточникиДанных": {
      name: 'ВнешниеИсточникиДанных',
      name_en: 'ExternalDataSources',
      description: 'Содержит объект для управления внешними источниками данных.'
    },
    "ВнешниеОбработки": {
      name: 'ВнешниеОбработки',
      name_en: 'ExternalDataProcessors',
      description: 'Используется для доступа к внешним обработкам.'
    },
    "ВнешниеОтчеты": {
      name: 'ВнешниеОтчеты',
      name_en: 'ExternalReports',
      description: 'Используется для доступа к внешним отчетам.'
    },
    "ГлавныйИнтерфейс": {
      name: 'ГлавныйИнтерфейс',
      name_en: 'MainInterface',
      description: 'Используется для доступа к определенным в конфигурации пользовательским интерфейсам.'
    },
    "ГлавныйСтиль": {
      name: 'ГлавныйСтиль',
      name_en: 'MainStyle',
      description: 'Управляет стилем всего приложения, аналогично тому, как это происходит при установке стиля приложения в режиме Конфигуратор.  Может быть установлено в одно из значений коллекции стилей глобального контекста или в значение стиля по умолчанию (стиль "Авто").'
    },
    "Документы": {
      name: 'Документы',
      name_en: 'Documents',
      description: 'Используется для доступа к определенным в конфигурации документам.'
    },
    "ДоставляемыеУведомления": {
      name: 'ДоставляемыеУведомления',
      name_en: 'DeliverableNotifications',
      description: 'Используется для доступа к менеджеру доставляемых уведомлений.'
    },
    "ЖурналыДокументов": {
      name: 'ЖурналыДокументов',
      name_en: 'DocumentJournals',
      description: 'Используется для доступа к определенным в конфигурации журналам документов.'
    },
    "Задачи": {
      name: 'Задачи',
      name_en: 'Tasks',
      description: 'Используется для доступа к определенным в конфигурации задачам.'
    },
    "ИспользованиеРабочейДаты": {
      name: 'ИспользованиеРабочейДаты',
      name_en: 'WorkingDateUse',
      description: 'Определяет режим использования рабочей даты.'
    },
    "ИсторияРаботыПользователя": {
      name: 'ИсторияРаботыПользователя',
      name_en: 'UserWorkHistory',
      description: 'Используется для управления историей работы пользователя. Для использования свойства требуется, чтобы для пользователя было доступно право СохранениеДанныхПользователя.'
    },
    "Константы": {
      name: 'Константы',
      name_en: 'Constants',
      description: 'Используется для доступа к определенным в конфигурации константам.'
    },
    "КритерииОтбора": {
      name: 'КритерииОтбора',
      name_en: 'FilterCriteria',
      description: 'Используется для доступа к определенным в конфигурации критериям отбора.'
    },
    "Метаданные": {
      name: 'Метаданные',
      name_en: 'Metadata',
      description: 'Используется для доступа к структуре метаданных конфигурации.'
    },
    "Обработки": {
      name: 'Обработки',
      name_en: 'DataProcessors',
      description: 'Используется для доступа к определенным в конфигурации обработкам.'
    },
    "ОтправкаДоставляемыхУведомлений": {
      name: 'ОтправкаДоставляемыхУведомлений',
      name_en: 'DeliverableNotificationSend',
      description: 'Используется для доступа к менеджеру отправки уведомлений.'
    },
    "Отчеты": {
      name: 'Отчеты',
      name_en: 'Reports',
      description: 'Используется для доступа к определенным в конфигурации отчетам.'
    },
    "ПараметрЗапуска": {
      name: 'ПараметрЗапуска',
      name_en: 'LaunchParameter',
      description: 'Используется для доступа к параметру запуска, передаваемому через ключ командной строки /C.'
    },
    "ПараметрыСеанса": {
      name: 'ПараметрыСеанса',
      name_en: 'SessionParameters',
      description: 'Используется для доступа к параметрам сеанса.'
    },
    "Перечисления": {
      name: 'Перечисления',
      name_en: 'Enums',
      description: 'Используется для доступа к определенным в конфигурации перечислениям.'
    },
    "ПланыВидовРасчета": {
      name: 'ПланыВидовРасчета',
      name_en: 'ChartsOfCalculationTypes',
      description: 'Используется для доступа к менеджеру всех планов видов расчета.'
    },
    "ПланыВидовХарактеристик": {
      name: 'ПланыВидовХарактеристик',
      name_en: 'ChartsOfCharacteristicTypes',
      description: 'Используется для доступа к планам видов характеристик.'
    },
    "ПланыОбмена": {
      name: 'ПланыОбмена',
      name_en: 'ExchangePlans',
      description: 'Используется для доступа к планам обмена.'
    },
    "ПланыСчетов": {
      name: 'ПланыСчетов',
      name_en: 'ChartsOfAccounts',
      description: 'Используется для доступа к планам счетов.'
    },
    "ПолнотекстовыйПоиск": {
      name: 'ПолнотекстовыйПоиск',
      name_en: 'FullTextSearch',
      description: 'Используется для управления и использования полнотекстового поиска.'
    },
    "ПользователиИнформационнойБазы": {
      name: 'ПользователиИнформационнойБазы',
      name_en: 'InfoBaseUsers',
      description: 'Используется для управления списком пользователей информационной базы.'
    },
    "Последовательности": {
      name: 'Последовательности',
      name_en: 'Sequences',
      description: 'Используется для доступа к определенным в конфигурации последовательностям.'
    },
    "РабочаяДата": {
      name: 'РабочаяДата',
      name_en: 'WorkingDate',
      description: 'Содержит рабочую дату, используемую в текущем сеансе работы с конфигурацией. Доступно для записи в случае, если свойство ИспользованиеРабочейДаты имеет значение Назначать.'
    },
    "РасширенияКонфигурации": {
      name: 'РасширенияКонфигурации',
      name_en: 'ConfigurationExtensions',
      description: 'Предоставляет доступ к управлению расширениями конфигурации.'
    },
    "РегистрыБухгалтерии": {
      name: 'РегистрыБухгалтерии',
      name_en: 'AccountingRegisters',
      description: 'Используется для доступа к регистрам бухгалтерии.'
    },
    "РегистрыНакопления": {
      name: 'РегистрыНакопления',
      name_en: 'AccumulationRegisters',
      description: 'Используется для доступа к определенным в конфигурации регистрам накопления.'
    },
    "РегистрыРасчета": {
      name: 'РегистрыРасчета',
      name_en: 'CalculationRegisters',
      description: 'Используется для доступа к менеджеру всех регистров расчета.'
    },
    "РегистрыСведений": {
      name: 'РегистрыСведений',
      name_en: 'InformationRegisters',
      description: 'Используется для доступа к определенным в конфигурации регистрам сведений.'
    },
    "РегламентныеЗадания": {
      name: 'РегламентныеЗадания',
      name_en: 'ScheduledJobs',
      description: 'Используется для доступа к регламентным заданиям.'
    },
    "СериализаторXDTO": {
      name: 'СериализаторXDTO',
      name_en: 'XDTOSerializer',
      description: 'Сериализатор XDTO, соответствующий глобальной фабрики XDTO.'
    },
    "Справочники": {
      name: 'Справочники',
      name_en: 'Catalogs',
      description: 'Используется для доступа к определенным в конфигурации справочникам.'
    },
    "СредстваГеопозиционирования": {
      name: 'СредстваГеопозиционирования',
      name_en: 'LocationTools',
      description: 'Используется для доступа к средствам геопозиционирования мобильной платформы.'
    },
    "СредстваКриптографии": {
      name: 'СредстваКриптографии',
      name_en: 'CryptoToolsManager',
      description: 'Свойство предоставляет доступ к менеджеру средств криптографии.'
    },
    "СредстваМультимедиа": {
      name: 'СредстваМультимедиа',
      name_en: 'MultimediaTools',
      description: 'Используется для доступа к определенным в конфигурации средствам мультимедиа мобильной платформы.'
    },
    "СредстваПочты": {
      name: 'СредстваПочты',
      name_en: 'MailTools',
      description: 'Предоставляет доступ к средствам почты мобильной платформы.'
    },
    "СредстваТелефонии": {
      name: 'СредстваТелефонии',
      name_en: 'TelephonyTools',
      description: 'Предоставляет доступ к средствам телефонии мобильной платформы.'
    },
    "ФабрикаXDTO": {
      name: 'ФабрикаXDTO',
      name_en: 'XDTOFactory',
      description: 'Фабрика XDTO, содержащая все пакеты XDTO, имеющиеся в конфигурации, а также предопределенные пакеты (например, пакет типов XML схемы).'
    },
    "ФоновыеЗадания": {
      name: 'ФоновыеЗадания',
      name_en: 'BackgroundJobs',
      description: 'Используется для доступа к фоновым заданиям.'
    },
    "ХранилищаНастроек": {
      name: 'ХранилищаНастроек',
      name_en: 'SettingsStorages',
      description: 'Предназначено для доступа к хранилищам настроек, которые созданы в конфигурации.'
    },
    "ХранилищеВариантовОтчетов": {
      name: 'ХранилищеВариантовОтчетов',
      name_en: 'ReportsVariantsStorage',
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек вариантов отчета.  Если в свойстве конфигурации "ХранилищеВариантовОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеВариантовОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.  Для чтения, изменения, добавления и удаления настроек следует в параметрах методов объектов СтандартноеХранилищеНастроекМенеджер и ХранилищеНастроекМенеджер.Имя хранилища использовать следующие значения:   - Ключ объекта – указывается полное имя отчета. Например: "Отчет.Продажи".  - Ключ настройки – указывается текстовый идентификатор варианта. Например: "ПродажиПоРегионам". Тип сохраняемого значения – НастройкиКомпоновкиДанных.'
    },
    "ХранилищеНастроекДанныхФорм": {
      name: 'ХранилищеНастроекДанныхФорм',
      name_en: 'FormDataSettingsStorage',
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек данных форм.  Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек данных форм. Если в свойстве конфигурации "ХранилищеНастроекДанныхФорм" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    "ХранилищеОбщихНастроек": {
      name: 'ХранилищеОбщихНастроек',
      name_en: 'CommonSettingsStorage',
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление общих настроек.  Если в свойстве конфигурации "ХранилищеОбщихНастроек" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления вариантов отчетов. Если в свойстве конфигурации "ХранилищеОбщихНастроек" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    "ХранилищеПользовательскихНастроекДинамическихСписков": {
      name: 'ХранилищеПользовательскихНастроекДинамическихСписков',
      name_en: 'DynamicListsUserSettingsStorage',
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек динамических списков.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек динамических списков. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекДинамическихСписков" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    "ХранилищеПользовательскихНастроекОтчетов": {
      name: 'ХранилищеПользовательскихНастроекОтчетов',
      name_en: 'ReportsUserSettingsStorage',
      description: 'Содержит объект, с помощью которого осуществляется чтение, изменение, добавление и удаление настроек отчетов.  Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" не указано хранилище, то содержит объект СтандартноеХранилищеНастроекМенеджер, предназначенный для чтения, изменения, добавления и удаления настроек вариантов отчетов. Если в свойстве конфигурации "ХранилищеПользовательскихНастроекОтчетов" указано хранилище, созданное в конфигурации, то содержит объект ХранилищеНастроекМенеджер.Имя хранилища.'
    },
    "ХранилищеСистемныхНастроек": {
      name: 'ХранилищеСистемныхНастроек',
      name_en: 'SystemSettingsStorage',
      description: 'Содержит объект менеджера стандартного хранилища настроек, предназначенный для доступа к системным настройкам.'
    }
  };
}

export function keywords() {
  return {
    "ru": {
      Процедура: {},
      Функция: {},
      Экспорт: {},
      Перем: {},
      Неопределено: {},
      Истина: {},
      Ложь: {},
      КонецПроцедуры: {},
      КонецФункции: {},
      Прервать: {},
      Продолжить: {},
      Возврат: {},
      Использовать: {},
      ВызватьИсключение: {},
      Если: {},
      Тогда: {},
      ИначеЕсли: {},
      КонецЦикла: {},
      Иначе: {},
      Исключение: {},
      КонецПопытки: {},
      КонецЕсли: {},
      Попытка: {},
      Пока: {},
      Для: {},
      Каждого: {},
      Из: {},
      По: {},
      Цикл: {},
      НЕ: {},
      И: {},
      ИЛИ: {},
      NULL: {}
    },
    "en": {
      Procedure: {},
      Function: {},
      Export: {},
      Var: {},
      Undefined: {},
      True: {},
      False: {},
      NULL: {},
      EndProcedure: {},
      EndFunction: {},
      Break: {},
      Continue: {},
      Return: {},
      Use: {},
      If: {},
      Else: {},
      ElsIf: {},
      Then: {},
      EndIf: {},
      Try: {},
      Except: {},
      EndTry: {},
      Raise: {},
      While: {},
      For: {},
      Each: {},
      In: {},
      To: {},
      Do: {},
      EndDo: {},
      NOT: {},
      AND: {},
      OR: {}
    }
  };
}